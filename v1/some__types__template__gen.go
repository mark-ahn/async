// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package async

import (
	"context"
	"sync"
)

type WorkerOfBoolToBool interface {
	Push(ctx context.Context, work *WorkOfBoolToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfBoolToBool struct {
	Value    bool
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfBoolToBoolWithContext struct {
	Context context.Context
	WorkOfBoolToBool
}

var (
	zero_of_WorkOfBoolToBool       WorkOfBoolToBool
	zero_of_WorkOfBoolToBool_Value bool
	pool_of_WorkOfBoolToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToBool{}
		},
	}
)

func getWorkOfBoolToBool() *WorkOfBoolToBool {
	return pool_of_WorkOfBoolToBool.Get().(*WorkOfBoolToBool)
}
func putWorkOfBoolToBool(d *WorkOfBoolToBool) {
	d.Value = zero_of_WorkOfBoolToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToBool.Put(d)
}

type _BoolToBool struct{}

func (_ _BoolToBool) GetWork() *WorkOfBoolToBool {
	return getWorkOfBoolToBool()
}
func (__ _BoolToBool) GetWorkWith(value bool, returnCh chan<- *ReturnOfBool) *WorkOfBoolToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToBool) PutWork(d *WorkOfBoolToBool) {
	putWorkOfBoolToBool(d)
}

func (_ _BoolToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _BoolToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _BoolToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _BoolToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _BoolToBool) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToBool) CallAsync(ctx context.Context, work *WorkOfBoolToBool, h func(ctx context.Context, arg bool) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToByte interface {
	Push(ctx context.Context, work *WorkOfBoolToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfBoolToByte struct {
	Value    bool
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfBoolToByteWithContext struct {
	Context context.Context
	WorkOfBoolToByte
}

var (
	zero_of_WorkOfBoolToByte       WorkOfBoolToByte
	zero_of_WorkOfBoolToByte_Value bool
	pool_of_WorkOfBoolToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToByte{}
		},
	}
)

func getWorkOfBoolToByte() *WorkOfBoolToByte {
	return pool_of_WorkOfBoolToByte.Get().(*WorkOfBoolToByte)
}
func putWorkOfBoolToByte(d *WorkOfBoolToByte) {
	d.Value = zero_of_WorkOfBoolToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToByte.Put(d)
}

type _BoolToByte struct{}

func (_ _BoolToByte) GetWork() *WorkOfBoolToByte {
	return getWorkOfBoolToByte()
}
func (__ _BoolToByte) GetWorkWith(value bool, returnCh chan<- *ReturnOfByte) *WorkOfBoolToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToByte) PutWork(d *WorkOfBoolToByte) {
	putWorkOfBoolToByte(d)
}

func (_ _BoolToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _BoolToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _BoolToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _BoolToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _BoolToByte) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToByte) CallAsync(ctx context.Context, work *WorkOfBoolToByte, h func(ctx context.Context, arg bool) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToComplex128 interface {
	Push(ctx context.Context, work *WorkOfBoolToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfBoolToComplex128 struct {
	Value    bool
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfBoolToComplex128WithContext struct {
	Context context.Context
	WorkOfBoolToComplex128
}

var (
	zero_of_WorkOfBoolToComplex128       WorkOfBoolToComplex128
	zero_of_WorkOfBoolToComplex128_Value bool
	pool_of_WorkOfBoolToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToComplex128{}
		},
	}
)

func getWorkOfBoolToComplex128() *WorkOfBoolToComplex128 {
	return pool_of_WorkOfBoolToComplex128.Get().(*WorkOfBoolToComplex128)
}
func putWorkOfBoolToComplex128(d *WorkOfBoolToComplex128) {
	d.Value = zero_of_WorkOfBoolToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToComplex128.Put(d)
}

type _BoolToComplex128 struct{}

func (_ _BoolToComplex128) GetWork() *WorkOfBoolToComplex128 {
	return getWorkOfBoolToComplex128()
}
func (__ _BoolToComplex128) GetWorkWith(value bool, returnCh chan<- *ReturnOfComplex128) *WorkOfBoolToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToComplex128) PutWork(d *WorkOfBoolToComplex128) {
	putWorkOfBoolToComplex128(d)
}

func (_ _BoolToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _BoolToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _BoolToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _BoolToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _BoolToComplex128) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToComplex128) CallAsync(ctx context.Context, work *WorkOfBoolToComplex128, h func(ctx context.Context, arg bool) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToComplex64 interface {
	Push(ctx context.Context, work *WorkOfBoolToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfBoolToComplex64 struct {
	Value    bool
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfBoolToComplex64WithContext struct {
	Context context.Context
	WorkOfBoolToComplex64
}

var (
	zero_of_WorkOfBoolToComplex64       WorkOfBoolToComplex64
	zero_of_WorkOfBoolToComplex64_Value bool
	pool_of_WorkOfBoolToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToComplex64{}
		},
	}
)

func getWorkOfBoolToComplex64() *WorkOfBoolToComplex64 {
	return pool_of_WorkOfBoolToComplex64.Get().(*WorkOfBoolToComplex64)
}
func putWorkOfBoolToComplex64(d *WorkOfBoolToComplex64) {
	d.Value = zero_of_WorkOfBoolToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToComplex64.Put(d)
}

type _BoolToComplex64 struct{}

func (_ _BoolToComplex64) GetWork() *WorkOfBoolToComplex64 {
	return getWorkOfBoolToComplex64()
}
func (__ _BoolToComplex64) GetWorkWith(value bool, returnCh chan<- *ReturnOfComplex64) *WorkOfBoolToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToComplex64) PutWork(d *WorkOfBoolToComplex64) {
	putWorkOfBoolToComplex64(d)
}

func (_ _BoolToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _BoolToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _BoolToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _BoolToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _BoolToComplex64) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToComplex64) CallAsync(ctx context.Context, work *WorkOfBoolToComplex64, h func(ctx context.Context, arg bool) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToError interface {
	Push(ctx context.Context, work *WorkOfBoolToError, returnCh chan<- *ReturnOfError)
}

type WorkOfBoolToError struct {
	Value    bool
	ReturnCh chan<- *ReturnOfError
}

type WorkOfBoolToErrorWithContext struct {
	Context context.Context
	WorkOfBoolToError
}

var (
	zero_of_WorkOfBoolToError       WorkOfBoolToError
	zero_of_WorkOfBoolToError_Value bool
	pool_of_WorkOfBoolToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToError{}
		},
	}
)

func getWorkOfBoolToError() *WorkOfBoolToError {
	return pool_of_WorkOfBoolToError.Get().(*WorkOfBoolToError)
}
func putWorkOfBoolToError(d *WorkOfBoolToError) {
	d.Value = zero_of_WorkOfBoolToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToError.Put(d)
}

type _BoolToError struct{}

func (_ _BoolToError) GetWork() *WorkOfBoolToError {
	return getWorkOfBoolToError()
}
func (__ _BoolToError) GetWorkWith(value bool, returnCh chan<- *ReturnOfError) *WorkOfBoolToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToError) PutWork(d *WorkOfBoolToError) {
	putWorkOfBoolToError(d)
}

func (_ _BoolToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _BoolToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _BoolToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _BoolToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _BoolToError) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToError) CallAsync(ctx context.Context, work *WorkOfBoolToError, h func(ctx context.Context, arg bool) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToFloat32 interface {
	Push(ctx context.Context, work *WorkOfBoolToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfBoolToFloat32 struct {
	Value    bool
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfBoolToFloat32WithContext struct {
	Context context.Context
	WorkOfBoolToFloat32
}

var (
	zero_of_WorkOfBoolToFloat32       WorkOfBoolToFloat32
	zero_of_WorkOfBoolToFloat32_Value bool
	pool_of_WorkOfBoolToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToFloat32{}
		},
	}
)

func getWorkOfBoolToFloat32() *WorkOfBoolToFloat32 {
	return pool_of_WorkOfBoolToFloat32.Get().(*WorkOfBoolToFloat32)
}
func putWorkOfBoolToFloat32(d *WorkOfBoolToFloat32) {
	d.Value = zero_of_WorkOfBoolToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToFloat32.Put(d)
}

type _BoolToFloat32 struct{}

func (_ _BoolToFloat32) GetWork() *WorkOfBoolToFloat32 {
	return getWorkOfBoolToFloat32()
}
func (__ _BoolToFloat32) GetWorkWith(value bool, returnCh chan<- *ReturnOfFloat32) *WorkOfBoolToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToFloat32) PutWork(d *WorkOfBoolToFloat32) {
	putWorkOfBoolToFloat32(d)
}

func (_ _BoolToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _BoolToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _BoolToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _BoolToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _BoolToFloat32) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToFloat32) CallAsync(ctx context.Context, work *WorkOfBoolToFloat32, h func(ctx context.Context, arg bool) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToFloat64 interface {
	Push(ctx context.Context, work *WorkOfBoolToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfBoolToFloat64 struct {
	Value    bool
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfBoolToFloat64WithContext struct {
	Context context.Context
	WorkOfBoolToFloat64
}

var (
	zero_of_WorkOfBoolToFloat64       WorkOfBoolToFloat64
	zero_of_WorkOfBoolToFloat64_Value bool
	pool_of_WorkOfBoolToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToFloat64{}
		},
	}
)

func getWorkOfBoolToFloat64() *WorkOfBoolToFloat64 {
	return pool_of_WorkOfBoolToFloat64.Get().(*WorkOfBoolToFloat64)
}
func putWorkOfBoolToFloat64(d *WorkOfBoolToFloat64) {
	d.Value = zero_of_WorkOfBoolToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToFloat64.Put(d)
}

type _BoolToFloat64 struct{}

func (_ _BoolToFloat64) GetWork() *WorkOfBoolToFloat64 {
	return getWorkOfBoolToFloat64()
}
func (__ _BoolToFloat64) GetWorkWith(value bool, returnCh chan<- *ReturnOfFloat64) *WorkOfBoolToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToFloat64) PutWork(d *WorkOfBoolToFloat64) {
	putWorkOfBoolToFloat64(d)
}

func (_ _BoolToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _BoolToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _BoolToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _BoolToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _BoolToFloat64) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToFloat64) CallAsync(ctx context.Context, work *WorkOfBoolToFloat64, h func(ctx context.Context, arg bool) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToInt interface {
	Push(ctx context.Context, work *WorkOfBoolToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfBoolToInt struct {
	Value    bool
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfBoolToIntWithContext struct {
	Context context.Context
	WorkOfBoolToInt
}

var (
	zero_of_WorkOfBoolToInt       WorkOfBoolToInt
	zero_of_WorkOfBoolToInt_Value bool
	pool_of_WorkOfBoolToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToInt{}
		},
	}
)

func getWorkOfBoolToInt() *WorkOfBoolToInt {
	return pool_of_WorkOfBoolToInt.Get().(*WorkOfBoolToInt)
}
func putWorkOfBoolToInt(d *WorkOfBoolToInt) {
	d.Value = zero_of_WorkOfBoolToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToInt.Put(d)
}

type _BoolToInt struct{}

func (_ _BoolToInt) GetWork() *WorkOfBoolToInt {
	return getWorkOfBoolToInt()
}
func (__ _BoolToInt) GetWorkWith(value bool, returnCh chan<- *ReturnOfInt) *WorkOfBoolToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToInt) PutWork(d *WorkOfBoolToInt) {
	putWorkOfBoolToInt(d)
}

func (_ _BoolToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _BoolToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _BoolToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _BoolToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _BoolToInt) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToInt) CallAsync(ctx context.Context, work *WorkOfBoolToInt, h func(ctx context.Context, arg bool) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToInt16 interface {
	Push(ctx context.Context, work *WorkOfBoolToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfBoolToInt16 struct {
	Value    bool
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfBoolToInt16WithContext struct {
	Context context.Context
	WorkOfBoolToInt16
}

var (
	zero_of_WorkOfBoolToInt16       WorkOfBoolToInt16
	zero_of_WorkOfBoolToInt16_Value bool
	pool_of_WorkOfBoolToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToInt16{}
		},
	}
)

func getWorkOfBoolToInt16() *WorkOfBoolToInt16 {
	return pool_of_WorkOfBoolToInt16.Get().(*WorkOfBoolToInt16)
}
func putWorkOfBoolToInt16(d *WorkOfBoolToInt16) {
	d.Value = zero_of_WorkOfBoolToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToInt16.Put(d)
}

type _BoolToInt16 struct{}

func (_ _BoolToInt16) GetWork() *WorkOfBoolToInt16 {
	return getWorkOfBoolToInt16()
}
func (__ _BoolToInt16) GetWorkWith(value bool, returnCh chan<- *ReturnOfInt16) *WorkOfBoolToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToInt16) PutWork(d *WorkOfBoolToInt16) {
	putWorkOfBoolToInt16(d)
}

func (_ _BoolToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _BoolToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _BoolToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _BoolToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _BoolToInt16) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToInt16) CallAsync(ctx context.Context, work *WorkOfBoolToInt16, h func(ctx context.Context, arg bool) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToInt32 interface {
	Push(ctx context.Context, work *WorkOfBoolToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfBoolToInt32 struct {
	Value    bool
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfBoolToInt32WithContext struct {
	Context context.Context
	WorkOfBoolToInt32
}

var (
	zero_of_WorkOfBoolToInt32       WorkOfBoolToInt32
	zero_of_WorkOfBoolToInt32_Value bool
	pool_of_WorkOfBoolToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToInt32{}
		},
	}
)

func getWorkOfBoolToInt32() *WorkOfBoolToInt32 {
	return pool_of_WorkOfBoolToInt32.Get().(*WorkOfBoolToInt32)
}
func putWorkOfBoolToInt32(d *WorkOfBoolToInt32) {
	d.Value = zero_of_WorkOfBoolToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToInt32.Put(d)
}

type _BoolToInt32 struct{}

func (_ _BoolToInt32) GetWork() *WorkOfBoolToInt32 {
	return getWorkOfBoolToInt32()
}
func (__ _BoolToInt32) GetWorkWith(value bool, returnCh chan<- *ReturnOfInt32) *WorkOfBoolToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToInt32) PutWork(d *WorkOfBoolToInt32) {
	putWorkOfBoolToInt32(d)
}

func (_ _BoolToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _BoolToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _BoolToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _BoolToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _BoolToInt32) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToInt32) CallAsync(ctx context.Context, work *WorkOfBoolToInt32, h func(ctx context.Context, arg bool) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToInt64 interface {
	Push(ctx context.Context, work *WorkOfBoolToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfBoolToInt64 struct {
	Value    bool
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfBoolToInt64WithContext struct {
	Context context.Context
	WorkOfBoolToInt64
}

var (
	zero_of_WorkOfBoolToInt64       WorkOfBoolToInt64
	zero_of_WorkOfBoolToInt64_Value bool
	pool_of_WorkOfBoolToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToInt64{}
		},
	}
)

func getWorkOfBoolToInt64() *WorkOfBoolToInt64 {
	return pool_of_WorkOfBoolToInt64.Get().(*WorkOfBoolToInt64)
}
func putWorkOfBoolToInt64(d *WorkOfBoolToInt64) {
	d.Value = zero_of_WorkOfBoolToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToInt64.Put(d)
}

type _BoolToInt64 struct{}

func (_ _BoolToInt64) GetWork() *WorkOfBoolToInt64 {
	return getWorkOfBoolToInt64()
}
func (__ _BoolToInt64) GetWorkWith(value bool, returnCh chan<- *ReturnOfInt64) *WorkOfBoolToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToInt64) PutWork(d *WorkOfBoolToInt64) {
	putWorkOfBoolToInt64(d)
}

func (_ _BoolToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _BoolToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _BoolToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _BoolToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _BoolToInt64) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToInt64) CallAsync(ctx context.Context, work *WorkOfBoolToInt64, h func(ctx context.Context, arg bool) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToInt8 interface {
	Push(ctx context.Context, work *WorkOfBoolToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfBoolToInt8 struct {
	Value    bool
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfBoolToInt8WithContext struct {
	Context context.Context
	WorkOfBoolToInt8
}

var (
	zero_of_WorkOfBoolToInt8       WorkOfBoolToInt8
	zero_of_WorkOfBoolToInt8_Value bool
	pool_of_WorkOfBoolToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToInt8{}
		},
	}
)

func getWorkOfBoolToInt8() *WorkOfBoolToInt8 {
	return pool_of_WorkOfBoolToInt8.Get().(*WorkOfBoolToInt8)
}
func putWorkOfBoolToInt8(d *WorkOfBoolToInt8) {
	d.Value = zero_of_WorkOfBoolToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToInt8.Put(d)
}

type _BoolToInt8 struct{}

func (_ _BoolToInt8) GetWork() *WorkOfBoolToInt8 {
	return getWorkOfBoolToInt8()
}
func (__ _BoolToInt8) GetWorkWith(value bool, returnCh chan<- *ReturnOfInt8) *WorkOfBoolToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToInt8) PutWork(d *WorkOfBoolToInt8) {
	putWorkOfBoolToInt8(d)
}

func (_ _BoolToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _BoolToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _BoolToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _BoolToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _BoolToInt8) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToInt8) CallAsync(ctx context.Context, work *WorkOfBoolToInt8, h func(ctx context.Context, arg bool) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToRune interface {
	Push(ctx context.Context, work *WorkOfBoolToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfBoolToRune struct {
	Value    bool
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfBoolToRuneWithContext struct {
	Context context.Context
	WorkOfBoolToRune
}

var (
	zero_of_WorkOfBoolToRune       WorkOfBoolToRune
	zero_of_WorkOfBoolToRune_Value bool
	pool_of_WorkOfBoolToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToRune{}
		},
	}
)

func getWorkOfBoolToRune() *WorkOfBoolToRune {
	return pool_of_WorkOfBoolToRune.Get().(*WorkOfBoolToRune)
}
func putWorkOfBoolToRune(d *WorkOfBoolToRune) {
	d.Value = zero_of_WorkOfBoolToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToRune.Put(d)
}

type _BoolToRune struct{}

func (_ _BoolToRune) GetWork() *WorkOfBoolToRune {
	return getWorkOfBoolToRune()
}
func (__ _BoolToRune) GetWorkWith(value bool, returnCh chan<- *ReturnOfRune) *WorkOfBoolToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToRune) PutWork(d *WorkOfBoolToRune) {
	putWorkOfBoolToRune(d)
}

func (_ _BoolToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _BoolToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _BoolToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _BoolToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _BoolToRune) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToRune) CallAsync(ctx context.Context, work *WorkOfBoolToRune, h func(ctx context.Context, arg bool) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToString interface {
	Push(ctx context.Context, work *WorkOfBoolToString, returnCh chan<- *ReturnOfString)
}

type WorkOfBoolToString struct {
	Value    bool
	ReturnCh chan<- *ReturnOfString
}

type WorkOfBoolToStringWithContext struct {
	Context context.Context
	WorkOfBoolToString
}

var (
	zero_of_WorkOfBoolToString       WorkOfBoolToString
	zero_of_WorkOfBoolToString_Value bool
	pool_of_WorkOfBoolToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToString{}
		},
	}
)

func getWorkOfBoolToString() *WorkOfBoolToString {
	return pool_of_WorkOfBoolToString.Get().(*WorkOfBoolToString)
}
func putWorkOfBoolToString(d *WorkOfBoolToString) {
	d.Value = zero_of_WorkOfBoolToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToString.Put(d)
}

type _BoolToString struct{}

func (_ _BoolToString) GetWork() *WorkOfBoolToString {
	return getWorkOfBoolToString()
}
func (__ _BoolToString) GetWorkWith(value bool, returnCh chan<- *ReturnOfString) *WorkOfBoolToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToString) PutWork(d *WorkOfBoolToString) {
	putWorkOfBoolToString(d)
}

func (_ _BoolToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _BoolToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _BoolToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _BoolToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _BoolToString) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToString) CallAsync(ctx context.Context, work *WorkOfBoolToString, h func(ctx context.Context, arg bool) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToUint interface {
	Push(ctx context.Context, work *WorkOfBoolToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfBoolToUint struct {
	Value    bool
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfBoolToUintWithContext struct {
	Context context.Context
	WorkOfBoolToUint
}

var (
	zero_of_WorkOfBoolToUint       WorkOfBoolToUint
	zero_of_WorkOfBoolToUint_Value bool
	pool_of_WorkOfBoolToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToUint{}
		},
	}
)

func getWorkOfBoolToUint() *WorkOfBoolToUint {
	return pool_of_WorkOfBoolToUint.Get().(*WorkOfBoolToUint)
}
func putWorkOfBoolToUint(d *WorkOfBoolToUint) {
	d.Value = zero_of_WorkOfBoolToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToUint.Put(d)
}

type _BoolToUint struct{}

func (_ _BoolToUint) GetWork() *WorkOfBoolToUint {
	return getWorkOfBoolToUint()
}
func (__ _BoolToUint) GetWorkWith(value bool, returnCh chan<- *ReturnOfUint) *WorkOfBoolToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToUint) PutWork(d *WorkOfBoolToUint) {
	putWorkOfBoolToUint(d)
}

func (_ _BoolToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _BoolToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _BoolToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _BoolToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _BoolToUint) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToUint) CallAsync(ctx context.Context, work *WorkOfBoolToUint, h func(ctx context.Context, arg bool) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToUint16 interface {
	Push(ctx context.Context, work *WorkOfBoolToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfBoolToUint16 struct {
	Value    bool
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfBoolToUint16WithContext struct {
	Context context.Context
	WorkOfBoolToUint16
}

var (
	zero_of_WorkOfBoolToUint16       WorkOfBoolToUint16
	zero_of_WorkOfBoolToUint16_Value bool
	pool_of_WorkOfBoolToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToUint16{}
		},
	}
)

func getWorkOfBoolToUint16() *WorkOfBoolToUint16 {
	return pool_of_WorkOfBoolToUint16.Get().(*WorkOfBoolToUint16)
}
func putWorkOfBoolToUint16(d *WorkOfBoolToUint16) {
	d.Value = zero_of_WorkOfBoolToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToUint16.Put(d)
}

type _BoolToUint16 struct{}

func (_ _BoolToUint16) GetWork() *WorkOfBoolToUint16 {
	return getWorkOfBoolToUint16()
}
func (__ _BoolToUint16) GetWorkWith(value bool, returnCh chan<- *ReturnOfUint16) *WorkOfBoolToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToUint16) PutWork(d *WorkOfBoolToUint16) {
	putWorkOfBoolToUint16(d)
}

func (_ _BoolToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _BoolToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _BoolToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _BoolToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _BoolToUint16) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToUint16) CallAsync(ctx context.Context, work *WorkOfBoolToUint16, h func(ctx context.Context, arg bool) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToUint32 interface {
	Push(ctx context.Context, work *WorkOfBoolToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfBoolToUint32 struct {
	Value    bool
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfBoolToUint32WithContext struct {
	Context context.Context
	WorkOfBoolToUint32
}

var (
	zero_of_WorkOfBoolToUint32       WorkOfBoolToUint32
	zero_of_WorkOfBoolToUint32_Value bool
	pool_of_WorkOfBoolToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToUint32{}
		},
	}
)

func getWorkOfBoolToUint32() *WorkOfBoolToUint32 {
	return pool_of_WorkOfBoolToUint32.Get().(*WorkOfBoolToUint32)
}
func putWorkOfBoolToUint32(d *WorkOfBoolToUint32) {
	d.Value = zero_of_WorkOfBoolToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToUint32.Put(d)
}

type _BoolToUint32 struct{}

func (_ _BoolToUint32) GetWork() *WorkOfBoolToUint32 {
	return getWorkOfBoolToUint32()
}
func (__ _BoolToUint32) GetWorkWith(value bool, returnCh chan<- *ReturnOfUint32) *WorkOfBoolToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToUint32) PutWork(d *WorkOfBoolToUint32) {
	putWorkOfBoolToUint32(d)
}

func (_ _BoolToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _BoolToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _BoolToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _BoolToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _BoolToUint32) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToUint32) CallAsync(ctx context.Context, work *WorkOfBoolToUint32, h func(ctx context.Context, arg bool) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToUint64 interface {
	Push(ctx context.Context, work *WorkOfBoolToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfBoolToUint64 struct {
	Value    bool
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfBoolToUint64WithContext struct {
	Context context.Context
	WorkOfBoolToUint64
}

var (
	zero_of_WorkOfBoolToUint64       WorkOfBoolToUint64
	zero_of_WorkOfBoolToUint64_Value bool
	pool_of_WorkOfBoolToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToUint64{}
		},
	}
)

func getWorkOfBoolToUint64() *WorkOfBoolToUint64 {
	return pool_of_WorkOfBoolToUint64.Get().(*WorkOfBoolToUint64)
}
func putWorkOfBoolToUint64(d *WorkOfBoolToUint64) {
	d.Value = zero_of_WorkOfBoolToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToUint64.Put(d)
}

type _BoolToUint64 struct{}

func (_ _BoolToUint64) GetWork() *WorkOfBoolToUint64 {
	return getWorkOfBoolToUint64()
}
func (__ _BoolToUint64) GetWorkWith(value bool, returnCh chan<- *ReturnOfUint64) *WorkOfBoolToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToUint64) PutWork(d *WorkOfBoolToUint64) {
	putWorkOfBoolToUint64(d)
}

func (_ _BoolToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _BoolToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _BoolToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _BoolToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _BoolToUint64) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToUint64) CallAsync(ctx context.Context, work *WorkOfBoolToUint64, h func(ctx context.Context, arg bool) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToUint8 interface {
	Push(ctx context.Context, work *WorkOfBoolToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfBoolToUint8 struct {
	Value    bool
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfBoolToUint8WithContext struct {
	Context context.Context
	WorkOfBoolToUint8
}

var (
	zero_of_WorkOfBoolToUint8       WorkOfBoolToUint8
	zero_of_WorkOfBoolToUint8_Value bool
	pool_of_WorkOfBoolToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToUint8{}
		},
	}
)

func getWorkOfBoolToUint8() *WorkOfBoolToUint8 {
	return pool_of_WorkOfBoolToUint8.Get().(*WorkOfBoolToUint8)
}
func putWorkOfBoolToUint8(d *WorkOfBoolToUint8) {
	d.Value = zero_of_WorkOfBoolToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToUint8.Put(d)
}

type _BoolToUint8 struct{}

func (_ _BoolToUint8) GetWork() *WorkOfBoolToUint8 {
	return getWorkOfBoolToUint8()
}
func (__ _BoolToUint8) GetWorkWith(value bool, returnCh chan<- *ReturnOfUint8) *WorkOfBoolToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToUint8) PutWork(d *WorkOfBoolToUint8) {
	putWorkOfBoolToUint8(d)
}

func (_ _BoolToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _BoolToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _BoolToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _BoolToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _BoolToUint8) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToUint8) CallAsync(ctx context.Context, work *WorkOfBoolToUint8, h func(ctx context.Context, arg bool) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToUintptr interface {
	Push(ctx context.Context, work *WorkOfBoolToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfBoolToUintptr struct {
	Value    bool
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfBoolToUintptrWithContext struct {
	Context context.Context
	WorkOfBoolToUintptr
}

var (
	zero_of_WorkOfBoolToUintptr       WorkOfBoolToUintptr
	zero_of_WorkOfBoolToUintptr_Value bool
	pool_of_WorkOfBoolToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToUintptr{}
		},
	}
)

func getWorkOfBoolToUintptr() *WorkOfBoolToUintptr {
	return pool_of_WorkOfBoolToUintptr.Get().(*WorkOfBoolToUintptr)
}
func putWorkOfBoolToUintptr(d *WorkOfBoolToUintptr) {
	d.Value = zero_of_WorkOfBoolToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToUintptr.Put(d)
}

type _BoolToUintptr struct{}

func (_ _BoolToUintptr) GetWork() *WorkOfBoolToUintptr {
	return getWorkOfBoolToUintptr()
}
func (__ _BoolToUintptr) GetWorkWith(value bool, returnCh chan<- *ReturnOfUintptr) *WorkOfBoolToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToUintptr) PutWork(d *WorkOfBoolToUintptr) {
	putWorkOfBoolToUintptr(d)
}

func (_ _BoolToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _BoolToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _BoolToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _BoolToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _BoolToUintptr) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToUintptr) CallAsync(ctx context.Context, work *WorkOfBoolToUintptr, h func(ctx context.Context, arg bool) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToBytes interface {
	Push(ctx context.Context, work *WorkOfBoolToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfBoolToBytes struct {
	Value    bool
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfBoolToBytesWithContext struct {
	Context context.Context
	WorkOfBoolToBytes
}

var (
	zero_of_WorkOfBoolToBytes       WorkOfBoolToBytes
	zero_of_WorkOfBoolToBytes_Value bool
	pool_of_WorkOfBoolToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToBytes{}
		},
	}
)

func getWorkOfBoolToBytes() *WorkOfBoolToBytes {
	return pool_of_WorkOfBoolToBytes.Get().(*WorkOfBoolToBytes)
}
func putWorkOfBoolToBytes(d *WorkOfBoolToBytes) {
	d.Value = zero_of_WorkOfBoolToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToBytes.Put(d)
}

type _BoolToBytes struct{}

func (_ _BoolToBytes) GetWork() *WorkOfBoolToBytes {
	return getWorkOfBoolToBytes()
}
func (__ _BoolToBytes) GetWorkWith(value bool, returnCh chan<- *ReturnOfBytes) *WorkOfBoolToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToBytes) PutWork(d *WorkOfBoolToBytes) {
	putWorkOfBoolToBytes(d)
}

func (_ _BoolToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _BoolToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _BoolToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _BoolToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _BoolToBytes) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToBytes) CallAsync(ctx context.Context, work *WorkOfBoolToBytes, h func(ctx context.Context, arg bool) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBoolToInterface interface {
	Push(ctx context.Context, work *WorkOfBoolToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfBoolToInterface struct {
	Value    bool
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfBoolToInterfaceWithContext struct {
	Context context.Context
	WorkOfBoolToInterface
}

var (
	zero_of_WorkOfBoolToInterface       WorkOfBoolToInterface
	zero_of_WorkOfBoolToInterface_Value bool
	pool_of_WorkOfBoolToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBoolToInterface{}
		},
	}
)

func getWorkOfBoolToInterface() *WorkOfBoolToInterface {
	return pool_of_WorkOfBoolToInterface.Get().(*WorkOfBoolToInterface)
}
func putWorkOfBoolToInterface(d *WorkOfBoolToInterface) {
	d.Value = zero_of_WorkOfBoolToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfBoolToInterface.Put(d)
}

type _BoolToInterface struct{}

func (_ _BoolToInterface) GetWork() *WorkOfBoolToInterface {
	return getWorkOfBoolToInterface()
}
func (__ _BoolToInterface) GetWorkWith(value bool, returnCh chan<- *ReturnOfInterface) *WorkOfBoolToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BoolToInterface) PutWork(d *WorkOfBoolToInterface) {
	putWorkOfBoolToInterface(d)
}

func (_ _BoolToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _BoolToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BoolToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _BoolToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _BoolToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _BoolToInterface) CallSync(ctx context.Context, value bool, push func(ctx context.Context, work *WorkOfBoolToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BoolToInterface) CallAsync(ctx context.Context, work *WorkOfBoolToInterface, h func(ctx context.Context, arg bool) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToBool interface {
	Push(ctx context.Context, work *WorkOfByteToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfByteToBool struct {
	Value    byte
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfByteToBoolWithContext struct {
	Context context.Context
	WorkOfByteToBool
}

var (
	zero_of_WorkOfByteToBool       WorkOfByteToBool
	zero_of_WorkOfByteToBool_Value byte
	pool_of_WorkOfByteToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToBool{}
		},
	}
)

func getWorkOfByteToBool() *WorkOfByteToBool {
	return pool_of_WorkOfByteToBool.Get().(*WorkOfByteToBool)
}
func putWorkOfByteToBool(d *WorkOfByteToBool) {
	d.Value = zero_of_WorkOfByteToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToBool.Put(d)
}

type _ByteToBool struct{}

func (_ _ByteToBool) GetWork() *WorkOfByteToBool {
	return getWorkOfByteToBool()
}
func (__ _ByteToBool) GetWorkWith(value byte, returnCh chan<- *ReturnOfBool) *WorkOfByteToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToBool) PutWork(d *WorkOfByteToBool) {
	putWorkOfByteToBool(d)
}

func (_ _ByteToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _ByteToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _ByteToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _ByteToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _ByteToBool) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToBool) CallAsync(ctx context.Context, work *WorkOfByteToBool, h func(ctx context.Context, arg byte) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToByte interface {
	Push(ctx context.Context, work *WorkOfByteToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfByteToByte struct {
	Value    byte
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfByteToByteWithContext struct {
	Context context.Context
	WorkOfByteToByte
}

var (
	zero_of_WorkOfByteToByte       WorkOfByteToByte
	zero_of_WorkOfByteToByte_Value byte
	pool_of_WorkOfByteToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToByte{}
		},
	}
)

func getWorkOfByteToByte() *WorkOfByteToByte {
	return pool_of_WorkOfByteToByte.Get().(*WorkOfByteToByte)
}
func putWorkOfByteToByte(d *WorkOfByteToByte) {
	d.Value = zero_of_WorkOfByteToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToByte.Put(d)
}

type _ByteToByte struct{}

func (_ _ByteToByte) GetWork() *WorkOfByteToByte {
	return getWorkOfByteToByte()
}
func (__ _ByteToByte) GetWorkWith(value byte, returnCh chan<- *ReturnOfByte) *WorkOfByteToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToByte) PutWork(d *WorkOfByteToByte) {
	putWorkOfByteToByte(d)
}

func (_ _ByteToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _ByteToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _ByteToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _ByteToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _ByteToByte) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToByte) CallAsync(ctx context.Context, work *WorkOfByteToByte, h func(ctx context.Context, arg byte) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToComplex128 interface {
	Push(ctx context.Context, work *WorkOfByteToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfByteToComplex128 struct {
	Value    byte
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfByteToComplex128WithContext struct {
	Context context.Context
	WorkOfByteToComplex128
}

var (
	zero_of_WorkOfByteToComplex128       WorkOfByteToComplex128
	zero_of_WorkOfByteToComplex128_Value byte
	pool_of_WorkOfByteToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToComplex128{}
		},
	}
)

func getWorkOfByteToComplex128() *WorkOfByteToComplex128 {
	return pool_of_WorkOfByteToComplex128.Get().(*WorkOfByteToComplex128)
}
func putWorkOfByteToComplex128(d *WorkOfByteToComplex128) {
	d.Value = zero_of_WorkOfByteToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToComplex128.Put(d)
}

type _ByteToComplex128 struct{}

func (_ _ByteToComplex128) GetWork() *WorkOfByteToComplex128 {
	return getWorkOfByteToComplex128()
}
func (__ _ByteToComplex128) GetWorkWith(value byte, returnCh chan<- *ReturnOfComplex128) *WorkOfByteToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToComplex128) PutWork(d *WorkOfByteToComplex128) {
	putWorkOfByteToComplex128(d)
}

func (_ _ByteToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _ByteToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _ByteToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _ByteToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _ByteToComplex128) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToComplex128) CallAsync(ctx context.Context, work *WorkOfByteToComplex128, h func(ctx context.Context, arg byte) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToComplex64 interface {
	Push(ctx context.Context, work *WorkOfByteToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfByteToComplex64 struct {
	Value    byte
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfByteToComplex64WithContext struct {
	Context context.Context
	WorkOfByteToComplex64
}

var (
	zero_of_WorkOfByteToComplex64       WorkOfByteToComplex64
	zero_of_WorkOfByteToComplex64_Value byte
	pool_of_WorkOfByteToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToComplex64{}
		},
	}
)

func getWorkOfByteToComplex64() *WorkOfByteToComplex64 {
	return pool_of_WorkOfByteToComplex64.Get().(*WorkOfByteToComplex64)
}
func putWorkOfByteToComplex64(d *WorkOfByteToComplex64) {
	d.Value = zero_of_WorkOfByteToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToComplex64.Put(d)
}

type _ByteToComplex64 struct{}

func (_ _ByteToComplex64) GetWork() *WorkOfByteToComplex64 {
	return getWorkOfByteToComplex64()
}
func (__ _ByteToComplex64) GetWorkWith(value byte, returnCh chan<- *ReturnOfComplex64) *WorkOfByteToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToComplex64) PutWork(d *WorkOfByteToComplex64) {
	putWorkOfByteToComplex64(d)
}

func (_ _ByteToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _ByteToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _ByteToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _ByteToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _ByteToComplex64) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToComplex64) CallAsync(ctx context.Context, work *WorkOfByteToComplex64, h func(ctx context.Context, arg byte) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToError interface {
	Push(ctx context.Context, work *WorkOfByteToError, returnCh chan<- *ReturnOfError)
}

type WorkOfByteToError struct {
	Value    byte
	ReturnCh chan<- *ReturnOfError
}

type WorkOfByteToErrorWithContext struct {
	Context context.Context
	WorkOfByteToError
}

var (
	zero_of_WorkOfByteToError       WorkOfByteToError
	zero_of_WorkOfByteToError_Value byte
	pool_of_WorkOfByteToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToError{}
		},
	}
)

func getWorkOfByteToError() *WorkOfByteToError {
	return pool_of_WorkOfByteToError.Get().(*WorkOfByteToError)
}
func putWorkOfByteToError(d *WorkOfByteToError) {
	d.Value = zero_of_WorkOfByteToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToError.Put(d)
}

type _ByteToError struct{}

func (_ _ByteToError) GetWork() *WorkOfByteToError {
	return getWorkOfByteToError()
}
func (__ _ByteToError) GetWorkWith(value byte, returnCh chan<- *ReturnOfError) *WorkOfByteToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToError) PutWork(d *WorkOfByteToError) {
	putWorkOfByteToError(d)
}

func (_ _ByteToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _ByteToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _ByteToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _ByteToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _ByteToError) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToError) CallAsync(ctx context.Context, work *WorkOfByteToError, h func(ctx context.Context, arg byte) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToFloat32 interface {
	Push(ctx context.Context, work *WorkOfByteToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfByteToFloat32 struct {
	Value    byte
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfByteToFloat32WithContext struct {
	Context context.Context
	WorkOfByteToFloat32
}

var (
	zero_of_WorkOfByteToFloat32       WorkOfByteToFloat32
	zero_of_WorkOfByteToFloat32_Value byte
	pool_of_WorkOfByteToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToFloat32{}
		},
	}
)

func getWorkOfByteToFloat32() *WorkOfByteToFloat32 {
	return pool_of_WorkOfByteToFloat32.Get().(*WorkOfByteToFloat32)
}
func putWorkOfByteToFloat32(d *WorkOfByteToFloat32) {
	d.Value = zero_of_WorkOfByteToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToFloat32.Put(d)
}

type _ByteToFloat32 struct{}

func (_ _ByteToFloat32) GetWork() *WorkOfByteToFloat32 {
	return getWorkOfByteToFloat32()
}
func (__ _ByteToFloat32) GetWorkWith(value byte, returnCh chan<- *ReturnOfFloat32) *WorkOfByteToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToFloat32) PutWork(d *WorkOfByteToFloat32) {
	putWorkOfByteToFloat32(d)
}

func (_ _ByteToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _ByteToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _ByteToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _ByteToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _ByteToFloat32) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToFloat32) CallAsync(ctx context.Context, work *WorkOfByteToFloat32, h func(ctx context.Context, arg byte) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToFloat64 interface {
	Push(ctx context.Context, work *WorkOfByteToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfByteToFloat64 struct {
	Value    byte
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfByteToFloat64WithContext struct {
	Context context.Context
	WorkOfByteToFloat64
}

var (
	zero_of_WorkOfByteToFloat64       WorkOfByteToFloat64
	zero_of_WorkOfByteToFloat64_Value byte
	pool_of_WorkOfByteToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToFloat64{}
		},
	}
)

func getWorkOfByteToFloat64() *WorkOfByteToFloat64 {
	return pool_of_WorkOfByteToFloat64.Get().(*WorkOfByteToFloat64)
}
func putWorkOfByteToFloat64(d *WorkOfByteToFloat64) {
	d.Value = zero_of_WorkOfByteToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToFloat64.Put(d)
}

type _ByteToFloat64 struct{}

func (_ _ByteToFloat64) GetWork() *WorkOfByteToFloat64 {
	return getWorkOfByteToFloat64()
}
func (__ _ByteToFloat64) GetWorkWith(value byte, returnCh chan<- *ReturnOfFloat64) *WorkOfByteToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToFloat64) PutWork(d *WorkOfByteToFloat64) {
	putWorkOfByteToFloat64(d)
}

func (_ _ByteToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _ByteToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _ByteToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _ByteToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _ByteToFloat64) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToFloat64) CallAsync(ctx context.Context, work *WorkOfByteToFloat64, h func(ctx context.Context, arg byte) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToInt interface {
	Push(ctx context.Context, work *WorkOfByteToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfByteToInt struct {
	Value    byte
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfByteToIntWithContext struct {
	Context context.Context
	WorkOfByteToInt
}

var (
	zero_of_WorkOfByteToInt       WorkOfByteToInt
	zero_of_WorkOfByteToInt_Value byte
	pool_of_WorkOfByteToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToInt{}
		},
	}
)

func getWorkOfByteToInt() *WorkOfByteToInt {
	return pool_of_WorkOfByteToInt.Get().(*WorkOfByteToInt)
}
func putWorkOfByteToInt(d *WorkOfByteToInt) {
	d.Value = zero_of_WorkOfByteToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToInt.Put(d)
}

type _ByteToInt struct{}

func (_ _ByteToInt) GetWork() *WorkOfByteToInt {
	return getWorkOfByteToInt()
}
func (__ _ByteToInt) GetWorkWith(value byte, returnCh chan<- *ReturnOfInt) *WorkOfByteToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToInt) PutWork(d *WorkOfByteToInt) {
	putWorkOfByteToInt(d)
}

func (_ _ByteToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _ByteToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _ByteToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _ByteToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _ByteToInt) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToInt) CallAsync(ctx context.Context, work *WorkOfByteToInt, h func(ctx context.Context, arg byte) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToInt16 interface {
	Push(ctx context.Context, work *WorkOfByteToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfByteToInt16 struct {
	Value    byte
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfByteToInt16WithContext struct {
	Context context.Context
	WorkOfByteToInt16
}

var (
	zero_of_WorkOfByteToInt16       WorkOfByteToInt16
	zero_of_WorkOfByteToInt16_Value byte
	pool_of_WorkOfByteToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToInt16{}
		},
	}
)

func getWorkOfByteToInt16() *WorkOfByteToInt16 {
	return pool_of_WorkOfByteToInt16.Get().(*WorkOfByteToInt16)
}
func putWorkOfByteToInt16(d *WorkOfByteToInt16) {
	d.Value = zero_of_WorkOfByteToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToInt16.Put(d)
}

type _ByteToInt16 struct{}

func (_ _ByteToInt16) GetWork() *WorkOfByteToInt16 {
	return getWorkOfByteToInt16()
}
func (__ _ByteToInt16) GetWorkWith(value byte, returnCh chan<- *ReturnOfInt16) *WorkOfByteToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToInt16) PutWork(d *WorkOfByteToInt16) {
	putWorkOfByteToInt16(d)
}

func (_ _ByteToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _ByteToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _ByteToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _ByteToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _ByteToInt16) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToInt16) CallAsync(ctx context.Context, work *WorkOfByteToInt16, h func(ctx context.Context, arg byte) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToInt32 interface {
	Push(ctx context.Context, work *WorkOfByteToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfByteToInt32 struct {
	Value    byte
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfByteToInt32WithContext struct {
	Context context.Context
	WorkOfByteToInt32
}

var (
	zero_of_WorkOfByteToInt32       WorkOfByteToInt32
	zero_of_WorkOfByteToInt32_Value byte
	pool_of_WorkOfByteToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToInt32{}
		},
	}
)

func getWorkOfByteToInt32() *WorkOfByteToInt32 {
	return pool_of_WorkOfByteToInt32.Get().(*WorkOfByteToInt32)
}
func putWorkOfByteToInt32(d *WorkOfByteToInt32) {
	d.Value = zero_of_WorkOfByteToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToInt32.Put(d)
}

type _ByteToInt32 struct{}

func (_ _ByteToInt32) GetWork() *WorkOfByteToInt32 {
	return getWorkOfByteToInt32()
}
func (__ _ByteToInt32) GetWorkWith(value byte, returnCh chan<- *ReturnOfInt32) *WorkOfByteToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToInt32) PutWork(d *WorkOfByteToInt32) {
	putWorkOfByteToInt32(d)
}

func (_ _ByteToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _ByteToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _ByteToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _ByteToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _ByteToInt32) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToInt32) CallAsync(ctx context.Context, work *WorkOfByteToInt32, h func(ctx context.Context, arg byte) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToInt64 interface {
	Push(ctx context.Context, work *WorkOfByteToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfByteToInt64 struct {
	Value    byte
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfByteToInt64WithContext struct {
	Context context.Context
	WorkOfByteToInt64
}

var (
	zero_of_WorkOfByteToInt64       WorkOfByteToInt64
	zero_of_WorkOfByteToInt64_Value byte
	pool_of_WorkOfByteToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToInt64{}
		},
	}
)

func getWorkOfByteToInt64() *WorkOfByteToInt64 {
	return pool_of_WorkOfByteToInt64.Get().(*WorkOfByteToInt64)
}
func putWorkOfByteToInt64(d *WorkOfByteToInt64) {
	d.Value = zero_of_WorkOfByteToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToInt64.Put(d)
}

type _ByteToInt64 struct{}

func (_ _ByteToInt64) GetWork() *WorkOfByteToInt64 {
	return getWorkOfByteToInt64()
}
func (__ _ByteToInt64) GetWorkWith(value byte, returnCh chan<- *ReturnOfInt64) *WorkOfByteToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToInt64) PutWork(d *WorkOfByteToInt64) {
	putWorkOfByteToInt64(d)
}

func (_ _ByteToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _ByteToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _ByteToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _ByteToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _ByteToInt64) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToInt64) CallAsync(ctx context.Context, work *WorkOfByteToInt64, h func(ctx context.Context, arg byte) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToInt8 interface {
	Push(ctx context.Context, work *WorkOfByteToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfByteToInt8 struct {
	Value    byte
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfByteToInt8WithContext struct {
	Context context.Context
	WorkOfByteToInt8
}

var (
	zero_of_WorkOfByteToInt8       WorkOfByteToInt8
	zero_of_WorkOfByteToInt8_Value byte
	pool_of_WorkOfByteToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToInt8{}
		},
	}
)

func getWorkOfByteToInt8() *WorkOfByteToInt8 {
	return pool_of_WorkOfByteToInt8.Get().(*WorkOfByteToInt8)
}
func putWorkOfByteToInt8(d *WorkOfByteToInt8) {
	d.Value = zero_of_WorkOfByteToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToInt8.Put(d)
}

type _ByteToInt8 struct{}

func (_ _ByteToInt8) GetWork() *WorkOfByteToInt8 {
	return getWorkOfByteToInt8()
}
func (__ _ByteToInt8) GetWorkWith(value byte, returnCh chan<- *ReturnOfInt8) *WorkOfByteToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToInt8) PutWork(d *WorkOfByteToInt8) {
	putWorkOfByteToInt8(d)
}

func (_ _ByteToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _ByteToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _ByteToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _ByteToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _ByteToInt8) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToInt8) CallAsync(ctx context.Context, work *WorkOfByteToInt8, h func(ctx context.Context, arg byte) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToRune interface {
	Push(ctx context.Context, work *WorkOfByteToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfByteToRune struct {
	Value    byte
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfByteToRuneWithContext struct {
	Context context.Context
	WorkOfByteToRune
}

var (
	zero_of_WorkOfByteToRune       WorkOfByteToRune
	zero_of_WorkOfByteToRune_Value byte
	pool_of_WorkOfByteToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToRune{}
		},
	}
)

func getWorkOfByteToRune() *WorkOfByteToRune {
	return pool_of_WorkOfByteToRune.Get().(*WorkOfByteToRune)
}
func putWorkOfByteToRune(d *WorkOfByteToRune) {
	d.Value = zero_of_WorkOfByteToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToRune.Put(d)
}

type _ByteToRune struct{}

func (_ _ByteToRune) GetWork() *WorkOfByteToRune {
	return getWorkOfByteToRune()
}
func (__ _ByteToRune) GetWorkWith(value byte, returnCh chan<- *ReturnOfRune) *WorkOfByteToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToRune) PutWork(d *WorkOfByteToRune) {
	putWorkOfByteToRune(d)
}

func (_ _ByteToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _ByteToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _ByteToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _ByteToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _ByteToRune) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToRune) CallAsync(ctx context.Context, work *WorkOfByteToRune, h func(ctx context.Context, arg byte) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToString interface {
	Push(ctx context.Context, work *WorkOfByteToString, returnCh chan<- *ReturnOfString)
}

type WorkOfByteToString struct {
	Value    byte
	ReturnCh chan<- *ReturnOfString
}

type WorkOfByteToStringWithContext struct {
	Context context.Context
	WorkOfByteToString
}

var (
	zero_of_WorkOfByteToString       WorkOfByteToString
	zero_of_WorkOfByteToString_Value byte
	pool_of_WorkOfByteToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToString{}
		},
	}
)

func getWorkOfByteToString() *WorkOfByteToString {
	return pool_of_WorkOfByteToString.Get().(*WorkOfByteToString)
}
func putWorkOfByteToString(d *WorkOfByteToString) {
	d.Value = zero_of_WorkOfByteToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToString.Put(d)
}

type _ByteToString struct{}

func (_ _ByteToString) GetWork() *WorkOfByteToString {
	return getWorkOfByteToString()
}
func (__ _ByteToString) GetWorkWith(value byte, returnCh chan<- *ReturnOfString) *WorkOfByteToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToString) PutWork(d *WorkOfByteToString) {
	putWorkOfByteToString(d)
}

func (_ _ByteToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _ByteToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _ByteToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _ByteToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _ByteToString) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToString) CallAsync(ctx context.Context, work *WorkOfByteToString, h func(ctx context.Context, arg byte) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToUint interface {
	Push(ctx context.Context, work *WorkOfByteToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfByteToUint struct {
	Value    byte
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfByteToUintWithContext struct {
	Context context.Context
	WorkOfByteToUint
}

var (
	zero_of_WorkOfByteToUint       WorkOfByteToUint
	zero_of_WorkOfByteToUint_Value byte
	pool_of_WorkOfByteToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToUint{}
		},
	}
)

func getWorkOfByteToUint() *WorkOfByteToUint {
	return pool_of_WorkOfByteToUint.Get().(*WorkOfByteToUint)
}
func putWorkOfByteToUint(d *WorkOfByteToUint) {
	d.Value = zero_of_WorkOfByteToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToUint.Put(d)
}

type _ByteToUint struct{}

func (_ _ByteToUint) GetWork() *WorkOfByteToUint {
	return getWorkOfByteToUint()
}
func (__ _ByteToUint) GetWorkWith(value byte, returnCh chan<- *ReturnOfUint) *WorkOfByteToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToUint) PutWork(d *WorkOfByteToUint) {
	putWorkOfByteToUint(d)
}

func (_ _ByteToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _ByteToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _ByteToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _ByteToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _ByteToUint) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToUint) CallAsync(ctx context.Context, work *WorkOfByteToUint, h func(ctx context.Context, arg byte) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToUint16 interface {
	Push(ctx context.Context, work *WorkOfByteToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfByteToUint16 struct {
	Value    byte
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfByteToUint16WithContext struct {
	Context context.Context
	WorkOfByteToUint16
}

var (
	zero_of_WorkOfByteToUint16       WorkOfByteToUint16
	zero_of_WorkOfByteToUint16_Value byte
	pool_of_WorkOfByteToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToUint16{}
		},
	}
)

func getWorkOfByteToUint16() *WorkOfByteToUint16 {
	return pool_of_WorkOfByteToUint16.Get().(*WorkOfByteToUint16)
}
func putWorkOfByteToUint16(d *WorkOfByteToUint16) {
	d.Value = zero_of_WorkOfByteToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToUint16.Put(d)
}

type _ByteToUint16 struct{}

func (_ _ByteToUint16) GetWork() *WorkOfByteToUint16 {
	return getWorkOfByteToUint16()
}
func (__ _ByteToUint16) GetWorkWith(value byte, returnCh chan<- *ReturnOfUint16) *WorkOfByteToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToUint16) PutWork(d *WorkOfByteToUint16) {
	putWorkOfByteToUint16(d)
}

func (_ _ByteToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _ByteToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _ByteToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _ByteToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _ByteToUint16) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToUint16) CallAsync(ctx context.Context, work *WorkOfByteToUint16, h func(ctx context.Context, arg byte) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToUint32 interface {
	Push(ctx context.Context, work *WorkOfByteToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfByteToUint32 struct {
	Value    byte
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfByteToUint32WithContext struct {
	Context context.Context
	WorkOfByteToUint32
}

var (
	zero_of_WorkOfByteToUint32       WorkOfByteToUint32
	zero_of_WorkOfByteToUint32_Value byte
	pool_of_WorkOfByteToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToUint32{}
		},
	}
)

func getWorkOfByteToUint32() *WorkOfByteToUint32 {
	return pool_of_WorkOfByteToUint32.Get().(*WorkOfByteToUint32)
}
func putWorkOfByteToUint32(d *WorkOfByteToUint32) {
	d.Value = zero_of_WorkOfByteToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToUint32.Put(d)
}

type _ByteToUint32 struct{}

func (_ _ByteToUint32) GetWork() *WorkOfByteToUint32 {
	return getWorkOfByteToUint32()
}
func (__ _ByteToUint32) GetWorkWith(value byte, returnCh chan<- *ReturnOfUint32) *WorkOfByteToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToUint32) PutWork(d *WorkOfByteToUint32) {
	putWorkOfByteToUint32(d)
}

func (_ _ByteToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _ByteToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _ByteToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _ByteToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _ByteToUint32) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToUint32) CallAsync(ctx context.Context, work *WorkOfByteToUint32, h func(ctx context.Context, arg byte) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToUint64 interface {
	Push(ctx context.Context, work *WorkOfByteToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfByteToUint64 struct {
	Value    byte
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfByteToUint64WithContext struct {
	Context context.Context
	WorkOfByteToUint64
}

var (
	zero_of_WorkOfByteToUint64       WorkOfByteToUint64
	zero_of_WorkOfByteToUint64_Value byte
	pool_of_WorkOfByteToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToUint64{}
		},
	}
)

func getWorkOfByteToUint64() *WorkOfByteToUint64 {
	return pool_of_WorkOfByteToUint64.Get().(*WorkOfByteToUint64)
}
func putWorkOfByteToUint64(d *WorkOfByteToUint64) {
	d.Value = zero_of_WorkOfByteToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToUint64.Put(d)
}

type _ByteToUint64 struct{}

func (_ _ByteToUint64) GetWork() *WorkOfByteToUint64 {
	return getWorkOfByteToUint64()
}
func (__ _ByteToUint64) GetWorkWith(value byte, returnCh chan<- *ReturnOfUint64) *WorkOfByteToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToUint64) PutWork(d *WorkOfByteToUint64) {
	putWorkOfByteToUint64(d)
}

func (_ _ByteToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _ByteToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _ByteToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _ByteToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _ByteToUint64) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToUint64) CallAsync(ctx context.Context, work *WorkOfByteToUint64, h func(ctx context.Context, arg byte) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToUint8 interface {
	Push(ctx context.Context, work *WorkOfByteToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfByteToUint8 struct {
	Value    byte
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfByteToUint8WithContext struct {
	Context context.Context
	WorkOfByteToUint8
}

var (
	zero_of_WorkOfByteToUint8       WorkOfByteToUint8
	zero_of_WorkOfByteToUint8_Value byte
	pool_of_WorkOfByteToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToUint8{}
		},
	}
)

func getWorkOfByteToUint8() *WorkOfByteToUint8 {
	return pool_of_WorkOfByteToUint8.Get().(*WorkOfByteToUint8)
}
func putWorkOfByteToUint8(d *WorkOfByteToUint8) {
	d.Value = zero_of_WorkOfByteToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToUint8.Put(d)
}

type _ByteToUint8 struct{}

func (_ _ByteToUint8) GetWork() *WorkOfByteToUint8 {
	return getWorkOfByteToUint8()
}
func (__ _ByteToUint8) GetWorkWith(value byte, returnCh chan<- *ReturnOfUint8) *WorkOfByteToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToUint8) PutWork(d *WorkOfByteToUint8) {
	putWorkOfByteToUint8(d)
}

func (_ _ByteToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _ByteToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _ByteToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _ByteToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _ByteToUint8) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToUint8) CallAsync(ctx context.Context, work *WorkOfByteToUint8, h func(ctx context.Context, arg byte) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToUintptr interface {
	Push(ctx context.Context, work *WorkOfByteToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfByteToUintptr struct {
	Value    byte
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfByteToUintptrWithContext struct {
	Context context.Context
	WorkOfByteToUintptr
}

var (
	zero_of_WorkOfByteToUintptr       WorkOfByteToUintptr
	zero_of_WorkOfByteToUintptr_Value byte
	pool_of_WorkOfByteToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToUintptr{}
		},
	}
)

func getWorkOfByteToUintptr() *WorkOfByteToUintptr {
	return pool_of_WorkOfByteToUintptr.Get().(*WorkOfByteToUintptr)
}
func putWorkOfByteToUintptr(d *WorkOfByteToUintptr) {
	d.Value = zero_of_WorkOfByteToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToUintptr.Put(d)
}

type _ByteToUintptr struct{}

func (_ _ByteToUintptr) GetWork() *WorkOfByteToUintptr {
	return getWorkOfByteToUintptr()
}
func (__ _ByteToUintptr) GetWorkWith(value byte, returnCh chan<- *ReturnOfUintptr) *WorkOfByteToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToUintptr) PutWork(d *WorkOfByteToUintptr) {
	putWorkOfByteToUintptr(d)
}

func (_ _ByteToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _ByteToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _ByteToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _ByteToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _ByteToUintptr) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToUintptr) CallAsync(ctx context.Context, work *WorkOfByteToUintptr, h func(ctx context.Context, arg byte) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToBytes interface {
	Push(ctx context.Context, work *WorkOfByteToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfByteToBytes struct {
	Value    byte
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfByteToBytesWithContext struct {
	Context context.Context
	WorkOfByteToBytes
}

var (
	zero_of_WorkOfByteToBytes       WorkOfByteToBytes
	zero_of_WorkOfByteToBytes_Value byte
	pool_of_WorkOfByteToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToBytes{}
		},
	}
)

func getWorkOfByteToBytes() *WorkOfByteToBytes {
	return pool_of_WorkOfByteToBytes.Get().(*WorkOfByteToBytes)
}
func putWorkOfByteToBytes(d *WorkOfByteToBytes) {
	d.Value = zero_of_WorkOfByteToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToBytes.Put(d)
}

type _ByteToBytes struct{}

func (_ _ByteToBytes) GetWork() *WorkOfByteToBytes {
	return getWorkOfByteToBytes()
}
func (__ _ByteToBytes) GetWorkWith(value byte, returnCh chan<- *ReturnOfBytes) *WorkOfByteToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToBytes) PutWork(d *WorkOfByteToBytes) {
	putWorkOfByteToBytes(d)
}

func (_ _ByteToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _ByteToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _ByteToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _ByteToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _ByteToBytes) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToBytes) CallAsync(ctx context.Context, work *WorkOfByteToBytes, h func(ctx context.Context, arg byte) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfByteToInterface interface {
	Push(ctx context.Context, work *WorkOfByteToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfByteToInterface struct {
	Value    byte
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfByteToInterfaceWithContext struct {
	Context context.Context
	WorkOfByteToInterface
}

var (
	zero_of_WorkOfByteToInterface       WorkOfByteToInterface
	zero_of_WorkOfByteToInterface_Value byte
	pool_of_WorkOfByteToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfByteToInterface{}
		},
	}
)

func getWorkOfByteToInterface() *WorkOfByteToInterface {
	return pool_of_WorkOfByteToInterface.Get().(*WorkOfByteToInterface)
}
func putWorkOfByteToInterface(d *WorkOfByteToInterface) {
	d.Value = zero_of_WorkOfByteToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfByteToInterface.Put(d)
}

type _ByteToInterface struct{}

func (_ _ByteToInterface) GetWork() *WorkOfByteToInterface {
	return getWorkOfByteToInterface()
}
func (__ _ByteToInterface) GetWorkWith(value byte, returnCh chan<- *ReturnOfInterface) *WorkOfByteToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ByteToInterface) PutWork(d *WorkOfByteToInterface) {
	putWorkOfByteToInterface(d)
}

func (_ _ByteToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _ByteToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ByteToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _ByteToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _ByteToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _ByteToInterface) CallSync(ctx context.Context, value byte, push func(ctx context.Context, work *WorkOfByteToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ByteToInterface) CallAsync(ctx context.Context, work *WorkOfByteToInterface, h func(ctx context.Context, arg byte) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToBool interface {
	Push(ctx context.Context, work *WorkOfComplex128ToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfComplex128ToBool struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfComplex128ToBoolWithContext struct {
	Context context.Context
	WorkOfComplex128ToBool
}

var (
	zero_of_WorkOfComplex128ToBool       WorkOfComplex128ToBool
	zero_of_WorkOfComplex128ToBool_Value complex128
	pool_of_WorkOfComplex128ToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToBool{}
		},
	}
)

func getWorkOfComplex128ToBool() *WorkOfComplex128ToBool {
	return pool_of_WorkOfComplex128ToBool.Get().(*WorkOfComplex128ToBool)
}
func putWorkOfComplex128ToBool(d *WorkOfComplex128ToBool) {
	d.Value = zero_of_WorkOfComplex128ToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToBool.Put(d)
}

type _Complex128ToBool struct{}

func (_ _Complex128ToBool) GetWork() *WorkOfComplex128ToBool {
	return getWorkOfComplex128ToBool()
}
func (__ _Complex128ToBool) GetWorkWith(value complex128, returnCh chan<- *ReturnOfBool) *WorkOfComplex128ToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToBool) PutWork(d *WorkOfComplex128ToBool) {
	putWorkOfComplex128ToBool(d)
}

func (_ _Complex128ToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _Complex128ToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _Complex128ToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _Complex128ToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _Complex128ToBool) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToBool) CallAsync(ctx context.Context, work *WorkOfComplex128ToBool, h func(ctx context.Context, arg complex128) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToByte interface {
	Push(ctx context.Context, work *WorkOfComplex128ToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfComplex128ToByte struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfComplex128ToByteWithContext struct {
	Context context.Context
	WorkOfComplex128ToByte
}

var (
	zero_of_WorkOfComplex128ToByte       WorkOfComplex128ToByte
	zero_of_WorkOfComplex128ToByte_Value complex128
	pool_of_WorkOfComplex128ToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToByte{}
		},
	}
)

func getWorkOfComplex128ToByte() *WorkOfComplex128ToByte {
	return pool_of_WorkOfComplex128ToByte.Get().(*WorkOfComplex128ToByte)
}
func putWorkOfComplex128ToByte(d *WorkOfComplex128ToByte) {
	d.Value = zero_of_WorkOfComplex128ToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToByte.Put(d)
}

type _Complex128ToByte struct{}

func (_ _Complex128ToByte) GetWork() *WorkOfComplex128ToByte {
	return getWorkOfComplex128ToByte()
}
func (__ _Complex128ToByte) GetWorkWith(value complex128, returnCh chan<- *ReturnOfByte) *WorkOfComplex128ToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToByte) PutWork(d *WorkOfComplex128ToByte) {
	putWorkOfComplex128ToByte(d)
}

func (_ _Complex128ToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _Complex128ToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _Complex128ToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _Complex128ToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _Complex128ToByte) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToByte) CallAsync(ctx context.Context, work *WorkOfComplex128ToByte, h func(ctx context.Context, arg complex128) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToComplex128 interface {
	Push(ctx context.Context, work *WorkOfComplex128ToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfComplex128ToComplex128 struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfComplex128ToComplex128WithContext struct {
	Context context.Context
	WorkOfComplex128ToComplex128
}

var (
	zero_of_WorkOfComplex128ToComplex128       WorkOfComplex128ToComplex128
	zero_of_WorkOfComplex128ToComplex128_Value complex128
	pool_of_WorkOfComplex128ToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToComplex128{}
		},
	}
)

func getWorkOfComplex128ToComplex128() *WorkOfComplex128ToComplex128 {
	return pool_of_WorkOfComplex128ToComplex128.Get().(*WorkOfComplex128ToComplex128)
}
func putWorkOfComplex128ToComplex128(d *WorkOfComplex128ToComplex128) {
	d.Value = zero_of_WorkOfComplex128ToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToComplex128.Put(d)
}

type _Complex128ToComplex128 struct{}

func (_ _Complex128ToComplex128) GetWork() *WorkOfComplex128ToComplex128 {
	return getWorkOfComplex128ToComplex128()
}
func (__ _Complex128ToComplex128) GetWorkWith(value complex128, returnCh chan<- *ReturnOfComplex128) *WorkOfComplex128ToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToComplex128) PutWork(d *WorkOfComplex128ToComplex128) {
	putWorkOfComplex128ToComplex128(d)
}

func (_ _Complex128ToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _Complex128ToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _Complex128ToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _Complex128ToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _Complex128ToComplex128) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToComplex128) CallAsync(ctx context.Context, work *WorkOfComplex128ToComplex128, h func(ctx context.Context, arg complex128) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToComplex64 interface {
	Push(ctx context.Context, work *WorkOfComplex128ToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfComplex128ToComplex64 struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfComplex128ToComplex64WithContext struct {
	Context context.Context
	WorkOfComplex128ToComplex64
}

var (
	zero_of_WorkOfComplex128ToComplex64       WorkOfComplex128ToComplex64
	zero_of_WorkOfComplex128ToComplex64_Value complex128
	pool_of_WorkOfComplex128ToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToComplex64{}
		},
	}
)

func getWorkOfComplex128ToComplex64() *WorkOfComplex128ToComplex64 {
	return pool_of_WorkOfComplex128ToComplex64.Get().(*WorkOfComplex128ToComplex64)
}
func putWorkOfComplex128ToComplex64(d *WorkOfComplex128ToComplex64) {
	d.Value = zero_of_WorkOfComplex128ToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToComplex64.Put(d)
}

type _Complex128ToComplex64 struct{}

func (_ _Complex128ToComplex64) GetWork() *WorkOfComplex128ToComplex64 {
	return getWorkOfComplex128ToComplex64()
}
func (__ _Complex128ToComplex64) GetWorkWith(value complex128, returnCh chan<- *ReturnOfComplex64) *WorkOfComplex128ToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToComplex64) PutWork(d *WorkOfComplex128ToComplex64) {
	putWorkOfComplex128ToComplex64(d)
}

func (_ _Complex128ToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _Complex128ToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _Complex128ToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _Complex128ToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _Complex128ToComplex64) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToComplex64) CallAsync(ctx context.Context, work *WorkOfComplex128ToComplex64, h func(ctx context.Context, arg complex128) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToError interface {
	Push(ctx context.Context, work *WorkOfComplex128ToError, returnCh chan<- *ReturnOfError)
}

type WorkOfComplex128ToError struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfError
}

type WorkOfComplex128ToErrorWithContext struct {
	Context context.Context
	WorkOfComplex128ToError
}

var (
	zero_of_WorkOfComplex128ToError       WorkOfComplex128ToError
	zero_of_WorkOfComplex128ToError_Value complex128
	pool_of_WorkOfComplex128ToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToError{}
		},
	}
)

func getWorkOfComplex128ToError() *WorkOfComplex128ToError {
	return pool_of_WorkOfComplex128ToError.Get().(*WorkOfComplex128ToError)
}
func putWorkOfComplex128ToError(d *WorkOfComplex128ToError) {
	d.Value = zero_of_WorkOfComplex128ToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToError.Put(d)
}

type _Complex128ToError struct{}

func (_ _Complex128ToError) GetWork() *WorkOfComplex128ToError {
	return getWorkOfComplex128ToError()
}
func (__ _Complex128ToError) GetWorkWith(value complex128, returnCh chan<- *ReturnOfError) *WorkOfComplex128ToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToError) PutWork(d *WorkOfComplex128ToError) {
	putWorkOfComplex128ToError(d)
}

func (_ _Complex128ToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _Complex128ToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _Complex128ToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _Complex128ToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _Complex128ToError) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToError) CallAsync(ctx context.Context, work *WorkOfComplex128ToError, h func(ctx context.Context, arg complex128) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToFloat32 interface {
	Push(ctx context.Context, work *WorkOfComplex128ToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfComplex128ToFloat32 struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfComplex128ToFloat32WithContext struct {
	Context context.Context
	WorkOfComplex128ToFloat32
}

var (
	zero_of_WorkOfComplex128ToFloat32       WorkOfComplex128ToFloat32
	zero_of_WorkOfComplex128ToFloat32_Value complex128
	pool_of_WorkOfComplex128ToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToFloat32{}
		},
	}
)

func getWorkOfComplex128ToFloat32() *WorkOfComplex128ToFloat32 {
	return pool_of_WorkOfComplex128ToFloat32.Get().(*WorkOfComplex128ToFloat32)
}
func putWorkOfComplex128ToFloat32(d *WorkOfComplex128ToFloat32) {
	d.Value = zero_of_WorkOfComplex128ToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToFloat32.Put(d)
}

type _Complex128ToFloat32 struct{}

func (_ _Complex128ToFloat32) GetWork() *WorkOfComplex128ToFloat32 {
	return getWorkOfComplex128ToFloat32()
}
func (__ _Complex128ToFloat32) GetWorkWith(value complex128, returnCh chan<- *ReturnOfFloat32) *WorkOfComplex128ToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToFloat32) PutWork(d *WorkOfComplex128ToFloat32) {
	putWorkOfComplex128ToFloat32(d)
}

func (_ _Complex128ToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _Complex128ToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _Complex128ToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _Complex128ToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _Complex128ToFloat32) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToFloat32) CallAsync(ctx context.Context, work *WorkOfComplex128ToFloat32, h func(ctx context.Context, arg complex128) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToFloat64 interface {
	Push(ctx context.Context, work *WorkOfComplex128ToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfComplex128ToFloat64 struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfComplex128ToFloat64WithContext struct {
	Context context.Context
	WorkOfComplex128ToFloat64
}

var (
	zero_of_WorkOfComplex128ToFloat64       WorkOfComplex128ToFloat64
	zero_of_WorkOfComplex128ToFloat64_Value complex128
	pool_of_WorkOfComplex128ToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToFloat64{}
		},
	}
)

func getWorkOfComplex128ToFloat64() *WorkOfComplex128ToFloat64 {
	return pool_of_WorkOfComplex128ToFloat64.Get().(*WorkOfComplex128ToFloat64)
}
func putWorkOfComplex128ToFloat64(d *WorkOfComplex128ToFloat64) {
	d.Value = zero_of_WorkOfComplex128ToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToFloat64.Put(d)
}

type _Complex128ToFloat64 struct{}

func (_ _Complex128ToFloat64) GetWork() *WorkOfComplex128ToFloat64 {
	return getWorkOfComplex128ToFloat64()
}
func (__ _Complex128ToFloat64) GetWorkWith(value complex128, returnCh chan<- *ReturnOfFloat64) *WorkOfComplex128ToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToFloat64) PutWork(d *WorkOfComplex128ToFloat64) {
	putWorkOfComplex128ToFloat64(d)
}

func (_ _Complex128ToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _Complex128ToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _Complex128ToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _Complex128ToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _Complex128ToFloat64) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToFloat64) CallAsync(ctx context.Context, work *WorkOfComplex128ToFloat64, h func(ctx context.Context, arg complex128) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToInt interface {
	Push(ctx context.Context, work *WorkOfComplex128ToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfComplex128ToInt struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfComplex128ToIntWithContext struct {
	Context context.Context
	WorkOfComplex128ToInt
}

var (
	zero_of_WorkOfComplex128ToInt       WorkOfComplex128ToInt
	zero_of_WorkOfComplex128ToInt_Value complex128
	pool_of_WorkOfComplex128ToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToInt{}
		},
	}
)

func getWorkOfComplex128ToInt() *WorkOfComplex128ToInt {
	return pool_of_WorkOfComplex128ToInt.Get().(*WorkOfComplex128ToInt)
}
func putWorkOfComplex128ToInt(d *WorkOfComplex128ToInt) {
	d.Value = zero_of_WorkOfComplex128ToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToInt.Put(d)
}

type _Complex128ToInt struct{}

func (_ _Complex128ToInt) GetWork() *WorkOfComplex128ToInt {
	return getWorkOfComplex128ToInt()
}
func (__ _Complex128ToInt) GetWorkWith(value complex128, returnCh chan<- *ReturnOfInt) *WorkOfComplex128ToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToInt) PutWork(d *WorkOfComplex128ToInt) {
	putWorkOfComplex128ToInt(d)
}

func (_ _Complex128ToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _Complex128ToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _Complex128ToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _Complex128ToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _Complex128ToInt) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToInt) CallAsync(ctx context.Context, work *WorkOfComplex128ToInt, h func(ctx context.Context, arg complex128) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToInt16 interface {
	Push(ctx context.Context, work *WorkOfComplex128ToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfComplex128ToInt16 struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfComplex128ToInt16WithContext struct {
	Context context.Context
	WorkOfComplex128ToInt16
}

var (
	zero_of_WorkOfComplex128ToInt16       WorkOfComplex128ToInt16
	zero_of_WorkOfComplex128ToInt16_Value complex128
	pool_of_WorkOfComplex128ToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToInt16{}
		},
	}
)

func getWorkOfComplex128ToInt16() *WorkOfComplex128ToInt16 {
	return pool_of_WorkOfComplex128ToInt16.Get().(*WorkOfComplex128ToInt16)
}
func putWorkOfComplex128ToInt16(d *WorkOfComplex128ToInt16) {
	d.Value = zero_of_WorkOfComplex128ToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToInt16.Put(d)
}

type _Complex128ToInt16 struct{}

func (_ _Complex128ToInt16) GetWork() *WorkOfComplex128ToInt16 {
	return getWorkOfComplex128ToInt16()
}
func (__ _Complex128ToInt16) GetWorkWith(value complex128, returnCh chan<- *ReturnOfInt16) *WorkOfComplex128ToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToInt16) PutWork(d *WorkOfComplex128ToInt16) {
	putWorkOfComplex128ToInt16(d)
}

func (_ _Complex128ToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _Complex128ToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _Complex128ToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _Complex128ToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _Complex128ToInt16) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToInt16) CallAsync(ctx context.Context, work *WorkOfComplex128ToInt16, h func(ctx context.Context, arg complex128) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToInt32 interface {
	Push(ctx context.Context, work *WorkOfComplex128ToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfComplex128ToInt32 struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfComplex128ToInt32WithContext struct {
	Context context.Context
	WorkOfComplex128ToInt32
}

var (
	zero_of_WorkOfComplex128ToInt32       WorkOfComplex128ToInt32
	zero_of_WorkOfComplex128ToInt32_Value complex128
	pool_of_WorkOfComplex128ToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToInt32{}
		},
	}
)

func getWorkOfComplex128ToInt32() *WorkOfComplex128ToInt32 {
	return pool_of_WorkOfComplex128ToInt32.Get().(*WorkOfComplex128ToInt32)
}
func putWorkOfComplex128ToInt32(d *WorkOfComplex128ToInt32) {
	d.Value = zero_of_WorkOfComplex128ToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToInt32.Put(d)
}

type _Complex128ToInt32 struct{}

func (_ _Complex128ToInt32) GetWork() *WorkOfComplex128ToInt32 {
	return getWorkOfComplex128ToInt32()
}
func (__ _Complex128ToInt32) GetWorkWith(value complex128, returnCh chan<- *ReturnOfInt32) *WorkOfComplex128ToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToInt32) PutWork(d *WorkOfComplex128ToInt32) {
	putWorkOfComplex128ToInt32(d)
}

func (_ _Complex128ToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _Complex128ToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _Complex128ToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _Complex128ToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _Complex128ToInt32) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToInt32) CallAsync(ctx context.Context, work *WorkOfComplex128ToInt32, h func(ctx context.Context, arg complex128) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToInt64 interface {
	Push(ctx context.Context, work *WorkOfComplex128ToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfComplex128ToInt64 struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfComplex128ToInt64WithContext struct {
	Context context.Context
	WorkOfComplex128ToInt64
}

var (
	zero_of_WorkOfComplex128ToInt64       WorkOfComplex128ToInt64
	zero_of_WorkOfComplex128ToInt64_Value complex128
	pool_of_WorkOfComplex128ToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToInt64{}
		},
	}
)

func getWorkOfComplex128ToInt64() *WorkOfComplex128ToInt64 {
	return pool_of_WorkOfComplex128ToInt64.Get().(*WorkOfComplex128ToInt64)
}
func putWorkOfComplex128ToInt64(d *WorkOfComplex128ToInt64) {
	d.Value = zero_of_WorkOfComplex128ToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToInt64.Put(d)
}

type _Complex128ToInt64 struct{}

func (_ _Complex128ToInt64) GetWork() *WorkOfComplex128ToInt64 {
	return getWorkOfComplex128ToInt64()
}
func (__ _Complex128ToInt64) GetWorkWith(value complex128, returnCh chan<- *ReturnOfInt64) *WorkOfComplex128ToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToInt64) PutWork(d *WorkOfComplex128ToInt64) {
	putWorkOfComplex128ToInt64(d)
}

func (_ _Complex128ToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _Complex128ToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _Complex128ToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _Complex128ToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _Complex128ToInt64) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToInt64) CallAsync(ctx context.Context, work *WorkOfComplex128ToInt64, h func(ctx context.Context, arg complex128) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToInt8 interface {
	Push(ctx context.Context, work *WorkOfComplex128ToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfComplex128ToInt8 struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfComplex128ToInt8WithContext struct {
	Context context.Context
	WorkOfComplex128ToInt8
}

var (
	zero_of_WorkOfComplex128ToInt8       WorkOfComplex128ToInt8
	zero_of_WorkOfComplex128ToInt8_Value complex128
	pool_of_WorkOfComplex128ToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToInt8{}
		},
	}
)

func getWorkOfComplex128ToInt8() *WorkOfComplex128ToInt8 {
	return pool_of_WorkOfComplex128ToInt8.Get().(*WorkOfComplex128ToInt8)
}
func putWorkOfComplex128ToInt8(d *WorkOfComplex128ToInt8) {
	d.Value = zero_of_WorkOfComplex128ToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToInt8.Put(d)
}

type _Complex128ToInt8 struct{}

func (_ _Complex128ToInt8) GetWork() *WorkOfComplex128ToInt8 {
	return getWorkOfComplex128ToInt8()
}
func (__ _Complex128ToInt8) GetWorkWith(value complex128, returnCh chan<- *ReturnOfInt8) *WorkOfComplex128ToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToInt8) PutWork(d *WorkOfComplex128ToInt8) {
	putWorkOfComplex128ToInt8(d)
}

func (_ _Complex128ToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _Complex128ToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _Complex128ToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _Complex128ToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _Complex128ToInt8) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToInt8) CallAsync(ctx context.Context, work *WorkOfComplex128ToInt8, h func(ctx context.Context, arg complex128) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToRune interface {
	Push(ctx context.Context, work *WorkOfComplex128ToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfComplex128ToRune struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfComplex128ToRuneWithContext struct {
	Context context.Context
	WorkOfComplex128ToRune
}

var (
	zero_of_WorkOfComplex128ToRune       WorkOfComplex128ToRune
	zero_of_WorkOfComplex128ToRune_Value complex128
	pool_of_WorkOfComplex128ToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToRune{}
		},
	}
)

func getWorkOfComplex128ToRune() *WorkOfComplex128ToRune {
	return pool_of_WorkOfComplex128ToRune.Get().(*WorkOfComplex128ToRune)
}
func putWorkOfComplex128ToRune(d *WorkOfComplex128ToRune) {
	d.Value = zero_of_WorkOfComplex128ToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToRune.Put(d)
}

type _Complex128ToRune struct{}

func (_ _Complex128ToRune) GetWork() *WorkOfComplex128ToRune {
	return getWorkOfComplex128ToRune()
}
func (__ _Complex128ToRune) GetWorkWith(value complex128, returnCh chan<- *ReturnOfRune) *WorkOfComplex128ToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToRune) PutWork(d *WorkOfComplex128ToRune) {
	putWorkOfComplex128ToRune(d)
}

func (_ _Complex128ToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _Complex128ToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _Complex128ToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _Complex128ToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _Complex128ToRune) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToRune) CallAsync(ctx context.Context, work *WorkOfComplex128ToRune, h func(ctx context.Context, arg complex128) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToString interface {
	Push(ctx context.Context, work *WorkOfComplex128ToString, returnCh chan<- *ReturnOfString)
}

type WorkOfComplex128ToString struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfString
}

type WorkOfComplex128ToStringWithContext struct {
	Context context.Context
	WorkOfComplex128ToString
}

var (
	zero_of_WorkOfComplex128ToString       WorkOfComplex128ToString
	zero_of_WorkOfComplex128ToString_Value complex128
	pool_of_WorkOfComplex128ToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToString{}
		},
	}
)

func getWorkOfComplex128ToString() *WorkOfComplex128ToString {
	return pool_of_WorkOfComplex128ToString.Get().(*WorkOfComplex128ToString)
}
func putWorkOfComplex128ToString(d *WorkOfComplex128ToString) {
	d.Value = zero_of_WorkOfComplex128ToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToString.Put(d)
}

type _Complex128ToString struct{}

func (_ _Complex128ToString) GetWork() *WorkOfComplex128ToString {
	return getWorkOfComplex128ToString()
}
func (__ _Complex128ToString) GetWorkWith(value complex128, returnCh chan<- *ReturnOfString) *WorkOfComplex128ToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToString) PutWork(d *WorkOfComplex128ToString) {
	putWorkOfComplex128ToString(d)
}

func (_ _Complex128ToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _Complex128ToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _Complex128ToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _Complex128ToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _Complex128ToString) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToString) CallAsync(ctx context.Context, work *WorkOfComplex128ToString, h func(ctx context.Context, arg complex128) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToUint interface {
	Push(ctx context.Context, work *WorkOfComplex128ToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfComplex128ToUint struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfComplex128ToUintWithContext struct {
	Context context.Context
	WorkOfComplex128ToUint
}

var (
	zero_of_WorkOfComplex128ToUint       WorkOfComplex128ToUint
	zero_of_WorkOfComplex128ToUint_Value complex128
	pool_of_WorkOfComplex128ToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToUint{}
		},
	}
)

func getWorkOfComplex128ToUint() *WorkOfComplex128ToUint {
	return pool_of_WorkOfComplex128ToUint.Get().(*WorkOfComplex128ToUint)
}
func putWorkOfComplex128ToUint(d *WorkOfComplex128ToUint) {
	d.Value = zero_of_WorkOfComplex128ToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToUint.Put(d)
}

type _Complex128ToUint struct{}

func (_ _Complex128ToUint) GetWork() *WorkOfComplex128ToUint {
	return getWorkOfComplex128ToUint()
}
func (__ _Complex128ToUint) GetWorkWith(value complex128, returnCh chan<- *ReturnOfUint) *WorkOfComplex128ToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToUint) PutWork(d *WorkOfComplex128ToUint) {
	putWorkOfComplex128ToUint(d)
}

func (_ _Complex128ToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _Complex128ToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _Complex128ToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _Complex128ToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _Complex128ToUint) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToUint) CallAsync(ctx context.Context, work *WorkOfComplex128ToUint, h func(ctx context.Context, arg complex128) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToUint16 interface {
	Push(ctx context.Context, work *WorkOfComplex128ToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfComplex128ToUint16 struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfComplex128ToUint16WithContext struct {
	Context context.Context
	WorkOfComplex128ToUint16
}

var (
	zero_of_WorkOfComplex128ToUint16       WorkOfComplex128ToUint16
	zero_of_WorkOfComplex128ToUint16_Value complex128
	pool_of_WorkOfComplex128ToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToUint16{}
		},
	}
)

func getWorkOfComplex128ToUint16() *WorkOfComplex128ToUint16 {
	return pool_of_WorkOfComplex128ToUint16.Get().(*WorkOfComplex128ToUint16)
}
func putWorkOfComplex128ToUint16(d *WorkOfComplex128ToUint16) {
	d.Value = zero_of_WorkOfComplex128ToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToUint16.Put(d)
}

type _Complex128ToUint16 struct{}

func (_ _Complex128ToUint16) GetWork() *WorkOfComplex128ToUint16 {
	return getWorkOfComplex128ToUint16()
}
func (__ _Complex128ToUint16) GetWorkWith(value complex128, returnCh chan<- *ReturnOfUint16) *WorkOfComplex128ToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToUint16) PutWork(d *WorkOfComplex128ToUint16) {
	putWorkOfComplex128ToUint16(d)
}

func (_ _Complex128ToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _Complex128ToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _Complex128ToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _Complex128ToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _Complex128ToUint16) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToUint16) CallAsync(ctx context.Context, work *WorkOfComplex128ToUint16, h func(ctx context.Context, arg complex128) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToUint32 interface {
	Push(ctx context.Context, work *WorkOfComplex128ToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfComplex128ToUint32 struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfComplex128ToUint32WithContext struct {
	Context context.Context
	WorkOfComplex128ToUint32
}

var (
	zero_of_WorkOfComplex128ToUint32       WorkOfComplex128ToUint32
	zero_of_WorkOfComplex128ToUint32_Value complex128
	pool_of_WorkOfComplex128ToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToUint32{}
		},
	}
)

func getWorkOfComplex128ToUint32() *WorkOfComplex128ToUint32 {
	return pool_of_WorkOfComplex128ToUint32.Get().(*WorkOfComplex128ToUint32)
}
func putWorkOfComplex128ToUint32(d *WorkOfComplex128ToUint32) {
	d.Value = zero_of_WorkOfComplex128ToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToUint32.Put(d)
}

type _Complex128ToUint32 struct{}

func (_ _Complex128ToUint32) GetWork() *WorkOfComplex128ToUint32 {
	return getWorkOfComplex128ToUint32()
}
func (__ _Complex128ToUint32) GetWorkWith(value complex128, returnCh chan<- *ReturnOfUint32) *WorkOfComplex128ToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToUint32) PutWork(d *WorkOfComplex128ToUint32) {
	putWorkOfComplex128ToUint32(d)
}

func (_ _Complex128ToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _Complex128ToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _Complex128ToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _Complex128ToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _Complex128ToUint32) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToUint32) CallAsync(ctx context.Context, work *WorkOfComplex128ToUint32, h func(ctx context.Context, arg complex128) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToUint64 interface {
	Push(ctx context.Context, work *WorkOfComplex128ToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfComplex128ToUint64 struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfComplex128ToUint64WithContext struct {
	Context context.Context
	WorkOfComplex128ToUint64
}

var (
	zero_of_WorkOfComplex128ToUint64       WorkOfComplex128ToUint64
	zero_of_WorkOfComplex128ToUint64_Value complex128
	pool_of_WorkOfComplex128ToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToUint64{}
		},
	}
)

func getWorkOfComplex128ToUint64() *WorkOfComplex128ToUint64 {
	return pool_of_WorkOfComplex128ToUint64.Get().(*WorkOfComplex128ToUint64)
}
func putWorkOfComplex128ToUint64(d *WorkOfComplex128ToUint64) {
	d.Value = zero_of_WorkOfComplex128ToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToUint64.Put(d)
}

type _Complex128ToUint64 struct{}

func (_ _Complex128ToUint64) GetWork() *WorkOfComplex128ToUint64 {
	return getWorkOfComplex128ToUint64()
}
func (__ _Complex128ToUint64) GetWorkWith(value complex128, returnCh chan<- *ReturnOfUint64) *WorkOfComplex128ToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToUint64) PutWork(d *WorkOfComplex128ToUint64) {
	putWorkOfComplex128ToUint64(d)
}

func (_ _Complex128ToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _Complex128ToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _Complex128ToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _Complex128ToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _Complex128ToUint64) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToUint64) CallAsync(ctx context.Context, work *WorkOfComplex128ToUint64, h func(ctx context.Context, arg complex128) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToUint8 interface {
	Push(ctx context.Context, work *WorkOfComplex128ToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfComplex128ToUint8 struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfComplex128ToUint8WithContext struct {
	Context context.Context
	WorkOfComplex128ToUint8
}

var (
	zero_of_WorkOfComplex128ToUint8       WorkOfComplex128ToUint8
	zero_of_WorkOfComplex128ToUint8_Value complex128
	pool_of_WorkOfComplex128ToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToUint8{}
		},
	}
)

func getWorkOfComplex128ToUint8() *WorkOfComplex128ToUint8 {
	return pool_of_WorkOfComplex128ToUint8.Get().(*WorkOfComplex128ToUint8)
}
func putWorkOfComplex128ToUint8(d *WorkOfComplex128ToUint8) {
	d.Value = zero_of_WorkOfComplex128ToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToUint8.Put(d)
}

type _Complex128ToUint8 struct{}

func (_ _Complex128ToUint8) GetWork() *WorkOfComplex128ToUint8 {
	return getWorkOfComplex128ToUint8()
}
func (__ _Complex128ToUint8) GetWorkWith(value complex128, returnCh chan<- *ReturnOfUint8) *WorkOfComplex128ToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToUint8) PutWork(d *WorkOfComplex128ToUint8) {
	putWorkOfComplex128ToUint8(d)
}

func (_ _Complex128ToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _Complex128ToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _Complex128ToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _Complex128ToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _Complex128ToUint8) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToUint8) CallAsync(ctx context.Context, work *WorkOfComplex128ToUint8, h func(ctx context.Context, arg complex128) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToUintptr interface {
	Push(ctx context.Context, work *WorkOfComplex128ToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfComplex128ToUintptr struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfComplex128ToUintptrWithContext struct {
	Context context.Context
	WorkOfComplex128ToUintptr
}

var (
	zero_of_WorkOfComplex128ToUintptr       WorkOfComplex128ToUintptr
	zero_of_WorkOfComplex128ToUintptr_Value complex128
	pool_of_WorkOfComplex128ToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToUintptr{}
		},
	}
)

func getWorkOfComplex128ToUintptr() *WorkOfComplex128ToUintptr {
	return pool_of_WorkOfComplex128ToUintptr.Get().(*WorkOfComplex128ToUintptr)
}
func putWorkOfComplex128ToUintptr(d *WorkOfComplex128ToUintptr) {
	d.Value = zero_of_WorkOfComplex128ToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToUintptr.Put(d)
}

type _Complex128ToUintptr struct{}

func (_ _Complex128ToUintptr) GetWork() *WorkOfComplex128ToUintptr {
	return getWorkOfComplex128ToUintptr()
}
func (__ _Complex128ToUintptr) GetWorkWith(value complex128, returnCh chan<- *ReturnOfUintptr) *WorkOfComplex128ToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToUintptr) PutWork(d *WorkOfComplex128ToUintptr) {
	putWorkOfComplex128ToUintptr(d)
}

func (_ _Complex128ToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _Complex128ToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _Complex128ToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _Complex128ToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _Complex128ToUintptr) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToUintptr) CallAsync(ctx context.Context, work *WorkOfComplex128ToUintptr, h func(ctx context.Context, arg complex128) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToBytes interface {
	Push(ctx context.Context, work *WorkOfComplex128ToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfComplex128ToBytes struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfComplex128ToBytesWithContext struct {
	Context context.Context
	WorkOfComplex128ToBytes
}

var (
	zero_of_WorkOfComplex128ToBytes       WorkOfComplex128ToBytes
	zero_of_WorkOfComplex128ToBytes_Value complex128
	pool_of_WorkOfComplex128ToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToBytes{}
		},
	}
)

func getWorkOfComplex128ToBytes() *WorkOfComplex128ToBytes {
	return pool_of_WorkOfComplex128ToBytes.Get().(*WorkOfComplex128ToBytes)
}
func putWorkOfComplex128ToBytes(d *WorkOfComplex128ToBytes) {
	d.Value = zero_of_WorkOfComplex128ToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToBytes.Put(d)
}

type _Complex128ToBytes struct{}

func (_ _Complex128ToBytes) GetWork() *WorkOfComplex128ToBytes {
	return getWorkOfComplex128ToBytes()
}
func (__ _Complex128ToBytes) GetWorkWith(value complex128, returnCh chan<- *ReturnOfBytes) *WorkOfComplex128ToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToBytes) PutWork(d *WorkOfComplex128ToBytes) {
	putWorkOfComplex128ToBytes(d)
}

func (_ _Complex128ToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _Complex128ToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _Complex128ToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _Complex128ToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _Complex128ToBytes) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToBytes) CallAsync(ctx context.Context, work *WorkOfComplex128ToBytes, h func(ctx context.Context, arg complex128) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex128ToInterface interface {
	Push(ctx context.Context, work *WorkOfComplex128ToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfComplex128ToInterface struct {
	Value    complex128
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfComplex128ToInterfaceWithContext struct {
	Context context.Context
	WorkOfComplex128ToInterface
}

var (
	zero_of_WorkOfComplex128ToInterface       WorkOfComplex128ToInterface
	zero_of_WorkOfComplex128ToInterface_Value complex128
	pool_of_WorkOfComplex128ToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex128ToInterface{}
		},
	}
)

func getWorkOfComplex128ToInterface() *WorkOfComplex128ToInterface {
	return pool_of_WorkOfComplex128ToInterface.Get().(*WorkOfComplex128ToInterface)
}
func putWorkOfComplex128ToInterface(d *WorkOfComplex128ToInterface) {
	d.Value = zero_of_WorkOfComplex128ToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex128ToInterface.Put(d)
}

type _Complex128ToInterface struct{}

func (_ _Complex128ToInterface) GetWork() *WorkOfComplex128ToInterface {
	return getWorkOfComplex128ToInterface()
}
func (__ _Complex128ToInterface) GetWorkWith(value complex128, returnCh chan<- *ReturnOfInterface) *WorkOfComplex128ToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex128ToInterface) PutWork(d *WorkOfComplex128ToInterface) {
	putWorkOfComplex128ToInterface(d)
}

func (_ _Complex128ToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _Complex128ToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex128ToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _Complex128ToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _Complex128ToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _Complex128ToInterface) CallSync(ctx context.Context, value complex128, push func(ctx context.Context, work *WorkOfComplex128ToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex128ToInterface) CallAsync(ctx context.Context, work *WorkOfComplex128ToInterface, h func(ctx context.Context, arg complex128) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToBool interface {
	Push(ctx context.Context, work *WorkOfComplex64ToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfComplex64ToBool struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfComplex64ToBoolWithContext struct {
	Context context.Context
	WorkOfComplex64ToBool
}

var (
	zero_of_WorkOfComplex64ToBool       WorkOfComplex64ToBool
	zero_of_WorkOfComplex64ToBool_Value complex64
	pool_of_WorkOfComplex64ToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToBool{}
		},
	}
)

func getWorkOfComplex64ToBool() *WorkOfComplex64ToBool {
	return pool_of_WorkOfComplex64ToBool.Get().(*WorkOfComplex64ToBool)
}
func putWorkOfComplex64ToBool(d *WorkOfComplex64ToBool) {
	d.Value = zero_of_WorkOfComplex64ToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToBool.Put(d)
}

type _Complex64ToBool struct{}

func (_ _Complex64ToBool) GetWork() *WorkOfComplex64ToBool {
	return getWorkOfComplex64ToBool()
}
func (__ _Complex64ToBool) GetWorkWith(value complex64, returnCh chan<- *ReturnOfBool) *WorkOfComplex64ToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToBool) PutWork(d *WorkOfComplex64ToBool) {
	putWorkOfComplex64ToBool(d)
}

func (_ _Complex64ToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _Complex64ToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _Complex64ToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _Complex64ToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _Complex64ToBool) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToBool) CallAsync(ctx context.Context, work *WorkOfComplex64ToBool, h func(ctx context.Context, arg complex64) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToByte interface {
	Push(ctx context.Context, work *WorkOfComplex64ToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfComplex64ToByte struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfComplex64ToByteWithContext struct {
	Context context.Context
	WorkOfComplex64ToByte
}

var (
	zero_of_WorkOfComplex64ToByte       WorkOfComplex64ToByte
	zero_of_WorkOfComplex64ToByte_Value complex64
	pool_of_WorkOfComplex64ToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToByte{}
		},
	}
)

func getWorkOfComplex64ToByte() *WorkOfComplex64ToByte {
	return pool_of_WorkOfComplex64ToByte.Get().(*WorkOfComplex64ToByte)
}
func putWorkOfComplex64ToByte(d *WorkOfComplex64ToByte) {
	d.Value = zero_of_WorkOfComplex64ToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToByte.Put(d)
}

type _Complex64ToByte struct{}

func (_ _Complex64ToByte) GetWork() *WorkOfComplex64ToByte {
	return getWorkOfComplex64ToByte()
}
func (__ _Complex64ToByte) GetWorkWith(value complex64, returnCh chan<- *ReturnOfByte) *WorkOfComplex64ToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToByte) PutWork(d *WorkOfComplex64ToByte) {
	putWorkOfComplex64ToByte(d)
}

func (_ _Complex64ToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _Complex64ToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _Complex64ToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _Complex64ToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _Complex64ToByte) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToByte) CallAsync(ctx context.Context, work *WorkOfComplex64ToByte, h func(ctx context.Context, arg complex64) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToComplex128 interface {
	Push(ctx context.Context, work *WorkOfComplex64ToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfComplex64ToComplex128 struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfComplex64ToComplex128WithContext struct {
	Context context.Context
	WorkOfComplex64ToComplex128
}

var (
	zero_of_WorkOfComplex64ToComplex128       WorkOfComplex64ToComplex128
	zero_of_WorkOfComplex64ToComplex128_Value complex64
	pool_of_WorkOfComplex64ToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToComplex128{}
		},
	}
)

func getWorkOfComplex64ToComplex128() *WorkOfComplex64ToComplex128 {
	return pool_of_WorkOfComplex64ToComplex128.Get().(*WorkOfComplex64ToComplex128)
}
func putWorkOfComplex64ToComplex128(d *WorkOfComplex64ToComplex128) {
	d.Value = zero_of_WorkOfComplex64ToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToComplex128.Put(d)
}

type _Complex64ToComplex128 struct{}

func (_ _Complex64ToComplex128) GetWork() *WorkOfComplex64ToComplex128 {
	return getWorkOfComplex64ToComplex128()
}
func (__ _Complex64ToComplex128) GetWorkWith(value complex64, returnCh chan<- *ReturnOfComplex128) *WorkOfComplex64ToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToComplex128) PutWork(d *WorkOfComplex64ToComplex128) {
	putWorkOfComplex64ToComplex128(d)
}

func (_ _Complex64ToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _Complex64ToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _Complex64ToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _Complex64ToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _Complex64ToComplex128) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToComplex128) CallAsync(ctx context.Context, work *WorkOfComplex64ToComplex128, h func(ctx context.Context, arg complex64) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToComplex64 interface {
	Push(ctx context.Context, work *WorkOfComplex64ToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfComplex64ToComplex64 struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfComplex64ToComplex64WithContext struct {
	Context context.Context
	WorkOfComplex64ToComplex64
}

var (
	zero_of_WorkOfComplex64ToComplex64       WorkOfComplex64ToComplex64
	zero_of_WorkOfComplex64ToComplex64_Value complex64
	pool_of_WorkOfComplex64ToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToComplex64{}
		},
	}
)

func getWorkOfComplex64ToComplex64() *WorkOfComplex64ToComplex64 {
	return pool_of_WorkOfComplex64ToComplex64.Get().(*WorkOfComplex64ToComplex64)
}
func putWorkOfComplex64ToComplex64(d *WorkOfComplex64ToComplex64) {
	d.Value = zero_of_WorkOfComplex64ToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToComplex64.Put(d)
}

type _Complex64ToComplex64 struct{}

func (_ _Complex64ToComplex64) GetWork() *WorkOfComplex64ToComplex64 {
	return getWorkOfComplex64ToComplex64()
}
func (__ _Complex64ToComplex64) GetWorkWith(value complex64, returnCh chan<- *ReturnOfComplex64) *WorkOfComplex64ToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToComplex64) PutWork(d *WorkOfComplex64ToComplex64) {
	putWorkOfComplex64ToComplex64(d)
}

func (_ _Complex64ToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _Complex64ToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _Complex64ToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _Complex64ToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _Complex64ToComplex64) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToComplex64) CallAsync(ctx context.Context, work *WorkOfComplex64ToComplex64, h func(ctx context.Context, arg complex64) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToError interface {
	Push(ctx context.Context, work *WorkOfComplex64ToError, returnCh chan<- *ReturnOfError)
}

type WorkOfComplex64ToError struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfError
}

type WorkOfComplex64ToErrorWithContext struct {
	Context context.Context
	WorkOfComplex64ToError
}

var (
	zero_of_WorkOfComplex64ToError       WorkOfComplex64ToError
	zero_of_WorkOfComplex64ToError_Value complex64
	pool_of_WorkOfComplex64ToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToError{}
		},
	}
)

func getWorkOfComplex64ToError() *WorkOfComplex64ToError {
	return pool_of_WorkOfComplex64ToError.Get().(*WorkOfComplex64ToError)
}
func putWorkOfComplex64ToError(d *WorkOfComplex64ToError) {
	d.Value = zero_of_WorkOfComplex64ToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToError.Put(d)
}

type _Complex64ToError struct{}

func (_ _Complex64ToError) GetWork() *WorkOfComplex64ToError {
	return getWorkOfComplex64ToError()
}
func (__ _Complex64ToError) GetWorkWith(value complex64, returnCh chan<- *ReturnOfError) *WorkOfComplex64ToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToError) PutWork(d *WorkOfComplex64ToError) {
	putWorkOfComplex64ToError(d)
}

func (_ _Complex64ToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _Complex64ToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _Complex64ToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _Complex64ToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _Complex64ToError) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToError) CallAsync(ctx context.Context, work *WorkOfComplex64ToError, h func(ctx context.Context, arg complex64) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToFloat32 interface {
	Push(ctx context.Context, work *WorkOfComplex64ToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfComplex64ToFloat32 struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfComplex64ToFloat32WithContext struct {
	Context context.Context
	WorkOfComplex64ToFloat32
}

var (
	zero_of_WorkOfComplex64ToFloat32       WorkOfComplex64ToFloat32
	zero_of_WorkOfComplex64ToFloat32_Value complex64
	pool_of_WorkOfComplex64ToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToFloat32{}
		},
	}
)

func getWorkOfComplex64ToFloat32() *WorkOfComplex64ToFloat32 {
	return pool_of_WorkOfComplex64ToFloat32.Get().(*WorkOfComplex64ToFloat32)
}
func putWorkOfComplex64ToFloat32(d *WorkOfComplex64ToFloat32) {
	d.Value = zero_of_WorkOfComplex64ToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToFloat32.Put(d)
}

type _Complex64ToFloat32 struct{}

func (_ _Complex64ToFloat32) GetWork() *WorkOfComplex64ToFloat32 {
	return getWorkOfComplex64ToFloat32()
}
func (__ _Complex64ToFloat32) GetWorkWith(value complex64, returnCh chan<- *ReturnOfFloat32) *WorkOfComplex64ToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToFloat32) PutWork(d *WorkOfComplex64ToFloat32) {
	putWorkOfComplex64ToFloat32(d)
}

func (_ _Complex64ToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _Complex64ToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _Complex64ToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _Complex64ToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _Complex64ToFloat32) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToFloat32) CallAsync(ctx context.Context, work *WorkOfComplex64ToFloat32, h func(ctx context.Context, arg complex64) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToFloat64 interface {
	Push(ctx context.Context, work *WorkOfComplex64ToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfComplex64ToFloat64 struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfComplex64ToFloat64WithContext struct {
	Context context.Context
	WorkOfComplex64ToFloat64
}

var (
	zero_of_WorkOfComplex64ToFloat64       WorkOfComplex64ToFloat64
	zero_of_WorkOfComplex64ToFloat64_Value complex64
	pool_of_WorkOfComplex64ToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToFloat64{}
		},
	}
)

func getWorkOfComplex64ToFloat64() *WorkOfComplex64ToFloat64 {
	return pool_of_WorkOfComplex64ToFloat64.Get().(*WorkOfComplex64ToFloat64)
}
func putWorkOfComplex64ToFloat64(d *WorkOfComplex64ToFloat64) {
	d.Value = zero_of_WorkOfComplex64ToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToFloat64.Put(d)
}

type _Complex64ToFloat64 struct{}

func (_ _Complex64ToFloat64) GetWork() *WorkOfComplex64ToFloat64 {
	return getWorkOfComplex64ToFloat64()
}
func (__ _Complex64ToFloat64) GetWorkWith(value complex64, returnCh chan<- *ReturnOfFloat64) *WorkOfComplex64ToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToFloat64) PutWork(d *WorkOfComplex64ToFloat64) {
	putWorkOfComplex64ToFloat64(d)
}

func (_ _Complex64ToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _Complex64ToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _Complex64ToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _Complex64ToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _Complex64ToFloat64) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToFloat64) CallAsync(ctx context.Context, work *WorkOfComplex64ToFloat64, h func(ctx context.Context, arg complex64) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToInt interface {
	Push(ctx context.Context, work *WorkOfComplex64ToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfComplex64ToInt struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfComplex64ToIntWithContext struct {
	Context context.Context
	WorkOfComplex64ToInt
}

var (
	zero_of_WorkOfComplex64ToInt       WorkOfComplex64ToInt
	zero_of_WorkOfComplex64ToInt_Value complex64
	pool_of_WorkOfComplex64ToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToInt{}
		},
	}
)

func getWorkOfComplex64ToInt() *WorkOfComplex64ToInt {
	return pool_of_WorkOfComplex64ToInt.Get().(*WorkOfComplex64ToInt)
}
func putWorkOfComplex64ToInt(d *WorkOfComplex64ToInt) {
	d.Value = zero_of_WorkOfComplex64ToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToInt.Put(d)
}

type _Complex64ToInt struct{}

func (_ _Complex64ToInt) GetWork() *WorkOfComplex64ToInt {
	return getWorkOfComplex64ToInt()
}
func (__ _Complex64ToInt) GetWorkWith(value complex64, returnCh chan<- *ReturnOfInt) *WorkOfComplex64ToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToInt) PutWork(d *WorkOfComplex64ToInt) {
	putWorkOfComplex64ToInt(d)
}

func (_ _Complex64ToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _Complex64ToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _Complex64ToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _Complex64ToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _Complex64ToInt) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToInt) CallAsync(ctx context.Context, work *WorkOfComplex64ToInt, h func(ctx context.Context, arg complex64) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToInt16 interface {
	Push(ctx context.Context, work *WorkOfComplex64ToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfComplex64ToInt16 struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfComplex64ToInt16WithContext struct {
	Context context.Context
	WorkOfComplex64ToInt16
}

var (
	zero_of_WorkOfComplex64ToInt16       WorkOfComplex64ToInt16
	zero_of_WorkOfComplex64ToInt16_Value complex64
	pool_of_WorkOfComplex64ToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToInt16{}
		},
	}
)

func getWorkOfComplex64ToInt16() *WorkOfComplex64ToInt16 {
	return pool_of_WorkOfComplex64ToInt16.Get().(*WorkOfComplex64ToInt16)
}
func putWorkOfComplex64ToInt16(d *WorkOfComplex64ToInt16) {
	d.Value = zero_of_WorkOfComplex64ToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToInt16.Put(d)
}

type _Complex64ToInt16 struct{}

func (_ _Complex64ToInt16) GetWork() *WorkOfComplex64ToInt16 {
	return getWorkOfComplex64ToInt16()
}
func (__ _Complex64ToInt16) GetWorkWith(value complex64, returnCh chan<- *ReturnOfInt16) *WorkOfComplex64ToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToInt16) PutWork(d *WorkOfComplex64ToInt16) {
	putWorkOfComplex64ToInt16(d)
}

func (_ _Complex64ToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _Complex64ToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _Complex64ToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _Complex64ToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _Complex64ToInt16) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToInt16) CallAsync(ctx context.Context, work *WorkOfComplex64ToInt16, h func(ctx context.Context, arg complex64) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToInt32 interface {
	Push(ctx context.Context, work *WorkOfComplex64ToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfComplex64ToInt32 struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfComplex64ToInt32WithContext struct {
	Context context.Context
	WorkOfComplex64ToInt32
}

var (
	zero_of_WorkOfComplex64ToInt32       WorkOfComplex64ToInt32
	zero_of_WorkOfComplex64ToInt32_Value complex64
	pool_of_WorkOfComplex64ToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToInt32{}
		},
	}
)

func getWorkOfComplex64ToInt32() *WorkOfComplex64ToInt32 {
	return pool_of_WorkOfComplex64ToInt32.Get().(*WorkOfComplex64ToInt32)
}
func putWorkOfComplex64ToInt32(d *WorkOfComplex64ToInt32) {
	d.Value = zero_of_WorkOfComplex64ToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToInt32.Put(d)
}

type _Complex64ToInt32 struct{}

func (_ _Complex64ToInt32) GetWork() *WorkOfComplex64ToInt32 {
	return getWorkOfComplex64ToInt32()
}
func (__ _Complex64ToInt32) GetWorkWith(value complex64, returnCh chan<- *ReturnOfInt32) *WorkOfComplex64ToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToInt32) PutWork(d *WorkOfComplex64ToInt32) {
	putWorkOfComplex64ToInt32(d)
}

func (_ _Complex64ToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _Complex64ToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _Complex64ToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _Complex64ToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _Complex64ToInt32) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToInt32) CallAsync(ctx context.Context, work *WorkOfComplex64ToInt32, h func(ctx context.Context, arg complex64) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToInt64 interface {
	Push(ctx context.Context, work *WorkOfComplex64ToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfComplex64ToInt64 struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfComplex64ToInt64WithContext struct {
	Context context.Context
	WorkOfComplex64ToInt64
}

var (
	zero_of_WorkOfComplex64ToInt64       WorkOfComplex64ToInt64
	zero_of_WorkOfComplex64ToInt64_Value complex64
	pool_of_WorkOfComplex64ToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToInt64{}
		},
	}
)

func getWorkOfComplex64ToInt64() *WorkOfComplex64ToInt64 {
	return pool_of_WorkOfComplex64ToInt64.Get().(*WorkOfComplex64ToInt64)
}
func putWorkOfComplex64ToInt64(d *WorkOfComplex64ToInt64) {
	d.Value = zero_of_WorkOfComplex64ToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToInt64.Put(d)
}

type _Complex64ToInt64 struct{}

func (_ _Complex64ToInt64) GetWork() *WorkOfComplex64ToInt64 {
	return getWorkOfComplex64ToInt64()
}
func (__ _Complex64ToInt64) GetWorkWith(value complex64, returnCh chan<- *ReturnOfInt64) *WorkOfComplex64ToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToInt64) PutWork(d *WorkOfComplex64ToInt64) {
	putWorkOfComplex64ToInt64(d)
}

func (_ _Complex64ToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _Complex64ToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _Complex64ToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _Complex64ToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _Complex64ToInt64) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToInt64) CallAsync(ctx context.Context, work *WorkOfComplex64ToInt64, h func(ctx context.Context, arg complex64) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToInt8 interface {
	Push(ctx context.Context, work *WorkOfComplex64ToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfComplex64ToInt8 struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfComplex64ToInt8WithContext struct {
	Context context.Context
	WorkOfComplex64ToInt8
}

var (
	zero_of_WorkOfComplex64ToInt8       WorkOfComplex64ToInt8
	zero_of_WorkOfComplex64ToInt8_Value complex64
	pool_of_WorkOfComplex64ToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToInt8{}
		},
	}
)

func getWorkOfComplex64ToInt8() *WorkOfComplex64ToInt8 {
	return pool_of_WorkOfComplex64ToInt8.Get().(*WorkOfComplex64ToInt8)
}
func putWorkOfComplex64ToInt8(d *WorkOfComplex64ToInt8) {
	d.Value = zero_of_WorkOfComplex64ToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToInt8.Put(d)
}

type _Complex64ToInt8 struct{}

func (_ _Complex64ToInt8) GetWork() *WorkOfComplex64ToInt8 {
	return getWorkOfComplex64ToInt8()
}
func (__ _Complex64ToInt8) GetWorkWith(value complex64, returnCh chan<- *ReturnOfInt8) *WorkOfComplex64ToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToInt8) PutWork(d *WorkOfComplex64ToInt8) {
	putWorkOfComplex64ToInt8(d)
}

func (_ _Complex64ToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _Complex64ToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _Complex64ToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _Complex64ToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _Complex64ToInt8) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToInt8) CallAsync(ctx context.Context, work *WorkOfComplex64ToInt8, h func(ctx context.Context, arg complex64) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToRune interface {
	Push(ctx context.Context, work *WorkOfComplex64ToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfComplex64ToRune struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfComplex64ToRuneWithContext struct {
	Context context.Context
	WorkOfComplex64ToRune
}

var (
	zero_of_WorkOfComplex64ToRune       WorkOfComplex64ToRune
	zero_of_WorkOfComplex64ToRune_Value complex64
	pool_of_WorkOfComplex64ToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToRune{}
		},
	}
)

func getWorkOfComplex64ToRune() *WorkOfComplex64ToRune {
	return pool_of_WorkOfComplex64ToRune.Get().(*WorkOfComplex64ToRune)
}
func putWorkOfComplex64ToRune(d *WorkOfComplex64ToRune) {
	d.Value = zero_of_WorkOfComplex64ToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToRune.Put(d)
}

type _Complex64ToRune struct{}

func (_ _Complex64ToRune) GetWork() *WorkOfComplex64ToRune {
	return getWorkOfComplex64ToRune()
}
func (__ _Complex64ToRune) GetWorkWith(value complex64, returnCh chan<- *ReturnOfRune) *WorkOfComplex64ToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToRune) PutWork(d *WorkOfComplex64ToRune) {
	putWorkOfComplex64ToRune(d)
}

func (_ _Complex64ToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _Complex64ToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _Complex64ToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _Complex64ToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _Complex64ToRune) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToRune) CallAsync(ctx context.Context, work *WorkOfComplex64ToRune, h func(ctx context.Context, arg complex64) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToString interface {
	Push(ctx context.Context, work *WorkOfComplex64ToString, returnCh chan<- *ReturnOfString)
}

type WorkOfComplex64ToString struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfString
}

type WorkOfComplex64ToStringWithContext struct {
	Context context.Context
	WorkOfComplex64ToString
}

var (
	zero_of_WorkOfComplex64ToString       WorkOfComplex64ToString
	zero_of_WorkOfComplex64ToString_Value complex64
	pool_of_WorkOfComplex64ToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToString{}
		},
	}
)

func getWorkOfComplex64ToString() *WorkOfComplex64ToString {
	return pool_of_WorkOfComplex64ToString.Get().(*WorkOfComplex64ToString)
}
func putWorkOfComplex64ToString(d *WorkOfComplex64ToString) {
	d.Value = zero_of_WorkOfComplex64ToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToString.Put(d)
}

type _Complex64ToString struct{}

func (_ _Complex64ToString) GetWork() *WorkOfComplex64ToString {
	return getWorkOfComplex64ToString()
}
func (__ _Complex64ToString) GetWorkWith(value complex64, returnCh chan<- *ReturnOfString) *WorkOfComplex64ToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToString) PutWork(d *WorkOfComplex64ToString) {
	putWorkOfComplex64ToString(d)
}

func (_ _Complex64ToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _Complex64ToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _Complex64ToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _Complex64ToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _Complex64ToString) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToString) CallAsync(ctx context.Context, work *WorkOfComplex64ToString, h func(ctx context.Context, arg complex64) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToUint interface {
	Push(ctx context.Context, work *WorkOfComplex64ToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfComplex64ToUint struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfComplex64ToUintWithContext struct {
	Context context.Context
	WorkOfComplex64ToUint
}

var (
	zero_of_WorkOfComplex64ToUint       WorkOfComplex64ToUint
	zero_of_WorkOfComplex64ToUint_Value complex64
	pool_of_WorkOfComplex64ToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToUint{}
		},
	}
)

func getWorkOfComplex64ToUint() *WorkOfComplex64ToUint {
	return pool_of_WorkOfComplex64ToUint.Get().(*WorkOfComplex64ToUint)
}
func putWorkOfComplex64ToUint(d *WorkOfComplex64ToUint) {
	d.Value = zero_of_WorkOfComplex64ToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToUint.Put(d)
}

type _Complex64ToUint struct{}

func (_ _Complex64ToUint) GetWork() *WorkOfComplex64ToUint {
	return getWorkOfComplex64ToUint()
}
func (__ _Complex64ToUint) GetWorkWith(value complex64, returnCh chan<- *ReturnOfUint) *WorkOfComplex64ToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToUint) PutWork(d *WorkOfComplex64ToUint) {
	putWorkOfComplex64ToUint(d)
}

func (_ _Complex64ToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _Complex64ToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _Complex64ToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _Complex64ToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _Complex64ToUint) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToUint) CallAsync(ctx context.Context, work *WorkOfComplex64ToUint, h func(ctx context.Context, arg complex64) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToUint16 interface {
	Push(ctx context.Context, work *WorkOfComplex64ToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfComplex64ToUint16 struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfComplex64ToUint16WithContext struct {
	Context context.Context
	WorkOfComplex64ToUint16
}

var (
	zero_of_WorkOfComplex64ToUint16       WorkOfComplex64ToUint16
	zero_of_WorkOfComplex64ToUint16_Value complex64
	pool_of_WorkOfComplex64ToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToUint16{}
		},
	}
)

func getWorkOfComplex64ToUint16() *WorkOfComplex64ToUint16 {
	return pool_of_WorkOfComplex64ToUint16.Get().(*WorkOfComplex64ToUint16)
}
func putWorkOfComplex64ToUint16(d *WorkOfComplex64ToUint16) {
	d.Value = zero_of_WorkOfComplex64ToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToUint16.Put(d)
}

type _Complex64ToUint16 struct{}

func (_ _Complex64ToUint16) GetWork() *WorkOfComplex64ToUint16 {
	return getWorkOfComplex64ToUint16()
}
func (__ _Complex64ToUint16) GetWorkWith(value complex64, returnCh chan<- *ReturnOfUint16) *WorkOfComplex64ToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToUint16) PutWork(d *WorkOfComplex64ToUint16) {
	putWorkOfComplex64ToUint16(d)
}

func (_ _Complex64ToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _Complex64ToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _Complex64ToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _Complex64ToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _Complex64ToUint16) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToUint16) CallAsync(ctx context.Context, work *WorkOfComplex64ToUint16, h func(ctx context.Context, arg complex64) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToUint32 interface {
	Push(ctx context.Context, work *WorkOfComplex64ToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfComplex64ToUint32 struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfComplex64ToUint32WithContext struct {
	Context context.Context
	WorkOfComplex64ToUint32
}

var (
	zero_of_WorkOfComplex64ToUint32       WorkOfComplex64ToUint32
	zero_of_WorkOfComplex64ToUint32_Value complex64
	pool_of_WorkOfComplex64ToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToUint32{}
		},
	}
)

func getWorkOfComplex64ToUint32() *WorkOfComplex64ToUint32 {
	return pool_of_WorkOfComplex64ToUint32.Get().(*WorkOfComplex64ToUint32)
}
func putWorkOfComplex64ToUint32(d *WorkOfComplex64ToUint32) {
	d.Value = zero_of_WorkOfComplex64ToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToUint32.Put(d)
}

type _Complex64ToUint32 struct{}

func (_ _Complex64ToUint32) GetWork() *WorkOfComplex64ToUint32 {
	return getWorkOfComplex64ToUint32()
}
func (__ _Complex64ToUint32) GetWorkWith(value complex64, returnCh chan<- *ReturnOfUint32) *WorkOfComplex64ToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToUint32) PutWork(d *WorkOfComplex64ToUint32) {
	putWorkOfComplex64ToUint32(d)
}

func (_ _Complex64ToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _Complex64ToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _Complex64ToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _Complex64ToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _Complex64ToUint32) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToUint32) CallAsync(ctx context.Context, work *WorkOfComplex64ToUint32, h func(ctx context.Context, arg complex64) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToUint64 interface {
	Push(ctx context.Context, work *WorkOfComplex64ToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfComplex64ToUint64 struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfComplex64ToUint64WithContext struct {
	Context context.Context
	WorkOfComplex64ToUint64
}

var (
	zero_of_WorkOfComplex64ToUint64       WorkOfComplex64ToUint64
	zero_of_WorkOfComplex64ToUint64_Value complex64
	pool_of_WorkOfComplex64ToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToUint64{}
		},
	}
)

func getWorkOfComplex64ToUint64() *WorkOfComplex64ToUint64 {
	return pool_of_WorkOfComplex64ToUint64.Get().(*WorkOfComplex64ToUint64)
}
func putWorkOfComplex64ToUint64(d *WorkOfComplex64ToUint64) {
	d.Value = zero_of_WorkOfComplex64ToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToUint64.Put(d)
}

type _Complex64ToUint64 struct{}

func (_ _Complex64ToUint64) GetWork() *WorkOfComplex64ToUint64 {
	return getWorkOfComplex64ToUint64()
}
func (__ _Complex64ToUint64) GetWorkWith(value complex64, returnCh chan<- *ReturnOfUint64) *WorkOfComplex64ToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToUint64) PutWork(d *WorkOfComplex64ToUint64) {
	putWorkOfComplex64ToUint64(d)
}

func (_ _Complex64ToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _Complex64ToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _Complex64ToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _Complex64ToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _Complex64ToUint64) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToUint64) CallAsync(ctx context.Context, work *WorkOfComplex64ToUint64, h func(ctx context.Context, arg complex64) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToUint8 interface {
	Push(ctx context.Context, work *WorkOfComplex64ToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfComplex64ToUint8 struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfComplex64ToUint8WithContext struct {
	Context context.Context
	WorkOfComplex64ToUint8
}

var (
	zero_of_WorkOfComplex64ToUint8       WorkOfComplex64ToUint8
	zero_of_WorkOfComplex64ToUint8_Value complex64
	pool_of_WorkOfComplex64ToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToUint8{}
		},
	}
)

func getWorkOfComplex64ToUint8() *WorkOfComplex64ToUint8 {
	return pool_of_WorkOfComplex64ToUint8.Get().(*WorkOfComplex64ToUint8)
}
func putWorkOfComplex64ToUint8(d *WorkOfComplex64ToUint8) {
	d.Value = zero_of_WorkOfComplex64ToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToUint8.Put(d)
}

type _Complex64ToUint8 struct{}

func (_ _Complex64ToUint8) GetWork() *WorkOfComplex64ToUint8 {
	return getWorkOfComplex64ToUint8()
}
func (__ _Complex64ToUint8) GetWorkWith(value complex64, returnCh chan<- *ReturnOfUint8) *WorkOfComplex64ToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToUint8) PutWork(d *WorkOfComplex64ToUint8) {
	putWorkOfComplex64ToUint8(d)
}

func (_ _Complex64ToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _Complex64ToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _Complex64ToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _Complex64ToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _Complex64ToUint8) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToUint8) CallAsync(ctx context.Context, work *WorkOfComplex64ToUint8, h func(ctx context.Context, arg complex64) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToUintptr interface {
	Push(ctx context.Context, work *WorkOfComplex64ToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfComplex64ToUintptr struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfComplex64ToUintptrWithContext struct {
	Context context.Context
	WorkOfComplex64ToUintptr
}

var (
	zero_of_WorkOfComplex64ToUintptr       WorkOfComplex64ToUintptr
	zero_of_WorkOfComplex64ToUintptr_Value complex64
	pool_of_WorkOfComplex64ToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToUintptr{}
		},
	}
)

func getWorkOfComplex64ToUintptr() *WorkOfComplex64ToUintptr {
	return pool_of_WorkOfComplex64ToUintptr.Get().(*WorkOfComplex64ToUintptr)
}
func putWorkOfComplex64ToUintptr(d *WorkOfComplex64ToUintptr) {
	d.Value = zero_of_WorkOfComplex64ToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToUintptr.Put(d)
}

type _Complex64ToUintptr struct{}

func (_ _Complex64ToUintptr) GetWork() *WorkOfComplex64ToUintptr {
	return getWorkOfComplex64ToUintptr()
}
func (__ _Complex64ToUintptr) GetWorkWith(value complex64, returnCh chan<- *ReturnOfUintptr) *WorkOfComplex64ToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToUintptr) PutWork(d *WorkOfComplex64ToUintptr) {
	putWorkOfComplex64ToUintptr(d)
}

func (_ _Complex64ToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _Complex64ToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _Complex64ToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _Complex64ToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _Complex64ToUintptr) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToUintptr) CallAsync(ctx context.Context, work *WorkOfComplex64ToUintptr, h func(ctx context.Context, arg complex64) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToBytes interface {
	Push(ctx context.Context, work *WorkOfComplex64ToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfComplex64ToBytes struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfComplex64ToBytesWithContext struct {
	Context context.Context
	WorkOfComplex64ToBytes
}

var (
	zero_of_WorkOfComplex64ToBytes       WorkOfComplex64ToBytes
	zero_of_WorkOfComplex64ToBytes_Value complex64
	pool_of_WorkOfComplex64ToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToBytes{}
		},
	}
)

func getWorkOfComplex64ToBytes() *WorkOfComplex64ToBytes {
	return pool_of_WorkOfComplex64ToBytes.Get().(*WorkOfComplex64ToBytes)
}
func putWorkOfComplex64ToBytes(d *WorkOfComplex64ToBytes) {
	d.Value = zero_of_WorkOfComplex64ToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToBytes.Put(d)
}

type _Complex64ToBytes struct{}

func (_ _Complex64ToBytes) GetWork() *WorkOfComplex64ToBytes {
	return getWorkOfComplex64ToBytes()
}
func (__ _Complex64ToBytes) GetWorkWith(value complex64, returnCh chan<- *ReturnOfBytes) *WorkOfComplex64ToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToBytes) PutWork(d *WorkOfComplex64ToBytes) {
	putWorkOfComplex64ToBytes(d)
}

func (_ _Complex64ToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _Complex64ToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _Complex64ToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _Complex64ToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _Complex64ToBytes) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToBytes) CallAsync(ctx context.Context, work *WorkOfComplex64ToBytes, h func(ctx context.Context, arg complex64) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfComplex64ToInterface interface {
	Push(ctx context.Context, work *WorkOfComplex64ToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfComplex64ToInterface struct {
	Value    complex64
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfComplex64ToInterfaceWithContext struct {
	Context context.Context
	WorkOfComplex64ToInterface
}

var (
	zero_of_WorkOfComplex64ToInterface       WorkOfComplex64ToInterface
	zero_of_WorkOfComplex64ToInterface_Value complex64
	pool_of_WorkOfComplex64ToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfComplex64ToInterface{}
		},
	}
)

func getWorkOfComplex64ToInterface() *WorkOfComplex64ToInterface {
	return pool_of_WorkOfComplex64ToInterface.Get().(*WorkOfComplex64ToInterface)
}
func putWorkOfComplex64ToInterface(d *WorkOfComplex64ToInterface) {
	d.Value = zero_of_WorkOfComplex64ToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfComplex64ToInterface.Put(d)
}

type _Complex64ToInterface struct{}

func (_ _Complex64ToInterface) GetWork() *WorkOfComplex64ToInterface {
	return getWorkOfComplex64ToInterface()
}
func (__ _Complex64ToInterface) GetWorkWith(value complex64, returnCh chan<- *ReturnOfInterface) *WorkOfComplex64ToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Complex64ToInterface) PutWork(d *WorkOfComplex64ToInterface) {
	putWorkOfComplex64ToInterface(d)
}

func (_ _Complex64ToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _Complex64ToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Complex64ToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _Complex64ToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _Complex64ToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _Complex64ToInterface) CallSync(ctx context.Context, value complex64, push func(ctx context.Context, work *WorkOfComplex64ToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Complex64ToInterface) CallAsync(ctx context.Context, work *WorkOfComplex64ToInterface, h func(ctx context.Context, arg complex64) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToBool interface {
	Push(ctx context.Context, work *WorkOfErrorToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfErrorToBool struct {
	Value    error
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfErrorToBoolWithContext struct {
	Context context.Context
	WorkOfErrorToBool
}

var (
	zero_of_WorkOfErrorToBool       WorkOfErrorToBool
	zero_of_WorkOfErrorToBool_Value error
	pool_of_WorkOfErrorToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToBool{}
		},
	}
)

func getWorkOfErrorToBool() *WorkOfErrorToBool {
	return pool_of_WorkOfErrorToBool.Get().(*WorkOfErrorToBool)
}
func putWorkOfErrorToBool(d *WorkOfErrorToBool) {
	d.Value = zero_of_WorkOfErrorToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToBool.Put(d)
}

type _ErrorToBool struct{}

func (_ _ErrorToBool) GetWork() *WorkOfErrorToBool {
	return getWorkOfErrorToBool()
}
func (__ _ErrorToBool) GetWorkWith(value error, returnCh chan<- *ReturnOfBool) *WorkOfErrorToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToBool) PutWork(d *WorkOfErrorToBool) {
	putWorkOfErrorToBool(d)
}

func (_ _ErrorToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _ErrorToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _ErrorToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _ErrorToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _ErrorToBool) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToBool) CallAsync(ctx context.Context, work *WorkOfErrorToBool, h func(ctx context.Context, arg error) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToByte interface {
	Push(ctx context.Context, work *WorkOfErrorToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfErrorToByte struct {
	Value    error
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfErrorToByteWithContext struct {
	Context context.Context
	WorkOfErrorToByte
}

var (
	zero_of_WorkOfErrorToByte       WorkOfErrorToByte
	zero_of_WorkOfErrorToByte_Value error
	pool_of_WorkOfErrorToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToByte{}
		},
	}
)

func getWorkOfErrorToByte() *WorkOfErrorToByte {
	return pool_of_WorkOfErrorToByte.Get().(*WorkOfErrorToByte)
}
func putWorkOfErrorToByte(d *WorkOfErrorToByte) {
	d.Value = zero_of_WorkOfErrorToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToByte.Put(d)
}

type _ErrorToByte struct{}

func (_ _ErrorToByte) GetWork() *WorkOfErrorToByte {
	return getWorkOfErrorToByte()
}
func (__ _ErrorToByte) GetWorkWith(value error, returnCh chan<- *ReturnOfByte) *WorkOfErrorToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToByte) PutWork(d *WorkOfErrorToByte) {
	putWorkOfErrorToByte(d)
}

func (_ _ErrorToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _ErrorToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _ErrorToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _ErrorToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _ErrorToByte) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToByte) CallAsync(ctx context.Context, work *WorkOfErrorToByte, h func(ctx context.Context, arg error) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToComplex128 interface {
	Push(ctx context.Context, work *WorkOfErrorToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfErrorToComplex128 struct {
	Value    error
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfErrorToComplex128WithContext struct {
	Context context.Context
	WorkOfErrorToComplex128
}

var (
	zero_of_WorkOfErrorToComplex128       WorkOfErrorToComplex128
	zero_of_WorkOfErrorToComplex128_Value error
	pool_of_WorkOfErrorToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToComplex128{}
		},
	}
)

func getWorkOfErrorToComplex128() *WorkOfErrorToComplex128 {
	return pool_of_WorkOfErrorToComplex128.Get().(*WorkOfErrorToComplex128)
}
func putWorkOfErrorToComplex128(d *WorkOfErrorToComplex128) {
	d.Value = zero_of_WorkOfErrorToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToComplex128.Put(d)
}

type _ErrorToComplex128 struct{}

func (_ _ErrorToComplex128) GetWork() *WorkOfErrorToComplex128 {
	return getWorkOfErrorToComplex128()
}
func (__ _ErrorToComplex128) GetWorkWith(value error, returnCh chan<- *ReturnOfComplex128) *WorkOfErrorToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToComplex128) PutWork(d *WorkOfErrorToComplex128) {
	putWorkOfErrorToComplex128(d)
}

func (_ _ErrorToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _ErrorToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _ErrorToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _ErrorToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _ErrorToComplex128) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToComplex128) CallAsync(ctx context.Context, work *WorkOfErrorToComplex128, h func(ctx context.Context, arg error) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToComplex64 interface {
	Push(ctx context.Context, work *WorkOfErrorToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfErrorToComplex64 struct {
	Value    error
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfErrorToComplex64WithContext struct {
	Context context.Context
	WorkOfErrorToComplex64
}

var (
	zero_of_WorkOfErrorToComplex64       WorkOfErrorToComplex64
	zero_of_WorkOfErrorToComplex64_Value error
	pool_of_WorkOfErrorToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToComplex64{}
		},
	}
)

func getWorkOfErrorToComplex64() *WorkOfErrorToComplex64 {
	return pool_of_WorkOfErrorToComplex64.Get().(*WorkOfErrorToComplex64)
}
func putWorkOfErrorToComplex64(d *WorkOfErrorToComplex64) {
	d.Value = zero_of_WorkOfErrorToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToComplex64.Put(d)
}

type _ErrorToComplex64 struct{}

func (_ _ErrorToComplex64) GetWork() *WorkOfErrorToComplex64 {
	return getWorkOfErrorToComplex64()
}
func (__ _ErrorToComplex64) GetWorkWith(value error, returnCh chan<- *ReturnOfComplex64) *WorkOfErrorToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToComplex64) PutWork(d *WorkOfErrorToComplex64) {
	putWorkOfErrorToComplex64(d)
}

func (_ _ErrorToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _ErrorToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _ErrorToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _ErrorToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _ErrorToComplex64) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToComplex64) CallAsync(ctx context.Context, work *WorkOfErrorToComplex64, h func(ctx context.Context, arg error) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToError interface {
	Push(ctx context.Context, work *WorkOfErrorToError, returnCh chan<- *ReturnOfError)
}

type WorkOfErrorToError struct {
	Value    error
	ReturnCh chan<- *ReturnOfError
}

type WorkOfErrorToErrorWithContext struct {
	Context context.Context
	WorkOfErrorToError
}

var (
	zero_of_WorkOfErrorToError       WorkOfErrorToError
	zero_of_WorkOfErrorToError_Value error
	pool_of_WorkOfErrorToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToError{}
		},
	}
)

func getWorkOfErrorToError() *WorkOfErrorToError {
	return pool_of_WorkOfErrorToError.Get().(*WorkOfErrorToError)
}
func putWorkOfErrorToError(d *WorkOfErrorToError) {
	d.Value = zero_of_WorkOfErrorToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToError.Put(d)
}

type _ErrorToError struct{}

func (_ _ErrorToError) GetWork() *WorkOfErrorToError {
	return getWorkOfErrorToError()
}
func (__ _ErrorToError) GetWorkWith(value error, returnCh chan<- *ReturnOfError) *WorkOfErrorToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToError) PutWork(d *WorkOfErrorToError) {
	putWorkOfErrorToError(d)
}

func (_ _ErrorToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _ErrorToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _ErrorToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _ErrorToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _ErrorToError) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToError) CallAsync(ctx context.Context, work *WorkOfErrorToError, h func(ctx context.Context, arg error) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToFloat32 interface {
	Push(ctx context.Context, work *WorkOfErrorToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfErrorToFloat32 struct {
	Value    error
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfErrorToFloat32WithContext struct {
	Context context.Context
	WorkOfErrorToFloat32
}

var (
	zero_of_WorkOfErrorToFloat32       WorkOfErrorToFloat32
	zero_of_WorkOfErrorToFloat32_Value error
	pool_of_WorkOfErrorToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToFloat32{}
		},
	}
)

func getWorkOfErrorToFloat32() *WorkOfErrorToFloat32 {
	return pool_of_WorkOfErrorToFloat32.Get().(*WorkOfErrorToFloat32)
}
func putWorkOfErrorToFloat32(d *WorkOfErrorToFloat32) {
	d.Value = zero_of_WorkOfErrorToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToFloat32.Put(d)
}

type _ErrorToFloat32 struct{}

func (_ _ErrorToFloat32) GetWork() *WorkOfErrorToFloat32 {
	return getWorkOfErrorToFloat32()
}
func (__ _ErrorToFloat32) GetWorkWith(value error, returnCh chan<- *ReturnOfFloat32) *WorkOfErrorToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToFloat32) PutWork(d *WorkOfErrorToFloat32) {
	putWorkOfErrorToFloat32(d)
}

func (_ _ErrorToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _ErrorToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _ErrorToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _ErrorToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _ErrorToFloat32) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToFloat32) CallAsync(ctx context.Context, work *WorkOfErrorToFloat32, h func(ctx context.Context, arg error) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToFloat64 interface {
	Push(ctx context.Context, work *WorkOfErrorToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfErrorToFloat64 struct {
	Value    error
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfErrorToFloat64WithContext struct {
	Context context.Context
	WorkOfErrorToFloat64
}

var (
	zero_of_WorkOfErrorToFloat64       WorkOfErrorToFloat64
	zero_of_WorkOfErrorToFloat64_Value error
	pool_of_WorkOfErrorToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToFloat64{}
		},
	}
)

func getWorkOfErrorToFloat64() *WorkOfErrorToFloat64 {
	return pool_of_WorkOfErrorToFloat64.Get().(*WorkOfErrorToFloat64)
}
func putWorkOfErrorToFloat64(d *WorkOfErrorToFloat64) {
	d.Value = zero_of_WorkOfErrorToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToFloat64.Put(d)
}

type _ErrorToFloat64 struct{}

func (_ _ErrorToFloat64) GetWork() *WorkOfErrorToFloat64 {
	return getWorkOfErrorToFloat64()
}
func (__ _ErrorToFloat64) GetWorkWith(value error, returnCh chan<- *ReturnOfFloat64) *WorkOfErrorToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToFloat64) PutWork(d *WorkOfErrorToFloat64) {
	putWorkOfErrorToFloat64(d)
}

func (_ _ErrorToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _ErrorToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _ErrorToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _ErrorToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _ErrorToFloat64) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToFloat64) CallAsync(ctx context.Context, work *WorkOfErrorToFloat64, h func(ctx context.Context, arg error) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToInt interface {
	Push(ctx context.Context, work *WorkOfErrorToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfErrorToInt struct {
	Value    error
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfErrorToIntWithContext struct {
	Context context.Context
	WorkOfErrorToInt
}

var (
	zero_of_WorkOfErrorToInt       WorkOfErrorToInt
	zero_of_WorkOfErrorToInt_Value error
	pool_of_WorkOfErrorToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToInt{}
		},
	}
)

func getWorkOfErrorToInt() *WorkOfErrorToInt {
	return pool_of_WorkOfErrorToInt.Get().(*WorkOfErrorToInt)
}
func putWorkOfErrorToInt(d *WorkOfErrorToInt) {
	d.Value = zero_of_WorkOfErrorToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToInt.Put(d)
}

type _ErrorToInt struct{}

func (_ _ErrorToInt) GetWork() *WorkOfErrorToInt {
	return getWorkOfErrorToInt()
}
func (__ _ErrorToInt) GetWorkWith(value error, returnCh chan<- *ReturnOfInt) *WorkOfErrorToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToInt) PutWork(d *WorkOfErrorToInt) {
	putWorkOfErrorToInt(d)
}

func (_ _ErrorToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _ErrorToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _ErrorToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _ErrorToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _ErrorToInt) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToInt) CallAsync(ctx context.Context, work *WorkOfErrorToInt, h func(ctx context.Context, arg error) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToInt16 interface {
	Push(ctx context.Context, work *WorkOfErrorToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfErrorToInt16 struct {
	Value    error
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfErrorToInt16WithContext struct {
	Context context.Context
	WorkOfErrorToInt16
}

var (
	zero_of_WorkOfErrorToInt16       WorkOfErrorToInt16
	zero_of_WorkOfErrorToInt16_Value error
	pool_of_WorkOfErrorToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToInt16{}
		},
	}
)

func getWorkOfErrorToInt16() *WorkOfErrorToInt16 {
	return pool_of_WorkOfErrorToInt16.Get().(*WorkOfErrorToInt16)
}
func putWorkOfErrorToInt16(d *WorkOfErrorToInt16) {
	d.Value = zero_of_WorkOfErrorToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToInt16.Put(d)
}

type _ErrorToInt16 struct{}

func (_ _ErrorToInt16) GetWork() *WorkOfErrorToInt16 {
	return getWorkOfErrorToInt16()
}
func (__ _ErrorToInt16) GetWorkWith(value error, returnCh chan<- *ReturnOfInt16) *WorkOfErrorToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToInt16) PutWork(d *WorkOfErrorToInt16) {
	putWorkOfErrorToInt16(d)
}

func (_ _ErrorToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _ErrorToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _ErrorToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _ErrorToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _ErrorToInt16) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToInt16) CallAsync(ctx context.Context, work *WorkOfErrorToInt16, h func(ctx context.Context, arg error) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToInt32 interface {
	Push(ctx context.Context, work *WorkOfErrorToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfErrorToInt32 struct {
	Value    error
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfErrorToInt32WithContext struct {
	Context context.Context
	WorkOfErrorToInt32
}

var (
	zero_of_WorkOfErrorToInt32       WorkOfErrorToInt32
	zero_of_WorkOfErrorToInt32_Value error
	pool_of_WorkOfErrorToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToInt32{}
		},
	}
)

func getWorkOfErrorToInt32() *WorkOfErrorToInt32 {
	return pool_of_WorkOfErrorToInt32.Get().(*WorkOfErrorToInt32)
}
func putWorkOfErrorToInt32(d *WorkOfErrorToInt32) {
	d.Value = zero_of_WorkOfErrorToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToInt32.Put(d)
}

type _ErrorToInt32 struct{}

func (_ _ErrorToInt32) GetWork() *WorkOfErrorToInt32 {
	return getWorkOfErrorToInt32()
}
func (__ _ErrorToInt32) GetWorkWith(value error, returnCh chan<- *ReturnOfInt32) *WorkOfErrorToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToInt32) PutWork(d *WorkOfErrorToInt32) {
	putWorkOfErrorToInt32(d)
}

func (_ _ErrorToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _ErrorToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _ErrorToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _ErrorToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _ErrorToInt32) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToInt32) CallAsync(ctx context.Context, work *WorkOfErrorToInt32, h func(ctx context.Context, arg error) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToInt64 interface {
	Push(ctx context.Context, work *WorkOfErrorToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfErrorToInt64 struct {
	Value    error
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfErrorToInt64WithContext struct {
	Context context.Context
	WorkOfErrorToInt64
}

var (
	zero_of_WorkOfErrorToInt64       WorkOfErrorToInt64
	zero_of_WorkOfErrorToInt64_Value error
	pool_of_WorkOfErrorToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToInt64{}
		},
	}
)

func getWorkOfErrorToInt64() *WorkOfErrorToInt64 {
	return pool_of_WorkOfErrorToInt64.Get().(*WorkOfErrorToInt64)
}
func putWorkOfErrorToInt64(d *WorkOfErrorToInt64) {
	d.Value = zero_of_WorkOfErrorToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToInt64.Put(d)
}

type _ErrorToInt64 struct{}

func (_ _ErrorToInt64) GetWork() *WorkOfErrorToInt64 {
	return getWorkOfErrorToInt64()
}
func (__ _ErrorToInt64) GetWorkWith(value error, returnCh chan<- *ReturnOfInt64) *WorkOfErrorToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToInt64) PutWork(d *WorkOfErrorToInt64) {
	putWorkOfErrorToInt64(d)
}

func (_ _ErrorToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _ErrorToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _ErrorToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _ErrorToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _ErrorToInt64) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToInt64) CallAsync(ctx context.Context, work *WorkOfErrorToInt64, h func(ctx context.Context, arg error) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToInt8 interface {
	Push(ctx context.Context, work *WorkOfErrorToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfErrorToInt8 struct {
	Value    error
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfErrorToInt8WithContext struct {
	Context context.Context
	WorkOfErrorToInt8
}

var (
	zero_of_WorkOfErrorToInt8       WorkOfErrorToInt8
	zero_of_WorkOfErrorToInt8_Value error
	pool_of_WorkOfErrorToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToInt8{}
		},
	}
)

func getWorkOfErrorToInt8() *WorkOfErrorToInt8 {
	return pool_of_WorkOfErrorToInt8.Get().(*WorkOfErrorToInt8)
}
func putWorkOfErrorToInt8(d *WorkOfErrorToInt8) {
	d.Value = zero_of_WorkOfErrorToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToInt8.Put(d)
}

type _ErrorToInt8 struct{}

func (_ _ErrorToInt8) GetWork() *WorkOfErrorToInt8 {
	return getWorkOfErrorToInt8()
}
func (__ _ErrorToInt8) GetWorkWith(value error, returnCh chan<- *ReturnOfInt8) *WorkOfErrorToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToInt8) PutWork(d *WorkOfErrorToInt8) {
	putWorkOfErrorToInt8(d)
}

func (_ _ErrorToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _ErrorToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _ErrorToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _ErrorToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _ErrorToInt8) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToInt8) CallAsync(ctx context.Context, work *WorkOfErrorToInt8, h func(ctx context.Context, arg error) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToRune interface {
	Push(ctx context.Context, work *WorkOfErrorToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfErrorToRune struct {
	Value    error
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfErrorToRuneWithContext struct {
	Context context.Context
	WorkOfErrorToRune
}

var (
	zero_of_WorkOfErrorToRune       WorkOfErrorToRune
	zero_of_WorkOfErrorToRune_Value error
	pool_of_WorkOfErrorToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToRune{}
		},
	}
)

func getWorkOfErrorToRune() *WorkOfErrorToRune {
	return pool_of_WorkOfErrorToRune.Get().(*WorkOfErrorToRune)
}
func putWorkOfErrorToRune(d *WorkOfErrorToRune) {
	d.Value = zero_of_WorkOfErrorToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToRune.Put(d)
}

type _ErrorToRune struct{}

func (_ _ErrorToRune) GetWork() *WorkOfErrorToRune {
	return getWorkOfErrorToRune()
}
func (__ _ErrorToRune) GetWorkWith(value error, returnCh chan<- *ReturnOfRune) *WorkOfErrorToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToRune) PutWork(d *WorkOfErrorToRune) {
	putWorkOfErrorToRune(d)
}

func (_ _ErrorToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _ErrorToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _ErrorToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _ErrorToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _ErrorToRune) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToRune) CallAsync(ctx context.Context, work *WorkOfErrorToRune, h func(ctx context.Context, arg error) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToString interface {
	Push(ctx context.Context, work *WorkOfErrorToString, returnCh chan<- *ReturnOfString)
}

type WorkOfErrorToString struct {
	Value    error
	ReturnCh chan<- *ReturnOfString
}

type WorkOfErrorToStringWithContext struct {
	Context context.Context
	WorkOfErrorToString
}

var (
	zero_of_WorkOfErrorToString       WorkOfErrorToString
	zero_of_WorkOfErrorToString_Value error
	pool_of_WorkOfErrorToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToString{}
		},
	}
)

func getWorkOfErrorToString() *WorkOfErrorToString {
	return pool_of_WorkOfErrorToString.Get().(*WorkOfErrorToString)
}
func putWorkOfErrorToString(d *WorkOfErrorToString) {
	d.Value = zero_of_WorkOfErrorToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToString.Put(d)
}

type _ErrorToString struct{}

func (_ _ErrorToString) GetWork() *WorkOfErrorToString {
	return getWorkOfErrorToString()
}
func (__ _ErrorToString) GetWorkWith(value error, returnCh chan<- *ReturnOfString) *WorkOfErrorToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToString) PutWork(d *WorkOfErrorToString) {
	putWorkOfErrorToString(d)
}

func (_ _ErrorToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _ErrorToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _ErrorToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _ErrorToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _ErrorToString) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToString) CallAsync(ctx context.Context, work *WorkOfErrorToString, h func(ctx context.Context, arg error) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToUint interface {
	Push(ctx context.Context, work *WorkOfErrorToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfErrorToUint struct {
	Value    error
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfErrorToUintWithContext struct {
	Context context.Context
	WorkOfErrorToUint
}

var (
	zero_of_WorkOfErrorToUint       WorkOfErrorToUint
	zero_of_WorkOfErrorToUint_Value error
	pool_of_WorkOfErrorToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToUint{}
		},
	}
)

func getWorkOfErrorToUint() *WorkOfErrorToUint {
	return pool_of_WorkOfErrorToUint.Get().(*WorkOfErrorToUint)
}
func putWorkOfErrorToUint(d *WorkOfErrorToUint) {
	d.Value = zero_of_WorkOfErrorToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToUint.Put(d)
}

type _ErrorToUint struct{}

func (_ _ErrorToUint) GetWork() *WorkOfErrorToUint {
	return getWorkOfErrorToUint()
}
func (__ _ErrorToUint) GetWorkWith(value error, returnCh chan<- *ReturnOfUint) *WorkOfErrorToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToUint) PutWork(d *WorkOfErrorToUint) {
	putWorkOfErrorToUint(d)
}

func (_ _ErrorToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _ErrorToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _ErrorToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _ErrorToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _ErrorToUint) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToUint) CallAsync(ctx context.Context, work *WorkOfErrorToUint, h func(ctx context.Context, arg error) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToUint16 interface {
	Push(ctx context.Context, work *WorkOfErrorToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfErrorToUint16 struct {
	Value    error
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfErrorToUint16WithContext struct {
	Context context.Context
	WorkOfErrorToUint16
}

var (
	zero_of_WorkOfErrorToUint16       WorkOfErrorToUint16
	zero_of_WorkOfErrorToUint16_Value error
	pool_of_WorkOfErrorToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToUint16{}
		},
	}
)

func getWorkOfErrorToUint16() *WorkOfErrorToUint16 {
	return pool_of_WorkOfErrorToUint16.Get().(*WorkOfErrorToUint16)
}
func putWorkOfErrorToUint16(d *WorkOfErrorToUint16) {
	d.Value = zero_of_WorkOfErrorToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToUint16.Put(d)
}

type _ErrorToUint16 struct{}

func (_ _ErrorToUint16) GetWork() *WorkOfErrorToUint16 {
	return getWorkOfErrorToUint16()
}
func (__ _ErrorToUint16) GetWorkWith(value error, returnCh chan<- *ReturnOfUint16) *WorkOfErrorToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToUint16) PutWork(d *WorkOfErrorToUint16) {
	putWorkOfErrorToUint16(d)
}

func (_ _ErrorToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _ErrorToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _ErrorToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _ErrorToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _ErrorToUint16) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToUint16) CallAsync(ctx context.Context, work *WorkOfErrorToUint16, h func(ctx context.Context, arg error) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToUint32 interface {
	Push(ctx context.Context, work *WorkOfErrorToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfErrorToUint32 struct {
	Value    error
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfErrorToUint32WithContext struct {
	Context context.Context
	WorkOfErrorToUint32
}

var (
	zero_of_WorkOfErrorToUint32       WorkOfErrorToUint32
	zero_of_WorkOfErrorToUint32_Value error
	pool_of_WorkOfErrorToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToUint32{}
		},
	}
)

func getWorkOfErrorToUint32() *WorkOfErrorToUint32 {
	return pool_of_WorkOfErrorToUint32.Get().(*WorkOfErrorToUint32)
}
func putWorkOfErrorToUint32(d *WorkOfErrorToUint32) {
	d.Value = zero_of_WorkOfErrorToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToUint32.Put(d)
}

type _ErrorToUint32 struct{}

func (_ _ErrorToUint32) GetWork() *WorkOfErrorToUint32 {
	return getWorkOfErrorToUint32()
}
func (__ _ErrorToUint32) GetWorkWith(value error, returnCh chan<- *ReturnOfUint32) *WorkOfErrorToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToUint32) PutWork(d *WorkOfErrorToUint32) {
	putWorkOfErrorToUint32(d)
}

func (_ _ErrorToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _ErrorToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _ErrorToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _ErrorToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _ErrorToUint32) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToUint32) CallAsync(ctx context.Context, work *WorkOfErrorToUint32, h func(ctx context.Context, arg error) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToUint64 interface {
	Push(ctx context.Context, work *WorkOfErrorToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfErrorToUint64 struct {
	Value    error
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfErrorToUint64WithContext struct {
	Context context.Context
	WorkOfErrorToUint64
}

var (
	zero_of_WorkOfErrorToUint64       WorkOfErrorToUint64
	zero_of_WorkOfErrorToUint64_Value error
	pool_of_WorkOfErrorToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToUint64{}
		},
	}
)

func getWorkOfErrorToUint64() *WorkOfErrorToUint64 {
	return pool_of_WorkOfErrorToUint64.Get().(*WorkOfErrorToUint64)
}
func putWorkOfErrorToUint64(d *WorkOfErrorToUint64) {
	d.Value = zero_of_WorkOfErrorToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToUint64.Put(d)
}

type _ErrorToUint64 struct{}

func (_ _ErrorToUint64) GetWork() *WorkOfErrorToUint64 {
	return getWorkOfErrorToUint64()
}
func (__ _ErrorToUint64) GetWorkWith(value error, returnCh chan<- *ReturnOfUint64) *WorkOfErrorToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToUint64) PutWork(d *WorkOfErrorToUint64) {
	putWorkOfErrorToUint64(d)
}

func (_ _ErrorToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _ErrorToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _ErrorToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _ErrorToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _ErrorToUint64) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToUint64) CallAsync(ctx context.Context, work *WorkOfErrorToUint64, h func(ctx context.Context, arg error) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToUint8 interface {
	Push(ctx context.Context, work *WorkOfErrorToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfErrorToUint8 struct {
	Value    error
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfErrorToUint8WithContext struct {
	Context context.Context
	WorkOfErrorToUint8
}

var (
	zero_of_WorkOfErrorToUint8       WorkOfErrorToUint8
	zero_of_WorkOfErrorToUint8_Value error
	pool_of_WorkOfErrorToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToUint8{}
		},
	}
)

func getWorkOfErrorToUint8() *WorkOfErrorToUint8 {
	return pool_of_WorkOfErrorToUint8.Get().(*WorkOfErrorToUint8)
}
func putWorkOfErrorToUint8(d *WorkOfErrorToUint8) {
	d.Value = zero_of_WorkOfErrorToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToUint8.Put(d)
}

type _ErrorToUint8 struct{}

func (_ _ErrorToUint8) GetWork() *WorkOfErrorToUint8 {
	return getWorkOfErrorToUint8()
}
func (__ _ErrorToUint8) GetWorkWith(value error, returnCh chan<- *ReturnOfUint8) *WorkOfErrorToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToUint8) PutWork(d *WorkOfErrorToUint8) {
	putWorkOfErrorToUint8(d)
}

func (_ _ErrorToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _ErrorToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _ErrorToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _ErrorToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _ErrorToUint8) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToUint8) CallAsync(ctx context.Context, work *WorkOfErrorToUint8, h func(ctx context.Context, arg error) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToUintptr interface {
	Push(ctx context.Context, work *WorkOfErrorToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfErrorToUintptr struct {
	Value    error
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfErrorToUintptrWithContext struct {
	Context context.Context
	WorkOfErrorToUintptr
}

var (
	zero_of_WorkOfErrorToUintptr       WorkOfErrorToUintptr
	zero_of_WorkOfErrorToUintptr_Value error
	pool_of_WorkOfErrorToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToUintptr{}
		},
	}
)

func getWorkOfErrorToUintptr() *WorkOfErrorToUintptr {
	return pool_of_WorkOfErrorToUintptr.Get().(*WorkOfErrorToUintptr)
}
func putWorkOfErrorToUintptr(d *WorkOfErrorToUintptr) {
	d.Value = zero_of_WorkOfErrorToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToUintptr.Put(d)
}

type _ErrorToUintptr struct{}

func (_ _ErrorToUintptr) GetWork() *WorkOfErrorToUintptr {
	return getWorkOfErrorToUintptr()
}
func (__ _ErrorToUintptr) GetWorkWith(value error, returnCh chan<- *ReturnOfUintptr) *WorkOfErrorToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToUintptr) PutWork(d *WorkOfErrorToUintptr) {
	putWorkOfErrorToUintptr(d)
}

func (_ _ErrorToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _ErrorToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _ErrorToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _ErrorToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _ErrorToUintptr) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToUintptr) CallAsync(ctx context.Context, work *WorkOfErrorToUintptr, h func(ctx context.Context, arg error) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToBytes interface {
	Push(ctx context.Context, work *WorkOfErrorToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfErrorToBytes struct {
	Value    error
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfErrorToBytesWithContext struct {
	Context context.Context
	WorkOfErrorToBytes
}

var (
	zero_of_WorkOfErrorToBytes       WorkOfErrorToBytes
	zero_of_WorkOfErrorToBytes_Value error
	pool_of_WorkOfErrorToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToBytes{}
		},
	}
)

func getWorkOfErrorToBytes() *WorkOfErrorToBytes {
	return pool_of_WorkOfErrorToBytes.Get().(*WorkOfErrorToBytes)
}
func putWorkOfErrorToBytes(d *WorkOfErrorToBytes) {
	d.Value = zero_of_WorkOfErrorToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToBytes.Put(d)
}

type _ErrorToBytes struct{}

func (_ _ErrorToBytes) GetWork() *WorkOfErrorToBytes {
	return getWorkOfErrorToBytes()
}
func (__ _ErrorToBytes) GetWorkWith(value error, returnCh chan<- *ReturnOfBytes) *WorkOfErrorToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToBytes) PutWork(d *WorkOfErrorToBytes) {
	putWorkOfErrorToBytes(d)
}

func (_ _ErrorToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _ErrorToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _ErrorToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _ErrorToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _ErrorToBytes) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToBytes) CallAsync(ctx context.Context, work *WorkOfErrorToBytes, h func(ctx context.Context, arg error) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfErrorToInterface interface {
	Push(ctx context.Context, work *WorkOfErrorToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfErrorToInterface struct {
	Value    error
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfErrorToInterfaceWithContext struct {
	Context context.Context
	WorkOfErrorToInterface
}

var (
	zero_of_WorkOfErrorToInterface       WorkOfErrorToInterface
	zero_of_WorkOfErrorToInterface_Value error
	pool_of_WorkOfErrorToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfErrorToInterface{}
		},
	}
)

func getWorkOfErrorToInterface() *WorkOfErrorToInterface {
	return pool_of_WorkOfErrorToInterface.Get().(*WorkOfErrorToInterface)
}
func putWorkOfErrorToInterface(d *WorkOfErrorToInterface) {
	d.Value = zero_of_WorkOfErrorToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfErrorToInterface.Put(d)
}

type _ErrorToInterface struct{}

func (_ _ErrorToInterface) GetWork() *WorkOfErrorToInterface {
	return getWorkOfErrorToInterface()
}
func (__ _ErrorToInterface) GetWorkWith(value error, returnCh chan<- *ReturnOfInterface) *WorkOfErrorToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _ErrorToInterface) PutWork(d *WorkOfErrorToInterface) {
	putWorkOfErrorToInterface(d)
}

func (_ _ErrorToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _ErrorToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _ErrorToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _ErrorToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _ErrorToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _ErrorToInterface) CallSync(ctx context.Context, value error, push func(ctx context.Context, work *WorkOfErrorToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _ErrorToInterface) CallAsync(ctx context.Context, work *WorkOfErrorToInterface, h func(ctx context.Context, arg error) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToBool interface {
	Push(ctx context.Context, work *WorkOfFloat32ToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfFloat32ToBool struct {
	Value    float32
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfFloat32ToBoolWithContext struct {
	Context context.Context
	WorkOfFloat32ToBool
}

var (
	zero_of_WorkOfFloat32ToBool       WorkOfFloat32ToBool
	zero_of_WorkOfFloat32ToBool_Value float32
	pool_of_WorkOfFloat32ToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToBool{}
		},
	}
)

func getWorkOfFloat32ToBool() *WorkOfFloat32ToBool {
	return pool_of_WorkOfFloat32ToBool.Get().(*WorkOfFloat32ToBool)
}
func putWorkOfFloat32ToBool(d *WorkOfFloat32ToBool) {
	d.Value = zero_of_WorkOfFloat32ToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToBool.Put(d)
}

type _Float32ToBool struct{}

func (_ _Float32ToBool) GetWork() *WorkOfFloat32ToBool {
	return getWorkOfFloat32ToBool()
}
func (__ _Float32ToBool) GetWorkWith(value float32, returnCh chan<- *ReturnOfBool) *WorkOfFloat32ToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToBool) PutWork(d *WorkOfFloat32ToBool) {
	putWorkOfFloat32ToBool(d)
}

func (_ _Float32ToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _Float32ToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _Float32ToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _Float32ToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _Float32ToBool) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToBool) CallAsync(ctx context.Context, work *WorkOfFloat32ToBool, h func(ctx context.Context, arg float32) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToByte interface {
	Push(ctx context.Context, work *WorkOfFloat32ToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfFloat32ToByte struct {
	Value    float32
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfFloat32ToByteWithContext struct {
	Context context.Context
	WorkOfFloat32ToByte
}

var (
	zero_of_WorkOfFloat32ToByte       WorkOfFloat32ToByte
	zero_of_WorkOfFloat32ToByte_Value float32
	pool_of_WorkOfFloat32ToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToByte{}
		},
	}
)

func getWorkOfFloat32ToByte() *WorkOfFloat32ToByte {
	return pool_of_WorkOfFloat32ToByte.Get().(*WorkOfFloat32ToByte)
}
func putWorkOfFloat32ToByte(d *WorkOfFloat32ToByte) {
	d.Value = zero_of_WorkOfFloat32ToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToByte.Put(d)
}

type _Float32ToByte struct{}

func (_ _Float32ToByte) GetWork() *WorkOfFloat32ToByte {
	return getWorkOfFloat32ToByte()
}
func (__ _Float32ToByte) GetWorkWith(value float32, returnCh chan<- *ReturnOfByte) *WorkOfFloat32ToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToByte) PutWork(d *WorkOfFloat32ToByte) {
	putWorkOfFloat32ToByte(d)
}

func (_ _Float32ToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _Float32ToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _Float32ToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _Float32ToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _Float32ToByte) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToByte) CallAsync(ctx context.Context, work *WorkOfFloat32ToByte, h func(ctx context.Context, arg float32) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToComplex128 interface {
	Push(ctx context.Context, work *WorkOfFloat32ToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfFloat32ToComplex128 struct {
	Value    float32
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfFloat32ToComplex128WithContext struct {
	Context context.Context
	WorkOfFloat32ToComplex128
}

var (
	zero_of_WorkOfFloat32ToComplex128       WorkOfFloat32ToComplex128
	zero_of_WorkOfFloat32ToComplex128_Value float32
	pool_of_WorkOfFloat32ToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToComplex128{}
		},
	}
)

func getWorkOfFloat32ToComplex128() *WorkOfFloat32ToComplex128 {
	return pool_of_WorkOfFloat32ToComplex128.Get().(*WorkOfFloat32ToComplex128)
}
func putWorkOfFloat32ToComplex128(d *WorkOfFloat32ToComplex128) {
	d.Value = zero_of_WorkOfFloat32ToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToComplex128.Put(d)
}

type _Float32ToComplex128 struct{}

func (_ _Float32ToComplex128) GetWork() *WorkOfFloat32ToComplex128 {
	return getWorkOfFloat32ToComplex128()
}
func (__ _Float32ToComplex128) GetWorkWith(value float32, returnCh chan<- *ReturnOfComplex128) *WorkOfFloat32ToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToComplex128) PutWork(d *WorkOfFloat32ToComplex128) {
	putWorkOfFloat32ToComplex128(d)
}

func (_ _Float32ToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _Float32ToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _Float32ToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _Float32ToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _Float32ToComplex128) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToComplex128) CallAsync(ctx context.Context, work *WorkOfFloat32ToComplex128, h func(ctx context.Context, arg float32) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToComplex64 interface {
	Push(ctx context.Context, work *WorkOfFloat32ToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfFloat32ToComplex64 struct {
	Value    float32
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfFloat32ToComplex64WithContext struct {
	Context context.Context
	WorkOfFloat32ToComplex64
}

var (
	zero_of_WorkOfFloat32ToComplex64       WorkOfFloat32ToComplex64
	zero_of_WorkOfFloat32ToComplex64_Value float32
	pool_of_WorkOfFloat32ToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToComplex64{}
		},
	}
)

func getWorkOfFloat32ToComplex64() *WorkOfFloat32ToComplex64 {
	return pool_of_WorkOfFloat32ToComplex64.Get().(*WorkOfFloat32ToComplex64)
}
func putWorkOfFloat32ToComplex64(d *WorkOfFloat32ToComplex64) {
	d.Value = zero_of_WorkOfFloat32ToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToComplex64.Put(d)
}

type _Float32ToComplex64 struct{}

func (_ _Float32ToComplex64) GetWork() *WorkOfFloat32ToComplex64 {
	return getWorkOfFloat32ToComplex64()
}
func (__ _Float32ToComplex64) GetWorkWith(value float32, returnCh chan<- *ReturnOfComplex64) *WorkOfFloat32ToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToComplex64) PutWork(d *WorkOfFloat32ToComplex64) {
	putWorkOfFloat32ToComplex64(d)
}

func (_ _Float32ToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _Float32ToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _Float32ToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _Float32ToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _Float32ToComplex64) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToComplex64) CallAsync(ctx context.Context, work *WorkOfFloat32ToComplex64, h func(ctx context.Context, arg float32) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToError interface {
	Push(ctx context.Context, work *WorkOfFloat32ToError, returnCh chan<- *ReturnOfError)
}

type WorkOfFloat32ToError struct {
	Value    float32
	ReturnCh chan<- *ReturnOfError
}

type WorkOfFloat32ToErrorWithContext struct {
	Context context.Context
	WorkOfFloat32ToError
}

var (
	zero_of_WorkOfFloat32ToError       WorkOfFloat32ToError
	zero_of_WorkOfFloat32ToError_Value float32
	pool_of_WorkOfFloat32ToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToError{}
		},
	}
)

func getWorkOfFloat32ToError() *WorkOfFloat32ToError {
	return pool_of_WorkOfFloat32ToError.Get().(*WorkOfFloat32ToError)
}
func putWorkOfFloat32ToError(d *WorkOfFloat32ToError) {
	d.Value = zero_of_WorkOfFloat32ToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToError.Put(d)
}

type _Float32ToError struct{}

func (_ _Float32ToError) GetWork() *WorkOfFloat32ToError {
	return getWorkOfFloat32ToError()
}
func (__ _Float32ToError) GetWorkWith(value float32, returnCh chan<- *ReturnOfError) *WorkOfFloat32ToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToError) PutWork(d *WorkOfFloat32ToError) {
	putWorkOfFloat32ToError(d)
}

func (_ _Float32ToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _Float32ToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _Float32ToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _Float32ToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _Float32ToError) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToError) CallAsync(ctx context.Context, work *WorkOfFloat32ToError, h func(ctx context.Context, arg float32) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToFloat32 interface {
	Push(ctx context.Context, work *WorkOfFloat32ToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfFloat32ToFloat32 struct {
	Value    float32
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfFloat32ToFloat32WithContext struct {
	Context context.Context
	WorkOfFloat32ToFloat32
}

var (
	zero_of_WorkOfFloat32ToFloat32       WorkOfFloat32ToFloat32
	zero_of_WorkOfFloat32ToFloat32_Value float32
	pool_of_WorkOfFloat32ToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToFloat32{}
		},
	}
)

func getWorkOfFloat32ToFloat32() *WorkOfFloat32ToFloat32 {
	return pool_of_WorkOfFloat32ToFloat32.Get().(*WorkOfFloat32ToFloat32)
}
func putWorkOfFloat32ToFloat32(d *WorkOfFloat32ToFloat32) {
	d.Value = zero_of_WorkOfFloat32ToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToFloat32.Put(d)
}

type _Float32ToFloat32 struct{}

func (_ _Float32ToFloat32) GetWork() *WorkOfFloat32ToFloat32 {
	return getWorkOfFloat32ToFloat32()
}
func (__ _Float32ToFloat32) GetWorkWith(value float32, returnCh chan<- *ReturnOfFloat32) *WorkOfFloat32ToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToFloat32) PutWork(d *WorkOfFloat32ToFloat32) {
	putWorkOfFloat32ToFloat32(d)
}

func (_ _Float32ToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _Float32ToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _Float32ToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _Float32ToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _Float32ToFloat32) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToFloat32) CallAsync(ctx context.Context, work *WorkOfFloat32ToFloat32, h func(ctx context.Context, arg float32) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToFloat64 interface {
	Push(ctx context.Context, work *WorkOfFloat32ToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfFloat32ToFloat64 struct {
	Value    float32
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfFloat32ToFloat64WithContext struct {
	Context context.Context
	WorkOfFloat32ToFloat64
}

var (
	zero_of_WorkOfFloat32ToFloat64       WorkOfFloat32ToFloat64
	zero_of_WorkOfFloat32ToFloat64_Value float32
	pool_of_WorkOfFloat32ToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToFloat64{}
		},
	}
)

func getWorkOfFloat32ToFloat64() *WorkOfFloat32ToFloat64 {
	return pool_of_WorkOfFloat32ToFloat64.Get().(*WorkOfFloat32ToFloat64)
}
func putWorkOfFloat32ToFloat64(d *WorkOfFloat32ToFloat64) {
	d.Value = zero_of_WorkOfFloat32ToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToFloat64.Put(d)
}

type _Float32ToFloat64 struct{}

func (_ _Float32ToFloat64) GetWork() *WorkOfFloat32ToFloat64 {
	return getWorkOfFloat32ToFloat64()
}
func (__ _Float32ToFloat64) GetWorkWith(value float32, returnCh chan<- *ReturnOfFloat64) *WorkOfFloat32ToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToFloat64) PutWork(d *WorkOfFloat32ToFloat64) {
	putWorkOfFloat32ToFloat64(d)
}

func (_ _Float32ToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _Float32ToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _Float32ToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _Float32ToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _Float32ToFloat64) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToFloat64) CallAsync(ctx context.Context, work *WorkOfFloat32ToFloat64, h func(ctx context.Context, arg float32) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToInt interface {
	Push(ctx context.Context, work *WorkOfFloat32ToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfFloat32ToInt struct {
	Value    float32
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfFloat32ToIntWithContext struct {
	Context context.Context
	WorkOfFloat32ToInt
}

var (
	zero_of_WorkOfFloat32ToInt       WorkOfFloat32ToInt
	zero_of_WorkOfFloat32ToInt_Value float32
	pool_of_WorkOfFloat32ToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToInt{}
		},
	}
)

func getWorkOfFloat32ToInt() *WorkOfFloat32ToInt {
	return pool_of_WorkOfFloat32ToInt.Get().(*WorkOfFloat32ToInt)
}
func putWorkOfFloat32ToInt(d *WorkOfFloat32ToInt) {
	d.Value = zero_of_WorkOfFloat32ToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToInt.Put(d)
}

type _Float32ToInt struct{}

func (_ _Float32ToInt) GetWork() *WorkOfFloat32ToInt {
	return getWorkOfFloat32ToInt()
}
func (__ _Float32ToInt) GetWorkWith(value float32, returnCh chan<- *ReturnOfInt) *WorkOfFloat32ToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToInt) PutWork(d *WorkOfFloat32ToInt) {
	putWorkOfFloat32ToInt(d)
}

func (_ _Float32ToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _Float32ToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _Float32ToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _Float32ToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _Float32ToInt) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToInt) CallAsync(ctx context.Context, work *WorkOfFloat32ToInt, h func(ctx context.Context, arg float32) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToInt16 interface {
	Push(ctx context.Context, work *WorkOfFloat32ToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfFloat32ToInt16 struct {
	Value    float32
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfFloat32ToInt16WithContext struct {
	Context context.Context
	WorkOfFloat32ToInt16
}

var (
	zero_of_WorkOfFloat32ToInt16       WorkOfFloat32ToInt16
	zero_of_WorkOfFloat32ToInt16_Value float32
	pool_of_WorkOfFloat32ToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToInt16{}
		},
	}
)

func getWorkOfFloat32ToInt16() *WorkOfFloat32ToInt16 {
	return pool_of_WorkOfFloat32ToInt16.Get().(*WorkOfFloat32ToInt16)
}
func putWorkOfFloat32ToInt16(d *WorkOfFloat32ToInt16) {
	d.Value = zero_of_WorkOfFloat32ToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToInt16.Put(d)
}

type _Float32ToInt16 struct{}

func (_ _Float32ToInt16) GetWork() *WorkOfFloat32ToInt16 {
	return getWorkOfFloat32ToInt16()
}
func (__ _Float32ToInt16) GetWorkWith(value float32, returnCh chan<- *ReturnOfInt16) *WorkOfFloat32ToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToInt16) PutWork(d *WorkOfFloat32ToInt16) {
	putWorkOfFloat32ToInt16(d)
}

func (_ _Float32ToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _Float32ToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _Float32ToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _Float32ToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _Float32ToInt16) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToInt16) CallAsync(ctx context.Context, work *WorkOfFloat32ToInt16, h func(ctx context.Context, arg float32) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToInt32 interface {
	Push(ctx context.Context, work *WorkOfFloat32ToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfFloat32ToInt32 struct {
	Value    float32
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfFloat32ToInt32WithContext struct {
	Context context.Context
	WorkOfFloat32ToInt32
}

var (
	zero_of_WorkOfFloat32ToInt32       WorkOfFloat32ToInt32
	zero_of_WorkOfFloat32ToInt32_Value float32
	pool_of_WorkOfFloat32ToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToInt32{}
		},
	}
)

func getWorkOfFloat32ToInt32() *WorkOfFloat32ToInt32 {
	return pool_of_WorkOfFloat32ToInt32.Get().(*WorkOfFloat32ToInt32)
}
func putWorkOfFloat32ToInt32(d *WorkOfFloat32ToInt32) {
	d.Value = zero_of_WorkOfFloat32ToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToInt32.Put(d)
}

type _Float32ToInt32 struct{}

func (_ _Float32ToInt32) GetWork() *WorkOfFloat32ToInt32 {
	return getWorkOfFloat32ToInt32()
}
func (__ _Float32ToInt32) GetWorkWith(value float32, returnCh chan<- *ReturnOfInt32) *WorkOfFloat32ToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToInt32) PutWork(d *WorkOfFloat32ToInt32) {
	putWorkOfFloat32ToInt32(d)
}

func (_ _Float32ToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _Float32ToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _Float32ToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _Float32ToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _Float32ToInt32) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToInt32) CallAsync(ctx context.Context, work *WorkOfFloat32ToInt32, h func(ctx context.Context, arg float32) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToInt64 interface {
	Push(ctx context.Context, work *WorkOfFloat32ToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfFloat32ToInt64 struct {
	Value    float32
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfFloat32ToInt64WithContext struct {
	Context context.Context
	WorkOfFloat32ToInt64
}

var (
	zero_of_WorkOfFloat32ToInt64       WorkOfFloat32ToInt64
	zero_of_WorkOfFloat32ToInt64_Value float32
	pool_of_WorkOfFloat32ToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToInt64{}
		},
	}
)

func getWorkOfFloat32ToInt64() *WorkOfFloat32ToInt64 {
	return pool_of_WorkOfFloat32ToInt64.Get().(*WorkOfFloat32ToInt64)
}
func putWorkOfFloat32ToInt64(d *WorkOfFloat32ToInt64) {
	d.Value = zero_of_WorkOfFloat32ToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToInt64.Put(d)
}

type _Float32ToInt64 struct{}

func (_ _Float32ToInt64) GetWork() *WorkOfFloat32ToInt64 {
	return getWorkOfFloat32ToInt64()
}
func (__ _Float32ToInt64) GetWorkWith(value float32, returnCh chan<- *ReturnOfInt64) *WorkOfFloat32ToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToInt64) PutWork(d *WorkOfFloat32ToInt64) {
	putWorkOfFloat32ToInt64(d)
}

func (_ _Float32ToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _Float32ToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _Float32ToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _Float32ToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _Float32ToInt64) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToInt64) CallAsync(ctx context.Context, work *WorkOfFloat32ToInt64, h func(ctx context.Context, arg float32) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToInt8 interface {
	Push(ctx context.Context, work *WorkOfFloat32ToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfFloat32ToInt8 struct {
	Value    float32
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfFloat32ToInt8WithContext struct {
	Context context.Context
	WorkOfFloat32ToInt8
}

var (
	zero_of_WorkOfFloat32ToInt8       WorkOfFloat32ToInt8
	zero_of_WorkOfFloat32ToInt8_Value float32
	pool_of_WorkOfFloat32ToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToInt8{}
		},
	}
)

func getWorkOfFloat32ToInt8() *WorkOfFloat32ToInt8 {
	return pool_of_WorkOfFloat32ToInt8.Get().(*WorkOfFloat32ToInt8)
}
func putWorkOfFloat32ToInt8(d *WorkOfFloat32ToInt8) {
	d.Value = zero_of_WorkOfFloat32ToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToInt8.Put(d)
}

type _Float32ToInt8 struct{}

func (_ _Float32ToInt8) GetWork() *WorkOfFloat32ToInt8 {
	return getWorkOfFloat32ToInt8()
}
func (__ _Float32ToInt8) GetWorkWith(value float32, returnCh chan<- *ReturnOfInt8) *WorkOfFloat32ToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToInt8) PutWork(d *WorkOfFloat32ToInt8) {
	putWorkOfFloat32ToInt8(d)
}

func (_ _Float32ToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _Float32ToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _Float32ToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _Float32ToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _Float32ToInt8) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToInt8) CallAsync(ctx context.Context, work *WorkOfFloat32ToInt8, h func(ctx context.Context, arg float32) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToRune interface {
	Push(ctx context.Context, work *WorkOfFloat32ToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfFloat32ToRune struct {
	Value    float32
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfFloat32ToRuneWithContext struct {
	Context context.Context
	WorkOfFloat32ToRune
}

var (
	zero_of_WorkOfFloat32ToRune       WorkOfFloat32ToRune
	zero_of_WorkOfFloat32ToRune_Value float32
	pool_of_WorkOfFloat32ToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToRune{}
		},
	}
)

func getWorkOfFloat32ToRune() *WorkOfFloat32ToRune {
	return pool_of_WorkOfFloat32ToRune.Get().(*WorkOfFloat32ToRune)
}
func putWorkOfFloat32ToRune(d *WorkOfFloat32ToRune) {
	d.Value = zero_of_WorkOfFloat32ToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToRune.Put(d)
}

type _Float32ToRune struct{}

func (_ _Float32ToRune) GetWork() *WorkOfFloat32ToRune {
	return getWorkOfFloat32ToRune()
}
func (__ _Float32ToRune) GetWorkWith(value float32, returnCh chan<- *ReturnOfRune) *WorkOfFloat32ToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToRune) PutWork(d *WorkOfFloat32ToRune) {
	putWorkOfFloat32ToRune(d)
}

func (_ _Float32ToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _Float32ToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _Float32ToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _Float32ToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _Float32ToRune) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToRune) CallAsync(ctx context.Context, work *WorkOfFloat32ToRune, h func(ctx context.Context, arg float32) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToString interface {
	Push(ctx context.Context, work *WorkOfFloat32ToString, returnCh chan<- *ReturnOfString)
}

type WorkOfFloat32ToString struct {
	Value    float32
	ReturnCh chan<- *ReturnOfString
}

type WorkOfFloat32ToStringWithContext struct {
	Context context.Context
	WorkOfFloat32ToString
}

var (
	zero_of_WorkOfFloat32ToString       WorkOfFloat32ToString
	zero_of_WorkOfFloat32ToString_Value float32
	pool_of_WorkOfFloat32ToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToString{}
		},
	}
)

func getWorkOfFloat32ToString() *WorkOfFloat32ToString {
	return pool_of_WorkOfFloat32ToString.Get().(*WorkOfFloat32ToString)
}
func putWorkOfFloat32ToString(d *WorkOfFloat32ToString) {
	d.Value = zero_of_WorkOfFloat32ToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToString.Put(d)
}

type _Float32ToString struct{}

func (_ _Float32ToString) GetWork() *WorkOfFloat32ToString {
	return getWorkOfFloat32ToString()
}
func (__ _Float32ToString) GetWorkWith(value float32, returnCh chan<- *ReturnOfString) *WorkOfFloat32ToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToString) PutWork(d *WorkOfFloat32ToString) {
	putWorkOfFloat32ToString(d)
}

func (_ _Float32ToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _Float32ToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _Float32ToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _Float32ToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _Float32ToString) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToString) CallAsync(ctx context.Context, work *WorkOfFloat32ToString, h func(ctx context.Context, arg float32) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToUint interface {
	Push(ctx context.Context, work *WorkOfFloat32ToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfFloat32ToUint struct {
	Value    float32
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfFloat32ToUintWithContext struct {
	Context context.Context
	WorkOfFloat32ToUint
}

var (
	zero_of_WorkOfFloat32ToUint       WorkOfFloat32ToUint
	zero_of_WorkOfFloat32ToUint_Value float32
	pool_of_WorkOfFloat32ToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToUint{}
		},
	}
)

func getWorkOfFloat32ToUint() *WorkOfFloat32ToUint {
	return pool_of_WorkOfFloat32ToUint.Get().(*WorkOfFloat32ToUint)
}
func putWorkOfFloat32ToUint(d *WorkOfFloat32ToUint) {
	d.Value = zero_of_WorkOfFloat32ToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToUint.Put(d)
}

type _Float32ToUint struct{}

func (_ _Float32ToUint) GetWork() *WorkOfFloat32ToUint {
	return getWorkOfFloat32ToUint()
}
func (__ _Float32ToUint) GetWorkWith(value float32, returnCh chan<- *ReturnOfUint) *WorkOfFloat32ToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToUint) PutWork(d *WorkOfFloat32ToUint) {
	putWorkOfFloat32ToUint(d)
}

func (_ _Float32ToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _Float32ToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _Float32ToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _Float32ToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _Float32ToUint) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToUint) CallAsync(ctx context.Context, work *WorkOfFloat32ToUint, h func(ctx context.Context, arg float32) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToUint16 interface {
	Push(ctx context.Context, work *WorkOfFloat32ToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfFloat32ToUint16 struct {
	Value    float32
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfFloat32ToUint16WithContext struct {
	Context context.Context
	WorkOfFloat32ToUint16
}

var (
	zero_of_WorkOfFloat32ToUint16       WorkOfFloat32ToUint16
	zero_of_WorkOfFloat32ToUint16_Value float32
	pool_of_WorkOfFloat32ToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToUint16{}
		},
	}
)

func getWorkOfFloat32ToUint16() *WorkOfFloat32ToUint16 {
	return pool_of_WorkOfFloat32ToUint16.Get().(*WorkOfFloat32ToUint16)
}
func putWorkOfFloat32ToUint16(d *WorkOfFloat32ToUint16) {
	d.Value = zero_of_WorkOfFloat32ToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToUint16.Put(d)
}

type _Float32ToUint16 struct{}

func (_ _Float32ToUint16) GetWork() *WorkOfFloat32ToUint16 {
	return getWorkOfFloat32ToUint16()
}
func (__ _Float32ToUint16) GetWorkWith(value float32, returnCh chan<- *ReturnOfUint16) *WorkOfFloat32ToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToUint16) PutWork(d *WorkOfFloat32ToUint16) {
	putWorkOfFloat32ToUint16(d)
}

func (_ _Float32ToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _Float32ToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _Float32ToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _Float32ToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _Float32ToUint16) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToUint16) CallAsync(ctx context.Context, work *WorkOfFloat32ToUint16, h func(ctx context.Context, arg float32) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToUint32 interface {
	Push(ctx context.Context, work *WorkOfFloat32ToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfFloat32ToUint32 struct {
	Value    float32
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfFloat32ToUint32WithContext struct {
	Context context.Context
	WorkOfFloat32ToUint32
}

var (
	zero_of_WorkOfFloat32ToUint32       WorkOfFloat32ToUint32
	zero_of_WorkOfFloat32ToUint32_Value float32
	pool_of_WorkOfFloat32ToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToUint32{}
		},
	}
)

func getWorkOfFloat32ToUint32() *WorkOfFloat32ToUint32 {
	return pool_of_WorkOfFloat32ToUint32.Get().(*WorkOfFloat32ToUint32)
}
func putWorkOfFloat32ToUint32(d *WorkOfFloat32ToUint32) {
	d.Value = zero_of_WorkOfFloat32ToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToUint32.Put(d)
}

type _Float32ToUint32 struct{}

func (_ _Float32ToUint32) GetWork() *WorkOfFloat32ToUint32 {
	return getWorkOfFloat32ToUint32()
}
func (__ _Float32ToUint32) GetWorkWith(value float32, returnCh chan<- *ReturnOfUint32) *WorkOfFloat32ToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToUint32) PutWork(d *WorkOfFloat32ToUint32) {
	putWorkOfFloat32ToUint32(d)
}

func (_ _Float32ToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _Float32ToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _Float32ToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _Float32ToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _Float32ToUint32) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToUint32) CallAsync(ctx context.Context, work *WorkOfFloat32ToUint32, h func(ctx context.Context, arg float32) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToUint64 interface {
	Push(ctx context.Context, work *WorkOfFloat32ToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfFloat32ToUint64 struct {
	Value    float32
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfFloat32ToUint64WithContext struct {
	Context context.Context
	WorkOfFloat32ToUint64
}

var (
	zero_of_WorkOfFloat32ToUint64       WorkOfFloat32ToUint64
	zero_of_WorkOfFloat32ToUint64_Value float32
	pool_of_WorkOfFloat32ToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToUint64{}
		},
	}
)

func getWorkOfFloat32ToUint64() *WorkOfFloat32ToUint64 {
	return pool_of_WorkOfFloat32ToUint64.Get().(*WorkOfFloat32ToUint64)
}
func putWorkOfFloat32ToUint64(d *WorkOfFloat32ToUint64) {
	d.Value = zero_of_WorkOfFloat32ToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToUint64.Put(d)
}

type _Float32ToUint64 struct{}

func (_ _Float32ToUint64) GetWork() *WorkOfFloat32ToUint64 {
	return getWorkOfFloat32ToUint64()
}
func (__ _Float32ToUint64) GetWorkWith(value float32, returnCh chan<- *ReturnOfUint64) *WorkOfFloat32ToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToUint64) PutWork(d *WorkOfFloat32ToUint64) {
	putWorkOfFloat32ToUint64(d)
}

func (_ _Float32ToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _Float32ToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _Float32ToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _Float32ToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _Float32ToUint64) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToUint64) CallAsync(ctx context.Context, work *WorkOfFloat32ToUint64, h func(ctx context.Context, arg float32) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToUint8 interface {
	Push(ctx context.Context, work *WorkOfFloat32ToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfFloat32ToUint8 struct {
	Value    float32
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfFloat32ToUint8WithContext struct {
	Context context.Context
	WorkOfFloat32ToUint8
}

var (
	zero_of_WorkOfFloat32ToUint8       WorkOfFloat32ToUint8
	zero_of_WorkOfFloat32ToUint8_Value float32
	pool_of_WorkOfFloat32ToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToUint8{}
		},
	}
)

func getWorkOfFloat32ToUint8() *WorkOfFloat32ToUint8 {
	return pool_of_WorkOfFloat32ToUint8.Get().(*WorkOfFloat32ToUint8)
}
func putWorkOfFloat32ToUint8(d *WorkOfFloat32ToUint8) {
	d.Value = zero_of_WorkOfFloat32ToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToUint8.Put(d)
}

type _Float32ToUint8 struct{}

func (_ _Float32ToUint8) GetWork() *WorkOfFloat32ToUint8 {
	return getWorkOfFloat32ToUint8()
}
func (__ _Float32ToUint8) GetWorkWith(value float32, returnCh chan<- *ReturnOfUint8) *WorkOfFloat32ToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToUint8) PutWork(d *WorkOfFloat32ToUint8) {
	putWorkOfFloat32ToUint8(d)
}

func (_ _Float32ToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _Float32ToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _Float32ToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _Float32ToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _Float32ToUint8) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToUint8) CallAsync(ctx context.Context, work *WorkOfFloat32ToUint8, h func(ctx context.Context, arg float32) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToUintptr interface {
	Push(ctx context.Context, work *WorkOfFloat32ToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfFloat32ToUintptr struct {
	Value    float32
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfFloat32ToUintptrWithContext struct {
	Context context.Context
	WorkOfFloat32ToUintptr
}

var (
	zero_of_WorkOfFloat32ToUintptr       WorkOfFloat32ToUintptr
	zero_of_WorkOfFloat32ToUintptr_Value float32
	pool_of_WorkOfFloat32ToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToUintptr{}
		},
	}
)

func getWorkOfFloat32ToUintptr() *WorkOfFloat32ToUintptr {
	return pool_of_WorkOfFloat32ToUintptr.Get().(*WorkOfFloat32ToUintptr)
}
func putWorkOfFloat32ToUintptr(d *WorkOfFloat32ToUintptr) {
	d.Value = zero_of_WorkOfFloat32ToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToUintptr.Put(d)
}

type _Float32ToUintptr struct{}

func (_ _Float32ToUintptr) GetWork() *WorkOfFloat32ToUintptr {
	return getWorkOfFloat32ToUintptr()
}
func (__ _Float32ToUintptr) GetWorkWith(value float32, returnCh chan<- *ReturnOfUintptr) *WorkOfFloat32ToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToUintptr) PutWork(d *WorkOfFloat32ToUintptr) {
	putWorkOfFloat32ToUintptr(d)
}

func (_ _Float32ToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _Float32ToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _Float32ToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _Float32ToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _Float32ToUintptr) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToUintptr) CallAsync(ctx context.Context, work *WorkOfFloat32ToUintptr, h func(ctx context.Context, arg float32) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToBytes interface {
	Push(ctx context.Context, work *WorkOfFloat32ToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfFloat32ToBytes struct {
	Value    float32
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfFloat32ToBytesWithContext struct {
	Context context.Context
	WorkOfFloat32ToBytes
}

var (
	zero_of_WorkOfFloat32ToBytes       WorkOfFloat32ToBytes
	zero_of_WorkOfFloat32ToBytes_Value float32
	pool_of_WorkOfFloat32ToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToBytes{}
		},
	}
)

func getWorkOfFloat32ToBytes() *WorkOfFloat32ToBytes {
	return pool_of_WorkOfFloat32ToBytes.Get().(*WorkOfFloat32ToBytes)
}
func putWorkOfFloat32ToBytes(d *WorkOfFloat32ToBytes) {
	d.Value = zero_of_WorkOfFloat32ToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToBytes.Put(d)
}

type _Float32ToBytes struct{}

func (_ _Float32ToBytes) GetWork() *WorkOfFloat32ToBytes {
	return getWorkOfFloat32ToBytes()
}
func (__ _Float32ToBytes) GetWorkWith(value float32, returnCh chan<- *ReturnOfBytes) *WorkOfFloat32ToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToBytes) PutWork(d *WorkOfFloat32ToBytes) {
	putWorkOfFloat32ToBytes(d)
}

func (_ _Float32ToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _Float32ToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _Float32ToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _Float32ToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _Float32ToBytes) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToBytes) CallAsync(ctx context.Context, work *WorkOfFloat32ToBytes, h func(ctx context.Context, arg float32) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat32ToInterface interface {
	Push(ctx context.Context, work *WorkOfFloat32ToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfFloat32ToInterface struct {
	Value    float32
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfFloat32ToInterfaceWithContext struct {
	Context context.Context
	WorkOfFloat32ToInterface
}

var (
	zero_of_WorkOfFloat32ToInterface       WorkOfFloat32ToInterface
	zero_of_WorkOfFloat32ToInterface_Value float32
	pool_of_WorkOfFloat32ToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat32ToInterface{}
		},
	}
)

func getWorkOfFloat32ToInterface() *WorkOfFloat32ToInterface {
	return pool_of_WorkOfFloat32ToInterface.Get().(*WorkOfFloat32ToInterface)
}
func putWorkOfFloat32ToInterface(d *WorkOfFloat32ToInterface) {
	d.Value = zero_of_WorkOfFloat32ToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat32ToInterface.Put(d)
}

type _Float32ToInterface struct{}

func (_ _Float32ToInterface) GetWork() *WorkOfFloat32ToInterface {
	return getWorkOfFloat32ToInterface()
}
func (__ _Float32ToInterface) GetWorkWith(value float32, returnCh chan<- *ReturnOfInterface) *WorkOfFloat32ToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float32ToInterface) PutWork(d *WorkOfFloat32ToInterface) {
	putWorkOfFloat32ToInterface(d)
}

func (_ _Float32ToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _Float32ToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float32ToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _Float32ToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _Float32ToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _Float32ToInterface) CallSync(ctx context.Context, value float32, push func(ctx context.Context, work *WorkOfFloat32ToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float32ToInterface) CallAsync(ctx context.Context, work *WorkOfFloat32ToInterface, h func(ctx context.Context, arg float32) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToBool interface {
	Push(ctx context.Context, work *WorkOfFloat64ToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfFloat64ToBool struct {
	Value    float64
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfFloat64ToBoolWithContext struct {
	Context context.Context
	WorkOfFloat64ToBool
}

var (
	zero_of_WorkOfFloat64ToBool       WorkOfFloat64ToBool
	zero_of_WorkOfFloat64ToBool_Value float64
	pool_of_WorkOfFloat64ToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToBool{}
		},
	}
)

func getWorkOfFloat64ToBool() *WorkOfFloat64ToBool {
	return pool_of_WorkOfFloat64ToBool.Get().(*WorkOfFloat64ToBool)
}
func putWorkOfFloat64ToBool(d *WorkOfFloat64ToBool) {
	d.Value = zero_of_WorkOfFloat64ToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToBool.Put(d)
}

type _Float64ToBool struct{}

func (_ _Float64ToBool) GetWork() *WorkOfFloat64ToBool {
	return getWorkOfFloat64ToBool()
}
func (__ _Float64ToBool) GetWorkWith(value float64, returnCh chan<- *ReturnOfBool) *WorkOfFloat64ToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToBool) PutWork(d *WorkOfFloat64ToBool) {
	putWorkOfFloat64ToBool(d)
}

func (_ _Float64ToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _Float64ToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _Float64ToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _Float64ToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _Float64ToBool) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToBool) CallAsync(ctx context.Context, work *WorkOfFloat64ToBool, h func(ctx context.Context, arg float64) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToByte interface {
	Push(ctx context.Context, work *WorkOfFloat64ToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfFloat64ToByte struct {
	Value    float64
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfFloat64ToByteWithContext struct {
	Context context.Context
	WorkOfFloat64ToByte
}

var (
	zero_of_WorkOfFloat64ToByte       WorkOfFloat64ToByte
	zero_of_WorkOfFloat64ToByte_Value float64
	pool_of_WorkOfFloat64ToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToByte{}
		},
	}
)

func getWorkOfFloat64ToByte() *WorkOfFloat64ToByte {
	return pool_of_WorkOfFloat64ToByte.Get().(*WorkOfFloat64ToByte)
}
func putWorkOfFloat64ToByte(d *WorkOfFloat64ToByte) {
	d.Value = zero_of_WorkOfFloat64ToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToByte.Put(d)
}

type _Float64ToByte struct{}

func (_ _Float64ToByte) GetWork() *WorkOfFloat64ToByte {
	return getWorkOfFloat64ToByte()
}
func (__ _Float64ToByte) GetWorkWith(value float64, returnCh chan<- *ReturnOfByte) *WorkOfFloat64ToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToByte) PutWork(d *WorkOfFloat64ToByte) {
	putWorkOfFloat64ToByte(d)
}

func (_ _Float64ToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _Float64ToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _Float64ToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _Float64ToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _Float64ToByte) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToByte) CallAsync(ctx context.Context, work *WorkOfFloat64ToByte, h func(ctx context.Context, arg float64) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToComplex128 interface {
	Push(ctx context.Context, work *WorkOfFloat64ToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfFloat64ToComplex128 struct {
	Value    float64
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfFloat64ToComplex128WithContext struct {
	Context context.Context
	WorkOfFloat64ToComplex128
}

var (
	zero_of_WorkOfFloat64ToComplex128       WorkOfFloat64ToComplex128
	zero_of_WorkOfFloat64ToComplex128_Value float64
	pool_of_WorkOfFloat64ToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToComplex128{}
		},
	}
)

func getWorkOfFloat64ToComplex128() *WorkOfFloat64ToComplex128 {
	return pool_of_WorkOfFloat64ToComplex128.Get().(*WorkOfFloat64ToComplex128)
}
func putWorkOfFloat64ToComplex128(d *WorkOfFloat64ToComplex128) {
	d.Value = zero_of_WorkOfFloat64ToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToComplex128.Put(d)
}

type _Float64ToComplex128 struct{}

func (_ _Float64ToComplex128) GetWork() *WorkOfFloat64ToComplex128 {
	return getWorkOfFloat64ToComplex128()
}
func (__ _Float64ToComplex128) GetWorkWith(value float64, returnCh chan<- *ReturnOfComplex128) *WorkOfFloat64ToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToComplex128) PutWork(d *WorkOfFloat64ToComplex128) {
	putWorkOfFloat64ToComplex128(d)
}

func (_ _Float64ToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _Float64ToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _Float64ToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _Float64ToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _Float64ToComplex128) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToComplex128) CallAsync(ctx context.Context, work *WorkOfFloat64ToComplex128, h func(ctx context.Context, arg float64) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToComplex64 interface {
	Push(ctx context.Context, work *WorkOfFloat64ToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfFloat64ToComplex64 struct {
	Value    float64
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfFloat64ToComplex64WithContext struct {
	Context context.Context
	WorkOfFloat64ToComplex64
}

var (
	zero_of_WorkOfFloat64ToComplex64       WorkOfFloat64ToComplex64
	zero_of_WorkOfFloat64ToComplex64_Value float64
	pool_of_WorkOfFloat64ToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToComplex64{}
		},
	}
)

func getWorkOfFloat64ToComplex64() *WorkOfFloat64ToComplex64 {
	return pool_of_WorkOfFloat64ToComplex64.Get().(*WorkOfFloat64ToComplex64)
}
func putWorkOfFloat64ToComplex64(d *WorkOfFloat64ToComplex64) {
	d.Value = zero_of_WorkOfFloat64ToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToComplex64.Put(d)
}

type _Float64ToComplex64 struct{}

func (_ _Float64ToComplex64) GetWork() *WorkOfFloat64ToComplex64 {
	return getWorkOfFloat64ToComplex64()
}
func (__ _Float64ToComplex64) GetWorkWith(value float64, returnCh chan<- *ReturnOfComplex64) *WorkOfFloat64ToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToComplex64) PutWork(d *WorkOfFloat64ToComplex64) {
	putWorkOfFloat64ToComplex64(d)
}

func (_ _Float64ToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _Float64ToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _Float64ToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _Float64ToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _Float64ToComplex64) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToComplex64) CallAsync(ctx context.Context, work *WorkOfFloat64ToComplex64, h func(ctx context.Context, arg float64) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToError interface {
	Push(ctx context.Context, work *WorkOfFloat64ToError, returnCh chan<- *ReturnOfError)
}

type WorkOfFloat64ToError struct {
	Value    float64
	ReturnCh chan<- *ReturnOfError
}

type WorkOfFloat64ToErrorWithContext struct {
	Context context.Context
	WorkOfFloat64ToError
}

var (
	zero_of_WorkOfFloat64ToError       WorkOfFloat64ToError
	zero_of_WorkOfFloat64ToError_Value float64
	pool_of_WorkOfFloat64ToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToError{}
		},
	}
)

func getWorkOfFloat64ToError() *WorkOfFloat64ToError {
	return pool_of_WorkOfFloat64ToError.Get().(*WorkOfFloat64ToError)
}
func putWorkOfFloat64ToError(d *WorkOfFloat64ToError) {
	d.Value = zero_of_WorkOfFloat64ToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToError.Put(d)
}

type _Float64ToError struct{}

func (_ _Float64ToError) GetWork() *WorkOfFloat64ToError {
	return getWorkOfFloat64ToError()
}
func (__ _Float64ToError) GetWorkWith(value float64, returnCh chan<- *ReturnOfError) *WorkOfFloat64ToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToError) PutWork(d *WorkOfFloat64ToError) {
	putWorkOfFloat64ToError(d)
}

func (_ _Float64ToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _Float64ToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _Float64ToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _Float64ToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _Float64ToError) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToError) CallAsync(ctx context.Context, work *WorkOfFloat64ToError, h func(ctx context.Context, arg float64) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToFloat32 interface {
	Push(ctx context.Context, work *WorkOfFloat64ToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfFloat64ToFloat32 struct {
	Value    float64
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfFloat64ToFloat32WithContext struct {
	Context context.Context
	WorkOfFloat64ToFloat32
}

var (
	zero_of_WorkOfFloat64ToFloat32       WorkOfFloat64ToFloat32
	zero_of_WorkOfFloat64ToFloat32_Value float64
	pool_of_WorkOfFloat64ToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToFloat32{}
		},
	}
)

func getWorkOfFloat64ToFloat32() *WorkOfFloat64ToFloat32 {
	return pool_of_WorkOfFloat64ToFloat32.Get().(*WorkOfFloat64ToFloat32)
}
func putWorkOfFloat64ToFloat32(d *WorkOfFloat64ToFloat32) {
	d.Value = zero_of_WorkOfFloat64ToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToFloat32.Put(d)
}

type _Float64ToFloat32 struct{}

func (_ _Float64ToFloat32) GetWork() *WorkOfFloat64ToFloat32 {
	return getWorkOfFloat64ToFloat32()
}
func (__ _Float64ToFloat32) GetWorkWith(value float64, returnCh chan<- *ReturnOfFloat32) *WorkOfFloat64ToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToFloat32) PutWork(d *WorkOfFloat64ToFloat32) {
	putWorkOfFloat64ToFloat32(d)
}

func (_ _Float64ToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _Float64ToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _Float64ToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _Float64ToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _Float64ToFloat32) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToFloat32) CallAsync(ctx context.Context, work *WorkOfFloat64ToFloat32, h func(ctx context.Context, arg float64) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToFloat64 interface {
	Push(ctx context.Context, work *WorkOfFloat64ToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfFloat64ToFloat64 struct {
	Value    float64
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfFloat64ToFloat64WithContext struct {
	Context context.Context
	WorkOfFloat64ToFloat64
}

var (
	zero_of_WorkOfFloat64ToFloat64       WorkOfFloat64ToFloat64
	zero_of_WorkOfFloat64ToFloat64_Value float64
	pool_of_WorkOfFloat64ToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToFloat64{}
		},
	}
)

func getWorkOfFloat64ToFloat64() *WorkOfFloat64ToFloat64 {
	return pool_of_WorkOfFloat64ToFloat64.Get().(*WorkOfFloat64ToFloat64)
}
func putWorkOfFloat64ToFloat64(d *WorkOfFloat64ToFloat64) {
	d.Value = zero_of_WorkOfFloat64ToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToFloat64.Put(d)
}

type _Float64ToFloat64 struct{}

func (_ _Float64ToFloat64) GetWork() *WorkOfFloat64ToFloat64 {
	return getWorkOfFloat64ToFloat64()
}
func (__ _Float64ToFloat64) GetWorkWith(value float64, returnCh chan<- *ReturnOfFloat64) *WorkOfFloat64ToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToFloat64) PutWork(d *WorkOfFloat64ToFloat64) {
	putWorkOfFloat64ToFloat64(d)
}

func (_ _Float64ToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _Float64ToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _Float64ToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _Float64ToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _Float64ToFloat64) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToFloat64) CallAsync(ctx context.Context, work *WorkOfFloat64ToFloat64, h func(ctx context.Context, arg float64) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToInt interface {
	Push(ctx context.Context, work *WorkOfFloat64ToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfFloat64ToInt struct {
	Value    float64
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfFloat64ToIntWithContext struct {
	Context context.Context
	WorkOfFloat64ToInt
}

var (
	zero_of_WorkOfFloat64ToInt       WorkOfFloat64ToInt
	zero_of_WorkOfFloat64ToInt_Value float64
	pool_of_WorkOfFloat64ToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToInt{}
		},
	}
)

func getWorkOfFloat64ToInt() *WorkOfFloat64ToInt {
	return pool_of_WorkOfFloat64ToInt.Get().(*WorkOfFloat64ToInt)
}
func putWorkOfFloat64ToInt(d *WorkOfFloat64ToInt) {
	d.Value = zero_of_WorkOfFloat64ToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToInt.Put(d)
}

type _Float64ToInt struct{}

func (_ _Float64ToInt) GetWork() *WorkOfFloat64ToInt {
	return getWorkOfFloat64ToInt()
}
func (__ _Float64ToInt) GetWorkWith(value float64, returnCh chan<- *ReturnOfInt) *WorkOfFloat64ToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToInt) PutWork(d *WorkOfFloat64ToInt) {
	putWorkOfFloat64ToInt(d)
}

func (_ _Float64ToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _Float64ToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _Float64ToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _Float64ToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _Float64ToInt) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToInt) CallAsync(ctx context.Context, work *WorkOfFloat64ToInt, h func(ctx context.Context, arg float64) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToInt16 interface {
	Push(ctx context.Context, work *WorkOfFloat64ToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfFloat64ToInt16 struct {
	Value    float64
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfFloat64ToInt16WithContext struct {
	Context context.Context
	WorkOfFloat64ToInt16
}

var (
	zero_of_WorkOfFloat64ToInt16       WorkOfFloat64ToInt16
	zero_of_WorkOfFloat64ToInt16_Value float64
	pool_of_WorkOfFloat64ToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToInt16{}
		},
	}
)

func getWorkOfFloat64ToInt16() *WorkOfFloat64ToInt16 {
	return pool_of_WorkOfFloat64ToInt16.Get().(*WorkOfFloat64ToInt16)
}
func putWorkOfFloat64ToInt16(d *WorkOfFloat64ToInt16) {
	d.Value = zero_of_WorkOfFloat64ToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToInt16.Put(d)
}

type _Float64ToInt16 struct{}

func (_ _Float64ToInt16) GetWork() *WorkOfFloat64ToInt16 {
	return getWorkOfFloat64ToInt16()
}
func (__ _Float64ToInt16) GetWorkWith(value float64, returnCh chan<- *ReturnOfInt16) *WorkOfFloat64ToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToInt16) PutWork(d *WorkOfFloat64ToInt16) {
	putWorkOfFloat64ToInt16(d)
}

func (_ _Float64ToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _Float64ToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _Float64ToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _Float64ToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _Float64ToInt16) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToInt16) CallAsync(ctx context.Context, work *WorkOfFloat64ToInt16, h func(ctx context.Context, arg float64) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToInt32 interface {
	Push(ctx context.Context, work *WorkOfFloat64ToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfFloat64ToInt32 struct {
	Value    float64
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfFloat64ToInt32WithContext struct {
	Context context.Context
	WorkOfFloat64ToInt32
}

var (
	zero_of_WorkOfFloat64ToInt32       WorkOfFloat64ToInt32
	zero_of_WorkOfFloat64ToInt32_Value float64
	pool_of_WorkOfFloat64ToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToInt32{}
		},
	}
)

func getWorkOfFloat64ToInt32() *WorkOfFloat64ToInt32 {
	return pool_of_WorkOfFloat64ToInt32.Get().(*WorkOfFloat64ToInt32)
}
func putWorkOfFloat64ToInt32(d *WorkOfFloat64ToInt32) {
	d.Value = zero_of_WorkOfFloat64ToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToInt32.Put(d)
}

type _Float64ToInt32 struct{}

func (_ _Float64ToInt32) GetWork() *WorkOfFloat64ToInt32 {
	return getWorkOfFloat64ToInt32()
}
func (__ _Float64ToInt32) GetWorkWith(value float64, returnCh chan<- *ReturnOfInt32) *WorkOfFloat64ToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToInt32) PutWork(d *WorkOfFloat64ToInt32) {
	putWorkOfFloat64ToInt32(d)
}

func (_ _Float64ToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _Float64ToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _Float64ToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _Float64ToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _Float64ToInt32) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToInt32) CallAsync(ctx context.Context, work *WorkOfFloat64ToInt32, h func(ctx context.Context, arg float64) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToInt64 interface {
	Push(ctx context.Context, work *WorkOfFloat64ToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfFloat64ToInt64 struct {
	Value    float64
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfFloat64ToInt64WithContext struct {
	Context context.Context
	WorkOfFloat64ToInt64
}

var (
	zero_of_WorkOfFloat64ToInt64       WorkOfFloat64ToInt64
	zero_of_WorkOfFloat64ToInt64_Value float64
	pool_of_WorkOfFloat64ToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToInt64{}
		},
	}
)

func getWorkOfFloat64ToInt64() *WorkOfFloat64ToInt64 {
	return pool_of_WorkOfFloat64ToInt64.Get().(*WorkOfFloat64ToInt64)
}
func putWorkOfFloat64ToInt64(d *WorkOfFloat64ToInt64) {
	d.Value = zero_of_WorkOfFloat64ToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToInt64.Put(d)
}

type _Float64ToInt64 struct{}

func (_ _Float64ToInt64) GetWork() *WorkOfFloat64ToInt64 {
	return getWorkOfFloat64ToInt64()
}
func (__ _Float64ToInt64) GetWorkWith(value float64, returnCh chan<- *ReturnOfInt64) *WorkOfFloat64ToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToInt64) PutWork(d *WorkOfFloat64ToInt64) {
	putWorkOfFloat64ToInt64(d)
}

func (_ _Float64ToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _Float64ToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _Float64ToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _Float64ToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _Float64ToInt64) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToInt64) CallAsync(ctx context.Context, work *WorkOfFloat64ToInt64, h func(ctx context.Context, arg float64) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToInt8 interface {
	Push(ctx context.Context, work *WorkOfFloat64ToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfFloat64ToInt8 struct {
	Value    float64
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfFloat64ToInt8WithContext struct {
	Context context.Context
	WorkOfFloat64ToInt8
}

var (
	zero_of_WorkOfFloat64ToInt8       WorkOfFloat64ToInt8
	zero_of_WorkOfFloat64ToInt8_Value float64
	pool_of_WorkOfFloat64ToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToInt8{}
		},
	}
)

func getWorkOfFloat64ToInt8() *WorkOfFloat64ToInt8 {
	return pool_of_WorkOfFloat64ToInt8.Get().(*WorkOfFloat64ToInt8)
}
func putWorkOfFloat64ToInt8(d *WorkOfFloat64ToInt8) {
	d.Value = zero_of_WorkOfFloat64ToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToInt8.Put(d)
}

type _Float64ToInt8 struct{}

func (_ _Float64ToInt8) GetWork() *WorkOfFloat64ToInt8 {
	return getWorkOfFloat64ToInt8()
}
func (__ _Float64ToInt8) GetWorkWith(value float64, returnCh chan<- *ReturnOfInt8) *WorkOfFloat64ToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToInt8) PutWork(d *WorkOfFloat64ToInt8) {
	putWorkOfFloat64ToInt8(d)
}

func (_ _Float64ToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _Float64ToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _Float64ToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _Float64ToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _Float64ToInt8) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToInt8) CallAsync(ctx context.Context, work *WorkOfFloat64ToInt8, h func(ctx context.Context, arg float64) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToRune interface {
	Push(ctx context.Context, work *WorkOfFloat64ToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfFloat64ToRune struct {
	Value    float64
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfFloat64ToRuneWithContext struct {
	Context context.Context
	WorkOfFloat64ToRune
}

var (
	zero_of_WorkOfFloat64ToRune       WorkOfFloat64ToRune
	zero_of_WorkOfFloat64ToRune_Value float64
	pool_of_WorkOfFloat64ToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToRune{}
		},
	}
)

func getWorkOfFloat64ToRune() *WorkOfFloat64ToRune {
	return pool_of_WorkOfFloat64ToRune.Get().(*WorkOfFloat64ToRune)
}
func putWorkOfFloat64ToRune(d *WorkOfFloat64ToRune) {
	d.Value = zero_of_WorkOfFloat64ToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToRune.Put(d)
}

type _Float64ToRune struct{}

func (_ _Float64ToRune) GetWork() *WorkOfFloat64ToRune {
	return getWorkOfFloat64ToRune()
}
func (__ _Float64ToRune) GetWorkWith(value float64, returnCh chan<- *ReturnOfRune) *WorkOfFloat64ToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToRune) PutWork(d *WorkOfFloat64ToRune) {
	putWorkOfFloat64ToRune(d)
}

func (_ _Float64ToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _Float64ToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _Float64ToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _Float64ToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _Float64ToRune) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToRune) CallAsync(ctx context.Context, work *WorkOfFloat64ToRune, h func(ctx context.Context, arg float64) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToString interface {
	Push(ctx context.Context, work *WorkOfFloat64ToString, returnCh chan<- *ReturnOfString)
}

type WorkOfFloat64ToString struct {
	Value    float64
	ReturnCh chan<- *ReturnOfString
}

type WorkOfFloat64ToStringWithContext struct {
	Context context.Context
	WorkOfFloat64ToString
}

var (
	zero_of_WorkOfFloat64ToString       WorkOfFloat64ToString
	zero_of_WorkOfFloat64ToString_Value float64
	pool_of_WorkOfFloat64ToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToString{}
		},
	}
)

func getWorkOfFloat64ToString() *WorkOfFloat64ToString {
	return pool_of_WorkOfFloat64ToString.Get().(*WorkOfFloat64ToString)
}
func putWorkOfFloat64ToString(d *WorkOfFloat64ToString) {
	d.Value = zero_of_WorkOfFloat64ToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToString.Put(d)
}

type _Float64ToString struct{}

func (_ _Float64ToString) GetWork() *WorkOfFloat64ToString {
	return getWorkOfFloat64ToString()
}
func (__ _Float64ToString) GetWorkWith(value float64, returnCh chan<- *ReturnOfString) *WorkOfFloat64ToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToString) PutWork(d *WorkOfFloat64ToString) {
	putWorkOfFloat64ToString(d)
}

func (_ _Float64ToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _Float64ToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _Float64ToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _Float64ToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _Float64ToString) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToString) CallAsync(ctx context.Context, work *WorkOfFloat64ToString, h func(ctx context.Context, arg float64) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToUint interface {
	Push(ctx context.Context, work *WorkOfFloat64ToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfFloat64ToUint struct {
	Value    float64
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfFloat64ToUintWithContext struct {
	Context context.Context
	WorkOfFloat64ToUint
}

var (
	zero_of_WorkOfFloat64ToUint       WorkOfFloat64ToUint
	zero_of_WorkOfFloat64ToUint_Value float64
	pool_of_WorkOfFloat64ToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToUint{}
		},
	}
)

func getWorkOfFloat64ToUint() *WorkOfFloat64ToUint {
	return pool_of_WorkOfFloat64ToUint.Get().(*WorkOfFloat64ToUint)
}
func putWorkOfFloat64ToUint(d *WorkOfFloat64ToUint) {
	d.Value = zero_of_WorkOfFloat64ToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToUint.Put(d)
}

type _Float64ToUint struct{}

func (_ _Float64ToUint) GetWork() *WorkOfFloat64ToUint {
	return getWorkOfFloat64ToUint()
}
func (__ _Float64ToUint) GetWorkWith(value float64, returnCh chan<- *ReturnOfUint) *WorkOfFloat64ToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToUint) PutWork(d *WorkOfFloat64ToUint) {
	putWorkOfFloat64ToUint(d)
}

func (_ _Float64ToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _Float64ToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _Float64ToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _Float64ToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _Float64ToUint) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToUint) CallAsync(ctx context.Context, work *WorkOfFloat64ToUint, h func(ctx context.Context, arg float64) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToUint16 interface {
	Push(ctx context.Context, work *WorkOfFloat64ToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfFloat64ToUint16 struct {
	Value    float64
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfFloat64ToUint16WithContext struct {
	Context context.Context
	WorkOfFloat64ToUint16
}

var (
	zero_of_WorkOfFloat64ToUint16       WorkOfFloat64ToUint16
	zero_of_WorkOfFloat64ToUint16_Value float64
	pool_of_WorkOfFloat64ToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToUint16{}
		},
	}
)

func getWorkOfFloat64ToUint16() *WorkOfFloat64ToUint16 {
	return pool_of_WorkOfFloat64ToUint16.Get().(*WorkOfFloat64ToUint16)
}
func putWorkOfFloat64ToUint16(d *WorkOfFloat64ToUint16) {
	d.Value = zero_of_WorkOfFloat64ToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToUint16.Put(d)
}

type _Float64ToUint16 struct{}

func (_ _Float64ToUint16) GetWork() *WorkOfFloat64ToUint16 {
	return getWorkOfFloat64ToUint16()
}
func (__ _Float64ToUint16) GetWorkWith(value float64, returnCh chan<- *ReturnOfUint16) *WorkOfFloat64ToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToUint16) PutWork(d *WorkOfFloat64ToUint16) {
	putWorkOfFloat64ToUint16(d)
}

func (_ _Float64ToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _Float64ToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _Float64ToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _Float64ToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _Float64ToUint16) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToUint16) CallAsync(ctx context.Context, work *WorkOfFloat64ToUint16, h func(ctx context.Context, arg float64) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToUint32 interface {
	Push(ctx context.Context, work *WorkOfFloat64ToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfFloat64ToUint32 struct {
	Value    float64
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfFloat64ToUint32WithContext struct {
	Context context.Context
	WorkOfFloat64ToUint32
}

var (
	zero_of_WorkOfFloat64ToUint32       WorkOfFloat64ToUint32
	zero_of_WorkOfFloat64ToUint32_Value float64
	pool_of_WorkOfFloat64ToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToUint32{}
		},
	}
)

func getWorkOfFloat64ToUint32() *WorkOfFloat64ToUint32 {
	return pool_of_WorkOfFloat64ToUint32.Get().(*WorkOfFloat64ToUint32)
}
func putWorkOfFloat64ToUint32(d *WorkOfFloat64ToUint32) {
	d.Value = zero_of_WorkOfFloat64ToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToUint32.Put(d)
}

type _Float64ToUint32 struct{}

func (_ _Float64ToUint32) GetWork() *WorkOfFloat64ToUint32 {
	return getWorkOfFloat64ToUint32()
}
func (__ _Float64ToUint32) GetWorkWith(value float64, returnCh chan<- *ReturnOfUint32) *WorkOfFloat64ToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToUint32) PutWork(d *WorkOfFloat64ToUint32) {
	putWorkOfFloat64ToUint32(d)
}

func (_ _Float64ToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _Float64ToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _Float64ToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _Float64ToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _Float64ToUint32) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToUint32) CallAsync(ctx context.Context, work *WorkOfFloat64ToUint32, h func(ctx context.Context, arg float64) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToUint64 interface {
	Push(ctx context.Context, work *WorkOfFloat64ToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfFloat64ToUint64 struct {
	Value    float64
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfFloat64ToUint64WithContext struct {
	Context context.Context
	WorkOfFloat64ToUint64
}

var (
	zero_of_WorkOfFloat64ToUint64       WorkOfFloat64ToUint64
	zero_of_WorkOfFloat64ToUint64_Value float64
	pool_of_WorkOfFloat64ToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToUint64{}
		},
	}
)

func getWorkOfFloat64ToUint64() *WorkOfFloat64ToUint64 {
	return pool_of_WorkOfFloat64ToUint64.Get().(*WorkOfFloat64ToUint64)
}
func putWorkOfFloat64ToUint64(d *WorkOfFloat64ToUint64) {
	d.Value = zero_of_WorkOfFloat64ToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToUint64.Put(d)
}

type _Float64ToUint64 struct{}

func (_ _Float64ToUint64) GetWork() *WorkOfFloat64ToUint64 {
	return getWorkOfFloat64ToUint64()
}
func (__ _Float64ToUint64) GetWorkWith(value float64, returnCh chan<- *ReturnOfUint64) *WorkOfFloat64ToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToUint64) PutWork(d *WorkOfFloat64ToUint64) {
	putWorkOfFloat64ToUint64(d)
}

func (_ _Float64ToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _Float64ToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _Float64ToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _Float64ToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _Float64ToUint64) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToUint64) CallAsync(ctx context.Context, work *WorkOfFloat64ToUint64, h func(ctx context.Context, arg float64) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToUint8 interface {
	Push(ctx context.Context, work *WorkOfFloat64ToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfFloat64ToUint8 struct {
	Value    float64
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfFloat64ToUint8WithContext struct {
	Context context.Context
	WorkOfFloat64ToUint8
}

var (
	zero_of_WorkOfFloat64ToUint8       WorkOfFloat64ToUint8
	zero_of_WorkOfFloat64ToUint8_Value float64
	pool_of_WorkOfFloat64ToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToUint8{}
		},
	}
)

func getWorkOfFloat64ToUint8() *WorkOfFloat64ToUint8 {
	return pool_of_WorkOfFloat64ToUint8.Get().(*WorkOfFloat64ToUint8)
}
func putWorkOfFloat64ToUint8(d *WorkOfFloat64ToUint8) {
	d.Value = zero_of_WorkOfFloat64ToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToUint8.Put(d)
}

type _Float64ToUint8 struct{}

func (_ _Float64ToUint8) GetWork() *WorkOfFloat64ToUint8 {
	return getWorkOfFloat64ToUint8()
}
func (__ _Float64ToUint8) GetWorkWith(value float64, returnCh chan<- *ReturnOfUint8) *WorkOfFloat64ToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToUint8) PutWork(d *WorkOfFloat64ToUint8) {
	putWorkOfFloat64ToUint8(d)
}

func (_ _Float64ToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _Float64ToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _Float64ToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _Float64ToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _Float64ToUint8) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToUint8) CallAsync(ctx context.Context, work *WorkOfFloat64ToUint8, h func(ctx context.Context, arg float64) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToUintptr interface {
	Push(ctx context.Context, work *WorkOfFloat64ToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfFloat64ToUintptr struct {
	Value    float64
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfFloat64ToUintptrWithContext struct {
	Context context.Context
	WorkOfFloat64ToUintptr
}

var (
	zero_of_WorkOfFloat64ToUintptr       WorkOfFloat64ToUintptr
	zero_of_WorkOfFloat64ToUintptr_Value float64
	pool_of_WorkOfFloat64ToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToUintptr{}
		},
	}
)

func getWorkOfFloat64ToUintptr() *WorkOfFloat64ToUintptr {
	return pool_of_WorkOfFloat64ToUintptr.Get().(*WorkOfFloat64ToUintptr)
}
func putWorkOfFloat64ToUintptr(d *WorkOfFloat64ToUintptr) {
	d.Value = zero_of_WorkOfFloat64ToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToUintptr.Put(d)
}

type _Float64ToUintptr struct{}

func (_ _Float64ToUintptr) GetWork() *WorkOfFloat64ToUintptr {
	return getWorkOfFloat64ToUintptr()
}
func (__ _Float64ToUintptr) GetWorkWith(value float64, returnCh chan<- *ReturnOfUintptr) *WorkOfFloat64ToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToUintptr) PutWork(d *WorkOfFloat64ToUintptr) {
	putWorkOfFloat64ToUintptr(d)
}

func (_ _Float64ToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _Float64ToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _Float64ToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _Float64ToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _Float64ToUintptr) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToUintptr) CallAsync(ctx context.Context, work *WorkOfFloat64ToUintptr, h func(ctx context.Context, arg float64) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToBytes interface {
	Push(ctx context.Context, work *WorkOfFloat64ToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfFloat64ToBytes struct {
	Value    float64
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfFloat64ToBytesWithContext struct {
	Context context.Context
	WorkOfFloat64ToBytes
}

var (
	zero_of_WorkOfFloat64ToBytes       WorkOfFloat64ToBytes
	zero_of_WorkOfFloat64ToBytes_Value float64
	pool_of_WorkOfFloat64ToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToBytes{}
		},
	}
)

func getWorkOfFloat64ToBytes() *WorkOfFloat64ToBytes {
	return pool_of_WorkOfFloat64ToBytes.Get().(*WorkOfFloat64ToBytes)
}
func putWorkOfFloat64ToBytes(d *WorkOfFloat64ToBytes) {
	d.Value = zero_of_WorkOfFloat64ToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToBytes.Put(d)
}

type _Float64ToBytes struct{}

func (_ _Float64ToBytes) GetWork() *WorkOfFloat64ToBytes {
	return getWorkOfFloat64ToBytes()
}
func (__ _Float64ToBytes) GetWorkWith(value float64, returnCh chan<- *ReturnOfBytes) *WorkOfFloat64ToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToBytes) PutWork(d *WorkOfFloat64ToBytes) {
	putWorkOfFloat64ToBytes(d)
}

func (_ _Float64ToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _Float64ToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _Float64ToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _Float64ToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _Float64ToBytes) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToBytes) CallAsync(ctx context.Context, work *WorkOfFloat64ToBytes, h func(ctx context.Context, arg float64) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfFloat64ToInterface interface {
	Push(ctx context.Context, work *WorkOfFloat64ToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfFloat64ToInterface struct {
	Value    float64
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfFloat64ToInterfaceWithContext struct {
	Context context.Context
	WorkOfFloat64ToInterface
}

var (
	zero_of_WorkOfFloat64ToInterface       WorkOfFloat64ToInterface
	zero_of_WorkOfFloat64ToInterface_Value float64
	pool_of_WorkOfFloat64ToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfFloat64ToInterface{}
		},
	}
)

func getWorkOfFloat64ToInterface() *WorkOfFloat64ToInterface {
	return pool_of_WorkOfFloat64ToInterface.Get().(*WorkOfFloat64ToInterface)
}
func putWorkOfFloat64ToInterface(d *WorkOfFloat64ToInterface) {
	d.Value = zero_of_WorkOfFloat64ToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfFloat64ToInterface.Put(d)
}

type _Float64ToInterface struct{}

func (_ _Float64ToInterface) GetWork() *WorkOfFloat64ToInterface {
	return getWorkOfFloat64ToInterface()
}
func (__ _Float64ToInterface) GetWorkWith(value float64, returnCh chan<- *ReturnOfInterface) *WorkOfFloat64ToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Float64ToInterface) PutWork(d *WorkOfFloat64ToInterface) {
	putWorkOfFloat64ToInterface(d)
}

func (_ _Float64ToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _Float64ToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Float64ToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _Float64ToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _Float64ToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _Float64ToInterface) CallSync(ctx context.Context, value float64, push func(ctx context.Context, work *WorkOfFloat64ToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Float64ToInterface) CallAsync(ctx context.Context, work *WorkOfFloat64ToInterface, h func(ctx context.Context, arg float64) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToBool interface {
	Push(ctx context.Context, work *WorkOfIntToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfIntToBool struct {
	Value    int
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfIntToBoolWithContext struct {
	Context context.Context
	WorkOfIntToBool
}

var (
	zero_of_WorkOfIntToBool       WorkOfIntToBool
	zero_of_WorkOfIntToBool_Value int
	pool_of_WorkOfIntToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToBool{}
		},
	}
)

func getWorkOfIntToBool() *WorkOfIntToBool {
	return pool_of_WorkOfIntToBool.Get().(*WorkOfIntToBool)
}
func putWorkOfIntToBool(d *WorkOfIntToBool) {
	d.Value = zero_of_WorkOfIntToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToBool.Put(d)
}

type _IntToBool struct{}

func (_ _IntToBool) GetWork() *WorkOfIntToBool {
	return getWorkOfIntToBool()
}
func (__ _IntToBool) GetWorkWith(value int, returnCh chan<- *ReturnOfBool) *WorkOfIntToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToBool) PutWork(d *WorkOfIntToBool) {
	putWorkOfIntToBool(d)
}

func (_ _IntToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _IntToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _IntToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _IntToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _IntToBool) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToBool) CallAsync(ctx context.Context, work *WorkOfIntToBool, h func(ctx context.Context, arg int) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToByte interface {
	Push(ctx context.Context, work *WorkOfIntToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfIntToByte struct {
	Value    int
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfIntToByteWithContext struct {
	Context context.Context
	WorkOfIntToByte
}

var (
	zero_of_WorkOfIntToByte       WorkOfIntToByte
	zero_of_WorkOfIntToByte_Value int
	pool_of_WorkOfIntToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToByte{}
		},
	}
)

func getWorkOfIntToByte() *WorkOfIntToByte {
	return pool_of_WorkOfIntToByte.Get().(*WorkOfIntToByte)
}
func putWorkOfIntToByte(d *WorkOfIntToByte) {
	d.Value = zero_of_WorkOfIntToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToByte.Put(d)
}

type _IntToByte struct{}

func (_ _IntToByte) GetWork() *WorkOfIntToByte {
	return getWorkOfIntToByte()
}
func (__ _IntToByte) GetWorkWith(value int, returnCh chan<- *ReturnOfByte) *WorkOfIntToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToByte) PutWork(d *WorkOfIntToByte) {
	putWorkOfIntToByte(d)
}

func (_ _IntToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _IntToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _IntToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _IntToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _IntToByte) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToByte) CallAsync(ctx context.Context, work *WorkOfIntToByte, h func(ctx context.Context, arg int) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToComplex128 interface {
	Push(ctx context.Context, work *WorkOfIntToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfIntToComplex128 struct {
	Value    int
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfIntToComplex128WithContext struct {
	Context context.Context
	WorkOfIntToComplex128
}

var (
	zero_of_WorkOfIntToComplex128       WorkOfIntToComplex128
	zero_of_WorkOfIntToComplex128_Value int
	pool_of_WorkOfIntToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToComplex128{}
		},
	}
)

func getWorkOfIntToComplex128() *WorkOfIntToComplex128 {
	return pool_of_WorkOfIntToComplex128.Get().(*WorkOfIntToComplex128)
}
func putWorkOfIntToComplex128(d *WorkOfIntToComplex128) {
	d.Value = zero_of_WorkOfIntToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToComplex128.Put(d)
}

type _IntToComplex128 struct{}

func (_ _IntToComplex128) GetWork() *WorkOfIntToComplex128 {
	return getWorkOfIntToComplex128()
}
func (__ _IntToComplex128) GetWorkWith(value int, returnCh chan<- *ReturnOfComplex128) *WorkOfIntToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToComplex128) PutWork(d *WorkOfIntToComplex128) {
	putWorkOfIntToComplex128(d)
}

func (_ _IntToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _IntToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _IntToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _IntToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _IntToComplex128) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToComplex128) CallAsync(ctx context.Context, work *WorkOfIntToComplex128, h func(ctx context.Context, arg int) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToComplex64 interface {
	Push(ctx context.Context, work *WorkOfIntToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfIntToComplex64 struct {
	Value    int
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfIntToComplex64WithContext struct {
	Context context.Context
	WorkOfIntToComplex64
}

var (
	zero_of_WorkOfIntToComplex64       WorkOfIntToComplex64
	zero_of_WorkOfIntToComplex64_Value int
	pool_of_WorkOfIntToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToComplex64{}
		},
	}
)

func getWorkOfIntToComplex64() *WorkOfIntToComplex64 {
	return pool_of_WorkOfIntToComplex64.Get().(*WorkOfIntToComplex64)
}
func putWorkOfIntToComplex64(d *WorkOfIntToComplex64) {
	d.Value = zero_of_WorkOfIntToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToComplex64.Put(d)
}

type _IntToComplex64 struct{}

func (_ _IntToComplex64) GetWork() *WorkOfIntToComplex64 {
	return getWorkOfIntToComplex64()
}
func (__ _IntToComplex64) GetWorkWith(value int, returnCh chan<- *ReturnOfComplex64) *WorkOfIntToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToComplex64) PutWork(d *WorkOfIntToComplex64) {
	putWorkOfIntToComplex64(d)
}

func (_ _IntToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _IntToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _IntToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _IntToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _IntToComplex64) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToComplex64) CallAsync(ctx context.Context, work *WorkOfIntToComplex64, h func(ctx context.Context, arg int) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToError interface {
	Push(ctx context.Context, work *WorkOfIntToError, returnCh chan<- *ReturnOfError)
}

type WorkOfIntToError struct {
	Value    int
	ReturnCh chan<- *ReturnOfError
}

type WorkOfIntToErrorWithContext struct {
	Context context.Context
	WorkOfIntToError
}

var (
	zero_of_WorkOfIntToError       WorkOfIntToError
	zero_of_WorkOfIntToError_Value int
	pool_of_WorkOfIntToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToError{}
		},
	}
)

func getWorkOfIntToError() *WorkOfIntToError {
	return pool_of_WorkOfIntToError.Get().(*WorkOfIntToError)
}
func putWorkOfIntToError(d *WorkOfIntToError) {
	d.Value = zero_of_WorkOfIntToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToError.Put(d)
}

type _IntToError struct{}

func (_ _IntToError) GetWork() *WorkOfIntToError {
	return getWorkOfIntToError()
}
func (__ _IntToError) GetWorkWith(value int, returnCh chan<- *ReturnOfError) *WorkOfIntToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToError) PutWork(d *WorkOfIntToError) {
	putWorkOfIntToError(d)
}

func (_ _IntToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _IntToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _IntToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _IntToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _IntToError) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToError) CallAsync(ctx context.Context, work *WorkOfIntToError, h func(ctx context.Context, arg int) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToFloat32 interface {
	Push(ctx context.Context, work *WorkOfIntToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfIntToFloat32 struct {
	Value    int
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfIntToFloat32WithContext struct {
	Context context.Context
	WorkOfIntToFloat32
}

var (
	zero_of_WorkOfIntToFloat32       WorkOfIntToFloat32
	zero_of_WorkOfIntToFloat32_Value int
	pool_of_WorkOfIntToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToFloat32{}
		},
	}
)

func getWorkOfIntToFloat32() *WorkOfIntToFloat32 {
	return pool_of_WorkOfIntToFloat32.Get().(*WorkOfIntToFloat32)
}
func putWorkOfIntToFloat32(d *WorkOfIntToFloat32) {
	d.Value = zero_of_WorkOfIntToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToFloat32.Put(d)
}

type _IntToFloat32 struct{}

func (_ _IntToFloat32) GetWork() *WorkOfIntToFloat32 {
	return getWorkOfIntToFloat32()
}
func (__ _IntToFloat32) GetWorkWith(value int, returnCh chan<- *ReturnOfFloat32) *WorkOfIntToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToFloat32) PutWork(d *WorkOfIntToFloat32) {
	putWorkOfIntToFloat32(d)
}

func (_ _IntToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _IntToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _IntToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _IntToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _IntToFloat32) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToFloat32) CallAsync(ctx context.Context, work *WorkOfIntToFloat32, h func(ctx context.Context, arg int) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToFloat64 interface {
	Push(ctx context.Context, work *WorkOfIntToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfIntToFloat64 struct {
	Value    int
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfIntToFloat64WithContext struct {
	Context context.Context
	WorkOfIntToFloat64
}

var (
	zero_of_WorkOfIntToFloat64       WorkOfIntToFloat64
	zero_of_WorkOfIntToFloat64_Value int
	pool_of_WorkOfIntToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToFloat64{}
		},
	}
)

func getWorkOfIntToFloat64() *WorkOfIntToFloat64 {
	return pool_of_WorkOfIntToFloat64.Get().(*WorkOfIntToFloat64)
}
func putWorkOfIntToFloat64(d *WorkOfIntToFloat64) {
	d.Value = zero_of_WorkOfIntToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToFloat64.Put(d)
}

type _IntToFloat64 struct{}

func (_ _IntToFloat64) GetWork() *WorkOfIntToFloat64 {
	return getWorkOfIntToFloat64()
}
func (__ _IntToFloat64) GetWorkWith(value int, returnCh chan<- *ReturnOfFloat64) *WorkOfIntToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToFloat64) PutWork(d *WorkOfIntToFloat64) {
	putWorkOfIntToFloat64(d)
}

func (_ _IntToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _IntToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _IntToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _IntToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _IntToFloat64) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToFloat64) CallAsync(ctx context.Context, work *WorkOfIntToFloat64, h func(ctx context.Context, arg int) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToInt interface {
	Push(ctx context.Context, work *WorkOfIntToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfIntToInt struct {
	Value    int
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfIntToIntWithContext struct {
	Context context.Context
	WorkOfIntToInt
}

var (
	zero_of_WorkOfIntToInt       WorkOfIntToInt
	zero_of_WorkOfIntToInt_Value int
	pool_of_WorkOfIntToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToInt{}
		},
	}
)

func getWorkOfIntToInt() *WorkOfIntToInt {
	return pool_of_WorkOfIntToInt.Get().(*WorkOfIntToInt)
}
func putWorkOfIntToInt(d *WorkOfIntToInt) {
	d.Value = zero_of_WorkOfIntToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToInt.Put(d)
}

type _IntToInt struct{}

func (_ _IntToInt) GetWork() *WorkOfIntToInt {
	return getWorkOfIntToInt()
}
func (__ _IntToInt) GetWorkWith(value int, returnCh chan<- *ReturnOfInt) *WorkOfIntToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToInt) PutWork(d *WorkOfIntToInt) {
	putWorkOfIntToInt(d)
}

func (_ _IntToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _IntToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _IntToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _IntToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _IntToInt) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToInt) CallAsync(ctx context.Context, work *WorkOfIntToInt, h func(ctx context.Context, arg int) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToInt16 interface {
	Push(ctx context.Context, work *WorkOfIntToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfIntToInt16 struct {
	Value    int
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfIntToInt16WithContext struct {
	Context context.Context
	WorkOfIntToInt16
}

var (
	zero_of_WorkOfIntToInt16       WorkOfIntToInt16
	zero_of_WorkOfIntToInt16_Value int
	pool_of_WorkOfIntToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToInt16{}
		},
	}
)

func getWorkOfIntToInt16() *WorkOfIntToInt16 {
	return pool_of_WorkOfIntToInt16.Get().(*WorkOfIntToInt16)
}
func putWorkOfIntToInt16(d *WorkOfIntToInt16) {
	d.Value = zero_of_WorkOfIntToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToInt16.Put(d)
}

type _IntToInt16 struct{}

func (_ _IntToInt16) GetWork() *WorkOfIntToInt16 {
	return getWorkOfIntToInt16()
}
func (__ _IntToInt16) GetWorkWith(value int, returnCh chan<- *ReturnOfInt16) *WorkOfIntToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToInt16) PutWork(d *WorkOfIntToInt16) {
	putWorkOfIntToInt16(d)
}

func (_ _IntToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _IntToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _IntToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _IntToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _IntToInt16) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToInt16) CallAsync(ctx context.Context, work *WorkOfIntToInt16, h func(ctx context.Context, arg int) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToInt32 interface {
	Push(ctx context.Context, work *WorkOfIntToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfIntToInt32 struct {
	Value    int
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfIntToInt32WithContext struct {
	Context context.Context
	WorkOfIntToInt32
}

var (
	zero_of_WorkOfIntToInt32       WorkOfIntToInt32
	zero_of_WorkOfIntToInt32_Value int
	pool_of_WorkOfIntToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToInt32{}
		},
	}
)

func getWorkOfIntToInt32() *WorkOfIntToInt32 {
	return pool_of_WorkOfIntToInt32.Get().(*WorkOfIntToInt32)
}
func putWorkOfIntToInt32(d *WorkOfIntToInt32) {
	d.Value = zero_of_WorkOfIntToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToInt32.Put(d)
}

type _IntToInt32 struct{}

func (_ _IntToInt32) GetWork() *WorkOfIntToInt32 {
	return getWorkOfIntToInt32()
}
func (__ _IntToInt32) GetWorkWith(value int, returnCh chan<- *ReturnOfInt32) *WorkOfIntToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToInt32) PutWork(d *WorkOfIntToInt32) {
	putWorkOfIntToInt32(d)
}

func (_ _IntToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _IntToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _IntToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _IntToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _IntToInt32) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToInt32) CallAsync(ctx context.Context, work *WorkOfIntToInt32, h func(ctx context.Context, arg int) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToInt64 interface {
	Push(ctx context.Context, work *WorkOfIntToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfIntToInt64 struct {
	Value    int
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfIntToInt64WithContext struct {
	Context context.Context
	WorkOfIntToInt64
}

var (
	zero_of_WorkOfIntToInt64       WorkOfIntToInt64
	zero_of_WorkOfIntToInt64_Value int
	pool_of_WorkOfIntToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToInt64{}
		},
	}
)

func getWorkOfIntToInt64() *WorkOfIntToInt64 {
	return pool_of_WorkOfIntToInt64.Get().(*WorkOfIntToInt64)
}
func putWorkOfIntToInt64(d *WorkOfIntToInt64) {
	d.Value = zero_of_WorkOfIntToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToInt64.Put(d)
}

type _IntToInt64 struct{}

func (_ _IntToInt64) GetWork() *WorkOfIntToInt64 {
	return getWorkOfIntToInt64()
}
func (__ _IntToInt64) GetWorkWith(value int, returnCh chan<- *ReturnOfInt64) *WorkOfIntToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToInt64) PutWork(d *WorkOfIntToInt64) {
	putWorkOfIntToInt64(d)
}

func (_ _IntToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _IntToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _IntToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _IntToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _IntToInt64) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToInt64) CallAsync(ctx context.Context, work *WorkOfIntToInt64, h func(ctx context.Context, arg int) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToInt8 interface {
	Push(ctx context.Context, work *WorkOfIntToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfIntToInt8 struct {
	Value    int
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfIntToInt8WithContext struct {
	Context context.Context
	WorkOfIntToInt8
}

var (
	zero_of_WorkOfIntToInt8       WorkOfIntToInt8
	zero_of_WorkOfIntToInt8_Value int
	pool_of_WorkOfIntToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToInt8{}
		},
	}
)

func getWorkOfIntToInt8() *WorkOfIntToInt8 {
	return pool_of_WorkOfIntToInt8.Get().(*WorkOfIntToInt8)
}
func putWorkOfIntToInt8(d *WorkOfIntToInt8) {
	d.Value = zero_of_WorkOfIntToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToInt8.Put(d)
}

type _IntToInt8 struct{}

func (_ _IntToInt8) GetWork() *WorkOfIntToInt8 {
	return getWorkOfIntToInt8()
}
func (__ _IntToInt8) GetWorkWith(value int, returnCh chan<- *ReturnOfInt8) *WorkOfIntToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToInt8) PutWork(d *WorkOfIntToInt8) {
	putWorkOfIntToInt8(d)
}

func (_ _IntToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _IntToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _IntToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _IntToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _IntToInt8) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToInt8) CallAsync(ctx context.Context, work *WorkOfIntToInt8, h func(ctx context.Context, arg int) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToRune interface {
	Push(ctx context.Context, work *WorkOfIntToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfIntToRune struct {
	Value    int
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfIntToRuneWithContext struct {
	Context context.Context
	WorkOfIntToRune
}

var (
	zero_of_WorkOfIntToRune       WorkOfIntToRune
	zero_of_WorkOfIntToRune_Value int
	pool_of_WorkOfIntToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToRune{}
		},
	}
)

func getWorkOfIntToRune() *WorkOfIntToRune {
	return pool_of_WorkOfIntToRune.Get().(*WorkOfIntToRune)
}
func putWorkOfIntToRune(d *WorkOfIntToRune) {
	d.Value = zero_of_WorkOfIntToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToRune.Put(d)
}

type _IntToRune struct{}

func (_ _IntToRune) GetWork() *WorkOfIntToRune {
	return getWorkOfIntToRune()
}
func (__ _IntToRune) GetWorkWith(value int, returnCh chan<- *ReturnOfRune) *WorkOfIntToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToRune) PutWork(d *WorkOfIntToRune) {
	putWorkOfIntToRune(d)
}

func (_ _IntToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _IntToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _IntToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _IntToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _IntToRune) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToRune) CallAsync(ctx context.Context, work *WorkOfIntToRune, h func(ctx context.Context, arg int) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToString interface {
	Push(ctx context.Context, work *WorkOfIntToString, returnCh chan<- *ReturnOfString)
}

type WorkOfIntToString struct {
	Value    int
	ReturnCh chan<- *ReturnOfString
}

type WorkOfIntToStringWithContext struct {
	Context context.Context
	WorkOfIntToString
}

var (
	zero_of_WorkOfIntToString       WorkOfIntToString
	zero_of_WorkOfIntToString_Value int
	pool_of_WorkOfIntToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToString{}
		},
	}
)

func getWorkOfIntToString() *WorkOfIntToString {
	return pool_of_WorkOfIntToString.Get().(*WorkOfIntToString)
}
func putWorkOfIntToString(d *WorkOfIntToString) {
	d.Value = zero_of_WorkOfIntToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToString.Put(d)
}

type _IntToString struct{}

func (_ _IntToString) GetWork() *WorkOfIntToString {
	return getWorkOfIntToString()
}
func (__ _IntToString) GetWorkWith(value int, returnCh chan<- *ReturnOfString) *WorkOfIntToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToString) PutWork(d *WorkOfIntToString) {
	putWorkOfIntToString(d)
}

func (_ _IntToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _IntToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _IntToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _IntToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _IntToString) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToString) CallAsync(ctx context.Context, work *WorkOfIntToString, h func(ctx context.Context, arg int) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToUint interface {
	Push(ctx context.Context, work *WorkOfIntToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfIntToUint struct {
	Value    int
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfIntToUintWithContext struct {
	Context context.Context
	WorkOfIntToUint
}

var (
	zero_of_WorkOfIntToUint       WorkOfIntToUint
	zero_of_WorkOfIntToUint_Value int
	pool_of_WorkOfIntToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToUint{}
		},
	}
)

func getWorkOfIntToUint() *WorkOfIntToUint {
	return pool_of_WorkOfIntToUint.Get().(*WorkOfIntToUint)
}
func putWorkOfIntToUint(d *WorkOfIntToUint) {
	d.Value = zero_of_WorkOfIntToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToUint.Put(d)
}

type _IntToUint struct{}

func (_ _IntToUint) GetWork() *WorkOfIntToUint {
	return getWorkOfIntToUint()
}
func (__ _IntToUint) GetWorkWith(value int, returnCh chan<- *ReturnOfUint) *WorkOfIntToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToUint) PutWork(d *WorkOfIntToUint) {
	putWorkOfIntToUint(d)
}

func (_ _IntToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _IntToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _IntToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _IntToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _IntToUint) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToUint) CallAsync(ctx context.Context, work *WorkOfIntToUint, h func(ctx context.Context, arg int) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToUint16 interface {
	Push(ctx context.Context, work *WorkOfIntToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfIntToUint16 struct {
	Value    int
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfIntToUint16WithContext struct {
	Context context.Context
	WorkOfIntToUint16
}

var (
	zero_of_WorkOfIntToUint16       WorkOfIntToUint16
	zero_of_WorkOfIntToUint16_Value int
	pool_of_WorkOfIntToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToUint16{}
		},
	}
)

func getWorkOfIntToUint16() *WorkOfIntToUint16 {
	return pool_of_WorkOfIntToUint16.Get().(*WorkOfIntToUint16)
}
func putWorkOfIntToUint16(d *WorkOfIntToUint16) {
	d.Value = zero_of_WorkOfIntToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToUint16.Put(d)
}

type _IntToUint16 struct{}

func (_ _IntToUint16) GetWork() *WorkOfIntToUint16 {
	return getWorkOfIntToUint16()
}
func (__ _IntToUint16) GetWorkWith(value int, returnCh chan<- *ReturnOfUint16) *WorkOfIntToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToUint16) PutWork(d *WorkOfIntToUint16) {
	putWorkOfIntToUint16(d)
}

func (_ _IntToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _IntToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _IntToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _IntToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _IntToUint16) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToUint16) CallAsync(ctx context.Context, work *WorkOfIntToUint16, h func(ctx context.Context, arg int) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToUint32 interface {
	Push(ctx context.Context, work *WorkOfIntToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfIntToUint32 struct {
	Value    int
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfIntToUint32WithContext struct {
	Context context.Context
	WorkOfIntToUint32
}

var (
	zero_of_WorkOfIntToUint32       WorkOfIntToUint32
	zero_of_WorkOfIntToUint32_Value int
	pool_of_WorkOfIntToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToUint32{}
		},
	}
)

func getWorkOfIntToUint32() *WorkOfIntToUint32 {
	return pool_of_WorkOfIntToUint32.Get().(*WorkOfIntToUint32)
}
func putWorkOfIntToUint32(d *WorkOfIntToUint32) {
	d.Value = zero_of_WorkOfIntToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToUint32.Put(d)
}

type _IntToUint32 struct{}

func (_ _IntToUint32) GetWork() *WorkOfIntToUint32 {
	return getWorkOfIntToUint32()
}
func (__ _IntToUint32) GetWorkWith(value int, returnCh chan<- *ReturnOfUint32) *WorkOfIntToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToUint32) PutWork(d *WorkOfIntToUint32) {
	putWorkOfIntToUint32(d)
}

func (_ _IntToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _IntToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _IntToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _IntToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _IntToUint32) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToUint32) CallAsync(ctx context.Context, work *WorkOfIntToUint32, h func(ctx context.Context, arg int) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToUint64 interface {
	Push(ctx context.Context, work *WorkOfIntToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfIntToUint64 struct {
	Value    int
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfIntToUint64WithContext struct {
	Context context.Context
	WorkOfIntToUint64
}

var (
	zero_of_WorkOfIntToUint64       WorkOfIntToUint64
	zero_of_WorkOfIntToUint64_Value int
	pool_of_WorkOfIntToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToUint64{}
		},
	}
)

func getWorkOfIntToUint64() *WorkOfIntToUint64 {
	return pool_of_WorkOfIntToUint64.Get().(*WorkOfIntToUint64)
}
func putWorkOfIntToUint64(d *WorkOfIntToUint64) {
	d.Value = zero_of_WorkOfIntToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToUint64.Put(d)
}

type _IntToUint64 struct{}

func (_ _IntToUint64) GetWork() *WorkOfIntToUint64 {
	return getWorkOfIntToUint64()
}
func (__ _IntToUint64) GetWorkWith(value int, returnCh chan<- *ReturnOfUint64) *WorkOfIntToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToUint64) PutWork(d *WorkOfIntToUint64) {
	putWorkOfIntToUint64(d)
}

func (_ _IntToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _IntToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _IntToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _IntToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _IntToUint64) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToUint64) CallAsync(ctx context.Context, work *WorkOfIntToUint64, h func(ctx context.Context, arg int) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToUint8 interface {
	Push(ctx context.Context, work *WorkOfIntToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfIntToUint8 struct {
	Value    int
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfIntToUint8WithContext struct {
	Context context.Context
	WorkOfIntToUint8
}

var (
	zero_of_WorkOfIntToUint8       WorkOfIntToUint8
	zero_of_WorkOfIntToUint8_Value int
	pool_of_WorkOfIntToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToUint8{}
		},
	}
)

func getWorkOfIntToUint8() *WorkOfIntToUint8 {
	return pool_of_WorkOfIntToUint8.Get().(*WorkOfIntToUint8)
}
func putWorkOfIntToUint8(d *WorkOfIntToUint8) {
	d.Value = zero_of_WorkOfIntToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToUint8.Put(d)
}

type _IntToUint8 struct{}

func (_ _IntToUint8) GetWork() *WorkOfIntToUint8 {
	return getWorkOfIntToUint8()
}
func (__ _IntToUint8) GetWorkWith(value int, returnCh chan<- *ReturnOfUint8) *WorkOfIntToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToUint8) PutWork(d *WorkOfIntToUint8) {
	putWorkOfIntToUint8(d)
}

func (_ _IntToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _IntToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _IntToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _IntToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _IntToUint8) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToUint8) CallAsync(ctx context.Context, work *WorkOfIntToUint8, h func(ctx context.Context, arg int) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToUintptr interface {
	Push(ctx context.Context, work *WorkOfIntToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfIntToUintptr struct {
	Value    int
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfIntToUintptrWithContext struct {
	Context context.Context
	WorkOfIntToUintptr
}

var (
	zero_of_WorkOfIntToUintptr       WorkOfIntToUintptr
	zero_of_WorkOfIntToUintptr_Value int
	pool_of_WorkOfIntToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToUintptr{}
		},
	}
)

func getWorkOfIntToUintptr() *WorkOfIntToUintptr {
	return pool_of_WorkOfIntToUintptr.Get().(*WorkOfIntToUintptr)
}
func putWorkOfIntToUintptr(d *WorkOfIntToUintptr) {
	d.Value = zero_of_WorkOfIntToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToUintptr.Put(d)
}

type _IntToUintptr struct{}

func (_ _IntToUintptr) GetWork() *WorkOfIntToUintptr {
	return getWorkOfIntToUintptr()
}
func (__ _IntToUintptr) GetWorkWith(value int, returnCh chan<- *ReturnOfUintptr) *WorkOfIntToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToUintptr) PutWork(d *WorkOfIntToUintptr) {
	putWorkOfIntToUintptr(d)
}

func (_ _IntToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _IntToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _IntToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _IntToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _IntToUintptr) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToUintptr) CallAsync(ctx context.Context, work *WorkOfIntToUintptr, h func(ctx context.Context, arg int) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToBytes interface {
	Push(ctx context.Context, work *WorkOfIntToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfIntToBytes struct {
	Value    int
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfIntToBytesWithContext struct {
	Context context.Context
	WorkOfIntToBytes
}

var (
	zero_of_WorkOfIntToBytes       WorkOfIntToBytes
	zero_of_WorkOfIntToBytes_Value int
	pool_of_WorkOfIntToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToBytes{}
		},
	}
)

func getWorkOfIntToBytes() *WorkOfIntToBytes {
	return pool_of_WorkOfIntToBytes.Get().(*WorkOfIntToBytes)
}
func putWorkOfIntToBytes(d *WorkOfIntToBytes) {
	d.Value = zero_of_WorkOfIntToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToBytes.Put(d)
}

type _IntToBytes struct{}

func (_ _IntToBytes) GetWork() *WorkOfIntToBytes {
	return getWorkOfIntToBytes()
}
func (__ _IntToBytes) GetWorkWith(value int, returnCh chan<- *ReturnOfBytes) *WorkOfIntToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToBytes) PutWork(d *WorkOfIntToBytes) {
	putWorkOfIntToBytes(d)
}

func (_ _IntToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _IntToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _IntToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _IntToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _IntToBytes) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToBytes) CallAsync(ctx context.Context, work *WorkOfIntToBytes, h func(ctx context.Context, arg int) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfIntToInterface interface {
	Push(ctx context.Context, work *WorkOfIntToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfIntToInterface struct {
	Value    int
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfIntToInterfaceWithContext struct {
	Context context.Context
	WorkOfIntToInterface
}

var (
	zero_of_WorkOfIntToInterface       WorkOfIntToInterface
	zero_of_WorkOfIntToInterface_Value int
	pool_of_WorkOfIntToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfIntToInterface{}
		},
	}
)

func getWorkOfIntToInterface() *WorkOfIntToInterface {
	return pool_of_WorkOfIntToInterface.Get().(*WorkOfIntToInterface)
}
func putWorkOfIntToInterface(d *WorkOfIntToInterface) {
	d.Value = zero_of_WorkOfIntToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfIntToInterface.Put(d)
}

type _IntToInterface struct{}

func (_ _IntToInterface) GetWork() *WorkOfIntToInterface {
	return getWorkOfIntToInterface()
}
func (__ _IntToInterface) GetWorkWith(value int, returnCh chan<- *ReturnOfInterface) *WorkOfIntToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _IntToInterface) PutWork(d *WorkOfIntToInterface) {
	putWorkOfIntToInterface(d)
}

func (_ _IntToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _IntToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _IntToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _IntToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _IntToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _IntToInterface) CallSync(ctx context.Context, value int, push func(ctx context.Context, work *WorkOfIntToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _IntToInterface) CallAsync(ctx context.Context, work *WorkOfIntToInterface, h func(ctx context.Context, arg int) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToBool interface {
	Push(ctx context.Context, work *WorkOfInt16ToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfInt16ToBool struct {
	Value    int16
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfInt16ToBoolWithContext struct {
	Context context.Context
	WorkOfInt16ToBool
}

var (
	zero_of_WorkOfInt16ToBool       WorkOfInt16ToBool
	zero_of_WorkOfInt16ToBool_Value int16
	pool_of_WorkOfInt16ToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToBool{}
		},
	}
)

func getWorkOfInt16ToBool() *WorkOfInt16ToBool {
	return pool_of_WorkOfInt16ToBool.Get().(*WorkOfInt16ToBool)
}
func putWorkOfInt16ToBool(d *WorkOfInt16ToBool) {
	d.Value = zero_of_WorkOfInt16ToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToBool.Put(d)
}

type _Int16ToBool struct{}

func (_ _Int16ToBool) GetWork() *WorkOfInt16ToBool {
	return getWorkOfInt16ToBool()
}
func (__ _Int16ToBool) GetWorkWith(value int16, returnCh chan<- *ReturnOfBool) *WorkOfInt16ToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToBool) PutWork(d *WorkOfInt16ToBool) {
	putWorkOfInt16ToBool(d)
}

func (_ _Int16ToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _Int16ToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _Int16ToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _Int16ToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _Int16ToBool) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToBool) CallAsync(ctx context.Context, work *WorkOfInt16ToBool, h func(ctx context.Context, arg int16) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToByte interface {
	Push(ctx context.Context, work *WorkOfInt16ToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfInt16ToByte struct {
	Value    int16
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfInt16ToByteWithContext struct {
	Context context.Context
	WorkOfInt16ToByte
}

var (
	zero_of_WorkOfInt16ToByte       WorkOfInt16ToByte
	zero_of_WorkOfInt16ToByte_Value int16
	pool_of_WorkOfInt16ToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToByte{}
		},
	}
)

func getWorkOfInt16ToByte() *WorkOfInt16ToByte {
	return pool_of_WorkOfInt16ToByte.Get().(*WorkOfInt16ToByte)
}
func putWorkOfInt16ToByte(d *WorkOfInt16ToByte) {
	d.Value = zero_of_WorkOfInt16ToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToByte.Put(d)
}

type _Int16ToByte struct{}

func (_ _Int16ToByte) GetWork() *WorkOfInt16ToByte {
	return getWorkOfInt16ToByte()
}
func (__ _Int16ToByte) GetWorkWith(value int16, returnCh chan<- *ReturnOfByte) *WorkOfInt16ToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToByte) PutWork(d *WorkOfInt16ToByte) {
	putWorkOfInt16ToByte(d)
}

func (_ _Int16ToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _Int16ToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _Int16ToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _Int16ToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _Int16ToByte) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToByte) CallAsync(ctx context.Context, work *WorkOfInt16ToByte, h func(ctx context.Context, arg int16) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToComplex128 interface {
	Push(ctx context.Context, work *WorkOfInt16ToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfInt16ToComplex128 struct {
	Value    int16
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfInt16ToComplex128WithContext struct {
	Context context.Context
	WorkOfInt16ToComplex128
}

var (
	zero_of_WorkOfInt16ToComplex128       WorkOfInt16ToComplex128
	zero_of_WorkOfInt16ToComplex128_Value int16
	pool_of_WorkOfInt16ToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToComplex128{}
		},
	}
)

func getWorkOfInt16ToComplex128() *WorkOfInt16ToComplex128 {
	return pool_of_WorkOfInt16ToComplex128.Get().(*WorkOfInt16ToComplex128)
}
func putWorkOfInt16ToComplex128(d *WorkOfInt16ToComplex128) {
	d.Value = zero_of_WorkOfInt16ToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToComplex128.Put(d)
}

type _Int16ToComplex128 struct{}

func (_ _Int16ToComplex128) GetWork() *WorkOfInt16ToComplex128 {
	return getWorkOfInt16ToComplex128()
}
func (__ _Int16ToComplex128) GetWorkWith(value int16, returnCh chan<- *ReturnOfComplex128) *WorkOfInt16ToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToComplex128) PutWork(d *WorkOfInt16ToComplex128) {
	putWorkOfInt16ToComplex128(d)
}

func (_ _Int16ToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _Int16ToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _Int16ToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _Int16ToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _Int16ToComplex128) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToComplex128) CallAsync(ctx context.Context, work *WorkOfInt16ToComplex128, h func(ctx context.Context, arg int16) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToComplex64 interface {
	Push(ctx context.Context, work *WorkOfInt16ToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfInt16ToComplex64 struct {
	Value    int16
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfInt16ToComplex64WithContext struct {
	Context context.Context
	WorkOfInt16ToComplex64
}

var (
	zero_of_WorkOfInt16ToComplex64       WorkOfInt16ToComplex64
	zero_of_WorkOfInt16ToComplex64_Value int16
	pool_of_WorkOfInt16ToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToComplex64{}
		},
	}
)

func getWorkOfInt16ToComplex64() *WorkOfInt16ToComplex64 {
	return pool_of_WorkOfInt16ToComplex64.Get().(*WorkOfInt16ToComplex64)
}
func putWorkOfInt16ToComplex64(d *WorkOfInt16ToComplex64) {
	d.Value = zero_of_WorkOfInt16ToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToComplex64.Put(d)
}

type _Int16ToComplex64 struct{}

func (_ _Int16ToComplex64) GetWork() *WorkOfInt16ToComplex64 {
	return getWorkOfInt16ToComplex64()
}
func (__ _Int16ToComplex64) GetWorkWith(value int16, returnCh chan<- *ReturnOfComplex64) *WorkOfInt16ToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToComplex64) PutWork(d *WorkOfInt16ToComplex64) {
	putWorkOfInt16ToComplex64(d)
}

func (_ _Int16ToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _Int16ToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _Int16ToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _Int16ToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _Int16ToComplex64) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToComplex64) CallAsync(ctx context.Context, work *WorkOfInt16ToComplex64, h func(ctx context.Context, arg int16) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToError interface {
	Push(ctx context.Context, work *WorkOfInt16ToError, returnCh chan<- *ReturnOfError)
}

type WorkOfInt16ToError struct {
	Value    int16
	ReturnCh chan<- *ReturnOfError
}

type WorkOfInt16ToErrorWithContext struct {
	Context context.Context
	WorkOfInt16ToError
}

var (
	zero_of_WorkOfInt16ToError       WorkOfInt16ToError
	zero_of_WorkOfInt16ToError_Value int16
	pool_of_WorkOfInt16ToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToError{}
		},
	}
)

func getWorkOfInt16ToError() *WorkOfInt16ToError {
	return pool_of_WorkOfInt16ToError.Get().(*WorkOfInt16ToError)
}
func putWorkOfInt16ToError(d *WorkOfInt16ToError) {
	d.Value = zero_of_WorkOfInt16ToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToError.Put(d)
}

type _Int16ToError struct{}

func (_ _Int16ToError) GetWork() *WorkOfInt16ToError {
	return getWorkOfInt16ToError()
}
func (__ _Int16ToError) GetWorkWith(value int16, returnCh chan<- *ReturnOfError) *WorkOfInt16ToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToError) PutWork(d *WorkOfInt16ToError) {
	putWorkOfInt16ToError(d)
}

func (_ _Int16ToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _Int16ToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _Int16ToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _Int16ToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _Int16ToError) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToError) CallAsync(ctx context.Context, work *WorkOfInt16ToError, h func(ctx context.Context, arg int16) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToFloat32 interface {
	Push(ctx context.Context, work *WorkOfInt16ToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfInt16ToFloat32 struct {
	Value    int16
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfInt16ToFloat32WithContext struct {
	Context context.Context
	WorkOfInt16ToFloat32
}

var (
	zero_of_WorkOfInt16ToFloat32       WorkOfInt16ToFloat32
	zero_of_WorkOfInt16ToFloat32_Value int16
	pool_of_WorkOfInt16ToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToFloat32{}
		},
	}
)

func getWorkOfInt16ToFloat32() *WorkOfInt16ToFloat32 {
	return pool_of_WorkOfInt16ToFloat32.Get().(*WorkOfInt16ToFloat32)
}
func putWorkOfInt16ToFloat32(d *WorkOfInt16ToFloat32) {
	d.Value = zero_of_WorkOfInt16ToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToFloat32.Put(d)
}

type _Int16ToFloat32 struct{}

func (_ _Int16ToFloat32) GetWork() *WorkOfInt16ToFloat32 {
	return getWorkOfInt16ToFloat32()
}
func (__ _Int16ToFloat32) GetWorkWith(value int16, returnCh chan<- *ReturnOfFloat32) *WorkOfInt16ToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToFloat32) PutWork(d *WorkOfInt16ToFloat32) {
	putWorkOfInt16ToFloat32(d)
}

func (_ _Int16ToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _Int16ToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _Int16ToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _Int16ToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _Int16ToFloat32) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToFloat32) CallAsync(ctx context.Context, work *WorkOfInt16ToFloat32, h func(ctx context.Context, arg int16) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToFloat64 interface {
	Push(ctx context.Context, work *WorkOfInt16ToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfInt16ToFloat64 struct {
	Value    int16
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfInt16ToFloat64WithContext struct {
	Context context.Context
	WorkOfInt16ToFloat64
}

var (
	zero_of_WorkOfInt16ToFloat64       WorkOfInt16ToFloat64
	zero_of_WorkOfInt16ToFloat64_Value int16
	pool_of_WorkOfInt16ToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToFloat64{}
		},
	}
)

func getWorkOfInt16ToFloat64() *WorkOfInt16ToFloat64 {
	return pool_of_WorkOfInt16ToFloat64.Get().(*WorkOfInt16ToFloat64)
}
func putWorkOfInt16ToFloat64(d *WorkOfInt16ToFloat64) {
	d.Value = zero_of_WorkOfInt16ToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToFloat64.Put(d)
}

type _Int16ToFloat64 struct{}

func (_ _Int16ToFloat64) GetWork() *WorkOfInt16ToFloat64 {
	return getWorkOfInt16ToFloat64()
}
func (__ _Int16ToFloat64) GetWorkWith(value int16, returnCh chan<- *ReturnOfFloat64) *WorkOfInt16ToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToFloat64) PutWork(d *WorkOfInt16ToFloat64) {
	putWorkOfInt16ToFloat64(d)
}

func (_ _Int16ToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _Int16ToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _Int16ToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _Int16ToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _Int16ToFloat64) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToFloat64) CallAsync(ctx context.Context, work *WorkOfInt16ToFloat64, h func(ctx context.Context, arg int16) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToInt interface {
	Push(ctx context.Context, work *WorkOfInt16ToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfInt16ToInt struct {
	Value    int16
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfInt16ToIntWithContext struct {
	Context context.Context
	WorkOfInt16ToInt
}

var (
	zero_of_WorkOfInt16ToInt       WorkOfInt16ToInt
	zero_of_WorkOfInt16ToInt_Value int16
	pool_of_WorkOfInt16ToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToInt{}
		},
	}
)

func getWorkOfInt16ToInt() *WorkOfInt16ToInt {
	return pool_of_WorkOfInt16ToInt.Get().(*WorkOfInt16ToInt)
}
func putWorkOfInt16ToInt(d *WorkOfInt16ToInt) {
	d.Value = zero_of_WorkOfInt16ToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToInt.Put(d)
}

type _Int16ToInt struct{}

func (_ _Int16ToInt) GetWork() *WorkOfInt16ToInt {
	return getWorkOfInt16ToInt()
}
func (__ _Int16ToInt) GetWorkWith(value int16, returnCh chan<- *ReturnOfInt) *WorkOfInt16ToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToInt) PutWork(d *WorkOfInt16ToInt) {
	putWorkOfInt16ToInt(d)
}

func (_ _Int16ToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _Int16ToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _Int16ToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _Int16ToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _Int16ToInt) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToInt) CallAsync(ctx context.Context, work *WorkOfInt16ToInt, h func(ctx context.Context, arg int16) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToInt16 interface {
	Push(ctx context.Context, work *WorkOfInt16ToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfInt16ToInt16 struct {
	Value    int16
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfInt16ToInt16WithContext struct {
	Context context.Context
	WorkOfInt16ToInt16
}

var (
	zero_of_WorkOfInt16ToInt16       WorkOfInt16ToInt16
	zero_of_WorkOfInt16ToInt16_Value int16
	pool_of_WorkOfInt16ToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToInt16{}
		},
	}
)

func getWorkOfInt16ToInt16() *WorkOfInt16ToInt16 {
	return pool_of_WorkOfInt16ToInt16.Get().(*WorkOfInt16ToInt16)
}
func putWorkOfInt16ToInt16(d *WorkOfInt16ToInt16) {
	d.Value = zero_of_WorkOfInt16ToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToInt16.Put(d)
}

type _Int16ToInt16 struct{}

func (_ _Int16ToInt16) GetWork() *WorkOfInt16ToInt16 {
	return getWorkOfInt16ToInt16()
}
func (__ _Int16ToInt16) GetWorkWith(value int16, returnCh chan<- *ReturnOfInt16) *WorkOfInt16ToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToInt16) PutWork(d *WorkOfInt16ToInt16) {
	putWorkOfInt16ToInt16(d)
}

func (_ _Int16ToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _Int16ToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _Int16ToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _Int16ToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _Int16ToInt16) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToInt16) CallAsync(ctx context.Context, work *WorkOfInt16ToInt16, h func(ctx context.Context, arg int16) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToInt32 interface {
	Push(ctx context.Context, work *WorkOfInt16ToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfInt16ToInt32 struct {
	Value    int16
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfInt16ToInt32WithContext struct {
	Context context.Context
	WorkOfInt16ToInt32
}

var (
	zero_of_WorkOfInt16ToInt32       WorkOfInt16ToInt32
	zero_of_WorkOfInt16ToInt32_Value int16
	pool_of_WorkOfInt16ToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToInt32{}
		},
	}
)

func getWorkOfInt16ToInt32() *WorkOfInt16ToInt32 {
	return pool_of_WorkOfInt16ToInt32.Get().(*WorkOfInt16ToInt32)
}
func putWorkOfInt16ToInt32(d *WorkOfInt16ToInt32) {
	d.Value = zero_of_WorkOfInt16ToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToInt32.Put(d)
}

type _Int16ToInt32 struct{}

func (_ _Int16ToInt32) GetWork() *WorkOfInt16ToInt32 {
	return getWorkOfInt16ToInt32()
}
func (__ _Int16ToInt32) GetWorkWith(value int16, returnCh chan<- *ReturnOfInt32) *WorkOfInt16ToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToInt32) PutWork(d *WorkOfInt16ToInt32) {
	putWorkOfInt16ToInt32(d)
}

func (_ _Int16ToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _Int16ToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _Int16ToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _Int16ToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _Int16ToInt32) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToInt32) CallAsync(ctx context.Context, work *WorkOfInt16ToInt32, h func(ctx context.Context, arg int16) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToInt64 interface {
	Push(ctx context.Context, work *WorkOfInt16ToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfInt16ToInt64 struct {
	Value    int16
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfInt16ToInt64WithContext struct {
	Context context.Context
	WorkOfInt16ToInt64
}

var (
	zero_of_WorkOfInt16ToInt64       WorkOfInt16ToInt64
	zero_of_WorkOfInt16ToInt64_Value int16
	pool_of_WorkOfInt16ToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToInt64{}
		},
	}
)

func getWorkOfInt16ToInt64() *WorkOfInt16ToInt64 {
	return pool_of_WorkOfInt16ToInt64.Get().(*WorkOfInt16ToInt64)
}
func putWorkOfInt16ToInt64(d *WorkOfInt16ToInt64) {
	d.Value = zero_of_WorkOfInt16ToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToInt64.Put(d)
}

type _Int16ToInt64 struct{}

func (_ _Int16ToInt64) GetWork() *WorkOfInt16ToInt64 {
	return getWorkOfInt16ToInt64()
}
func (__ _Int16ToInt64) GetWorkWith(value int16, returnCh chan<- *ReturnOfInt64) *WorkOfInt16ToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToInt64) PutWork(d *WorkOfInt16ToInt64) {
	putWorkOfInt16ToInt64(d)
}

func (_ _Int16ToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _Int16ToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _Int16ToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _Int16ToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _Int16ToInt64) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToInt64) CallAsync(ctx context.Context, work *WorkOfInt16ToInt64, h func(ctx context.Context, arg int16) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToInt8 interface {
	Push(ctx context.Context, work *WorkOfInt16ToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfInt16ToInt8 struct {
	Value    int16
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfInt16ToInt8WithContext struct {
	Context context.Context
	WorkOfInt16ToInt8
}

var (
	zero_of_WorkOfInt16ToInt8       WorkOfInt16ToInt8
	zero_of_WorkOfInt16ToInt8_Value int16
	pool_of_WorkOfInt16ToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToInt8{}
		},
	}
)

func getWorkOfInt16ToInt8() *WorkOfInt16ToInt8 {
	return pool_of_WorkOfInt16ToInt8.Get().(*WorkOfInt16ToInt8)
}
func putWorkOfInt16ToInt8(d *WorkOfInt16ToInt8) {
	d.Value = zero_of_WorkOfInt16ToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToInt8.Put(d)
}

type _Int16ToInt8 struct{}

func (_ _Int16ToInt8) GetWork() *WorkOfInt16ToInt8 {
	return getWorkOfInt16ToInt8()
}
func (__ _Int16ToInt8) GetWorkWith(value int16, returnCh chan<- *ReturnOfInt8) *WorkOfInt16ToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToInt8) PutWork(d *WorkOfInt16ToInt8) {
	putWorkOfInt16ToInt8(d)
}

func (_ _Int16ToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _Int16ToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _Int16ToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _Int16ToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _Int16ToInt8) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToInt8) CallAsync(ctx context.Context, work *WorkOfInt16ToInt8, h func(ctx context.Context, arg int16) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToRune interface {
	Push(ctx context.Context, work *WorkOfInt16ToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfInt16ToRune struct {
	Value    int16
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfInt16ToRuneWithContext struct {
	Context context.Context
	WorkOfInt16ToRune
}

var (
	zero_of_WorkOfInt16ToRune       WorkOfInt16ToRune
	zero_of_WorkOfInt16ToRune_Value int16
	pool_of_WorkOfInt16ToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToRune{}
		},
	}
)

func getWorkOfInt16ToRune() *WorkOfInt16ToRune {
	return pool_of_WorkOfInt16ToRune.Get().(*WorkOfInt16ToRune)
}
func putWorkOfInt16ToRune(d *WorkOfInt16ToRune) {
	d.Value = zero_of_WorkOfInt16ToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToRune.Put(d)
}

type _Int16ToRune struct{}

func (_ _Int16ToRune) GetWork() *WorkOfInt16ToRune {
	return getWorkOfInt16ToRune()
}
func (__ _Int16ToRune) GetWorkWith(value int16, returnCh chan<- *ReturnOfRune) *WorkOfInt16ToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToRune) PutWork(d *WorkOfInt16ToRune) {
	putWorkOfInt16ToRune(d)
}

func (_ _Int16ToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _Int16ToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _Int16ToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _Int16ToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _Int16ToRune) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToRune) CallAsync(ctx context.Context, work *WorkOfInt16ToRune, h func(ctx context.Context, arg int16) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToString interface {
	Push(ctx context.Context, work *WorkOfInt16ToString, returnCh chan<- *ReturnOfString)
}

type WorkOfInt16ToString struct {
	Value    int16
	ReturnCh chan<- *ReturnOfString
}

type WorkOfInt16ToStringWithContext struct {
	Context context.Context
	WorkOfInt16ToString
}

var (
	zero_of_WorkOfInt16ToString       WorkOfInt16ToString
	zero_of_WorkOfInt16ToString_Value int16
	pool_of_WorkOfInt16ToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToString{}
		},
	}
)

func getWorkOfInt16ToString() *WorkOfInt16ToString {
	return pool_of_WorkOfInt16ToString.Get().(*WorkOfInt16ToString)
}
func putWorkOfInt16ToString(d *WorkOfInt16ToString) {
	d.Value = zero_of_WorkOfInt16ToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToString.Put(d)
}

type _Int16ToString struct{}

func (_ _Int16ToString) GetWork() *WorkOfInt16ToString {
	return getWorkOfInt16ToString()
}
func (__ _Int16ToString) GetWorkWith(value int16, returnCh chan<- *ReturnOfString) *WorkOfInt16ToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToString) PutWork(d *WorkOfInt16ToString) {
	putWorkOfInt16ToString(d)
}

func (_ _Int16ToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _Int16ToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _Int16ToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _Int16ToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _Int16ToString) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToString) CallAsync(ctx context.Context, work *WorkOfInt16ToString, h func(ctx context.Context, arg int16) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToUint interface {
	Push(ctx context.Context, work *WorkOfInt16ToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfInt16ToUint struct {
	Value    int16
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfInt16ToUintWithContext struct {
	Context context.Context
	WorkOfInt16ToUint
}

var (
	zero_of_WorkOfInt16ToUint       WorkOfInt16ToUint
	zero_of_WorkOfInt16ToUint_Value int16
	pool_of_WorkOfInt16ToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToUint{}
		},
	}
)

func getWorkOfInt16ToUint() *WorkOfInt16ToUint {
	return pool_of_WorkOfInt16ToUint.Get().(*WorkOfInt16ToUint)
}
func putWorkOfInt16ToUint(d *WorkOfInt16ToUint) {
	d.Value = zero_of_WorkOfInt16ToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToUint.Put(d)
}

type _Int16ToUint struct{}

func (_ _Int16ToUint) GetWork() *WorkOfInt16ToUint {
	return getWorkOfInt16ToUint()
}
func (__ _Int16ToUint) GetWorkWith(value int16, returnCh chan<- *ReturnOfUint) *WorkOfInt16ToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToUint) PutWork(d *WorkOfInt16ToUint) {
	putWorkOfInt16ToUint(d)
}

func (_ _Int16ToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _Int16ToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _Int16ToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _Int16ToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _Int16ToUint) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToUint) CallAsync(ctx context.Context, work *WorkOfInt16ToUint, h func(ctx context.Context, arg int16) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToUint16 interface {
	Push(ctx context.Context, work *WorkOfInt16ToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfInt16ToUint16 struct {
	Value    int16
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfInt16ToUint16WithContext struct {
	Context context.Context
	WorkOfInt16ToUint16
}

var (
	zero_of_WorkOfInt16ToUint16       WorkOfInt16ToUint16
	zero_of_WorkOfInt16ToUint16_Value int16
	pool_of_WorkOfInt16ToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToUint16{}
		},
	}
)

func getWorkOfInt16ToUint16() *WorkOfInt16ToUint16 {
	return pool_of_WorkOfInt16ToUint16.Get().(*WorkOfInt16ToUint16)
}
func putWorkOfInt16ToUint16(d *WorkOfInt16ToUint16) {
	d.Value = zero_of_WorkOfInt16ToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToUint16.Put(d)
}

type _Int16ToUint16 struct{}

func (_ _Int16ToUint16) GetWork() *WorkOfInt16ToUint16 {
	return getWorkOfInt16ToUint16()
}
func (__ _Int16ToUint16) GetWorkWith(value int16, returnCh chan<- *ReturnOfUint16) *WorkOfInt16ToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToUint16) PutWork(d *WorkOfInt16ToUint16) {
	putWorkOfInt16ToUint16(d)
}

func (_ _Int16ToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _Int16ToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _Int16ToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _Int16ToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _Int16ToUint16) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToUint16) CallAsync(ctx context.Context, work *WorkOfInt16ToUint16, h func(ctx context.Context, arg int16) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToUint32 interface {
	Push(ctx context.Context, work *WorkOfInt16ToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfInt16ToUint32 struct {
	Value    int16
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfInt16ToUint32WithContext struct {
	Context context.Context
	WorkOfInt16ToUint32
}

var (
	zero_of_WorkOfInt16ToUint32       WorkOfInt16ToUint32
	zero_of_WorkOfInt16ToUint32_Value int16
	pool_of_WorkOfInt16ToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToUint32{}
		},
	}
)

func getWorkOfInt16ToUint32() *WorkOfInt16ToUint32 {
	return pool_of_WorkOfInt16ToUint32.Get().(*WorkOfInt16ToUint32)
}
func putWorkOfInt16ToUint32(d *WorkOfInt16ToUint32) {
	d.Value = zero_of_WorkOfInt16ToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToUint32.Put(d)
}

type _Int16ToUint32 struct{}

func (_ _Int16ToUint32) GetWork() *WorkOfInt16ToUint32 {
	return getWorkOfInt16ToUint32()
}
func (__ _Int16ToUint32) GetWorkWith(value int16, returnCh chan<- *ReturnOfUint32) *WorkOfInt16ToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToUint32) PutWork(d *WorkOfInt16ToUint32) {
	putWorkOfInt16ToUint32(d)
}

func (_ _Int16ToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _Int16ToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _Int16ToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _Int16ToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _Int16ToUint32) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToUint32) CallAsync(ctx context.Context, work *WorkOfInt16ToUint32, h func(ctx context.Context, arg int16) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToUint64 interface {
	Push(ctx context.Context, work *WorkOfInt16ToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfInt16ToUint64 struct {
	Value    int16
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfInt16ToUint64WithContext struct {
	Context context.Context
	WorkOfInt16ToUint64
}

var (
	zero_of_WorkOfInt16ToUint64       WorkOfInt16ToUint64
	zero_of_WorkOfInt16ToUint64_Value int16
	pool_of_WorkOfInt16ToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToUint64{}
		},
	}
)

func getWorkOfInt16ToUint64() *WorkOfInt16ToUint64 {
	return pool_of_WorkOfInt16ToUint64.Get().(*WorkOfInt16ToUint64)
}
func putWorkOfInt16ToUint64(d *WorkOfInt16ToUint64) {
	d.Value = zero_of_WorkOfInt16ToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToUint64.Put(d)
}

type _Int16ToUint64 struct{}

func (_ _Int16ToUint64) GetWork() *WorkOfInt16ToUint64 {
	return getWorkOfInt16ToUint64()
}
func (__ _Int16ToUint64) GetWorkWith(value int16, returnCh chan<- *ReturnOfUint64) *WorkOfInt16ToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToUint64) PutWork(d *WorkOfInt16ToUint64) {
	putWorkOfInt16ToUint64(d)
}

func (_ _Int16ToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _Int16ToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _Int16ToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _Int16ToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _Int16ToUint64) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToUint64) CallAsync(ctx context.Context, work *WorkOfInt16ToUint64, h func(ctx context.Context, arg int16) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToUint8 interface {
	Push(ctx context.Context, work *WorkOfInt16ToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfInt16ToUint8 struct {
	Value    int16
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfInt16ToUint8WithContext struct {
	Context context.Context
	WorkOfInt16ToUint8
}

var (
	zero_of_WorkOfInt16ToUint8       WorkOfInt16ToUint8
	zero_of_WorkOfInt16ToUint8_Value int16
	pool_of_WorkOfInt16ToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToUint8{}
		},
	}
)

func getWorkOfInt16ToUint8() *WorkOfInt16ToUint8 {
	return pool_of_WorkOfInt16ToUint8.Get().(*WorkOfInt16ToUint8)
}
func putWorkOfInt16ToUint8(d *WorkOfInt16ToUint8) {
	d.Value = zero_of_WorkOfInt16ToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToUint8.Put(d)
}

type _Int16ToUint8 struct{}

func (_ _Int16ToUint8) GetWork() *WorkOfInt16ToUint8 {
	return getWorkOfInt16ToUint8()
}
func (__ _Int16ToUint8) GetWorkWith(value int16, returnCh chan<- *ReturnOfUint8) *WorkOfInt16ToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToUint8) PutWork(d *WorkOfInt16ToUint8) {
	putWorkOfInt16ToUint8(d)
}

func (_ _Int16ToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _Int16ToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _Int16ToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _Int16ToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _Int16ToUint8) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToUint8) CallAsync(ctx context.Context, work *WorkOfInt16ToUint8, h func(ctx context.Context, arg int16) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToUintptr interface {
	Push(ctx context.Context, work *WorkOfInt16ToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfInt16ToUintptr struct {
	Value    int16
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfInt16ToUintptrWithContext struct {
	Context context.Context
	WorkOfInt16ToUintptr
}

var (
	zero_of_WorkOfInt16ToUintptr       WorkOfInt16ToUintptr
	zero_of_WorkOfInt16ToUintptr_Value int16
	pool_of_WorkOfInt16ToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToUintptr{}
		},
	}
)

func getWorkOfInt16ToUintptr() *WorkOfInt16ToUintptr {
	return pool_of_WorkOfInt16ToUintptr.Get().(*WorkOfInt16ToUintptr)
}
func putWorkOfInt16ToUintptr(d *WorkOfInt16ToUintptr) {
	d.Value = zero_of_WorkOfInt16ToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToUintptr.Put(d)
}

type _Int16ToUintptr struct{}

func (_ _Int16ToUintptr) GetWork() *WorkOfInt16ToUintptr {
	return getWorkOfInt16ToUintptr()
}
func (__ _Int16ToUintptr) GetWorkWith(value int16, returnCh chan<- *ReturnOfUintptr) *WorkOfInt16ToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToUintptr) PutWork(d *WorkOfInt16ToUintptr) {
	putWorkOfInt16ToUintptr(d)
}

func (_ _Int16ToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _Int16ToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _Int16ToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _Int16ToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _Int16ToUintptr) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToUintptr) CallAsync(ctx context.Context, work *WorkOfInt16ToUintptr, h func(ctx context.Context, arg int16) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToBytes interface {
	Push(ctx context.Context, work *WorkOfInt16ToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfInt16ToBytes struct {
	Value    int16
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfInt16ToBytesWithContext struct {
	Context context.Context
	WorkOfInt16ToBytes
}

var (
	zero_of_WorkOfInt16ToBytes       WorkOfInt16ToBytes
	zero_of_WorkOfInt16ToBytes_Value int16
	pool_of_WorkOfInt16ToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToBytes{}
		},
	}
)

func getWorkOfInt16ToBytes() *WorkOfInt16ToBytes {
	return pool_of_WorkOfInt16ToBytes.Get().(*WorkOfInt16ToBytes)
}
func putWorkOfInt16ToBytes(d *WorkOfInt16ToBytes) {
	d.Value = zero_of_WorkOfInt16ToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToBytes.Put(d)
}

type _Int16ToBytes struct{}

func (_ _Int16ToBytes) GetWork() *WorkOfInt16ToBytes {
	return getWorkOfInt16ToBytes()
}
func (__ _Int16ToBytes) GetWorkWith(value int16, returnCh chan<- *ReturnOfBytes) *WorkOfInt16ToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToBytes) PutWork(d *WorkOfInt16ToBytes) {
	putWorkOfInt16ToBytes(d)
}

func (_ _Int16ToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _Int16ToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _Int16ToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _Int16ToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _Int16ToBytes) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToBytes) CallAsync(ctx context.Context, work *WorkOfInt16ToBytes, h func(ctx context.Context, arg int16) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt16ToInterface interface {
	Push(ctx context.Context, work *WorkOfInt16ToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfInt16ToInterface struct {
	Value    int16
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfInt16ToInterfaceWithContext struct {
	Context context.Context
	WorkOfInt16ToInterface
}

var (
	zero_of_WorkOfInt16ToInterface       WorkOfInt16ToInterface
	zero_of_WorkOfInt16ToInterface_Value int16
	pool_of_WorkOfInt16ToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt16ToInterface{}
		},
	}
)

func getWorkOfInt16ToInterface() *WorkOfInt16ToInterface {
	return pool_of_WorkOfInt16ToInterface.Get().(*WorkOfInt16ToInterface)
}
func putWorkOfInt16ToInterface(d *WorkOfInt16ToInterface) {
	d.Value = zero_of_WorkOfInt16ToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt16ToInterface.Put(d)
}

type _Int16ToInterface struct{}

func (_ _Int16ToInterface) GetWork() *WorkOfInt16ToInterface {
	return getWorkOfInt16ToInterface()
}
func (__ _Int16ToInterface) GetWorkWith(value int16, returnCh chan<- *ReturnOfInterface) *WorkOfInt16ToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int16ToInterface) PutWork(d *WorkOfInt16ToInterface) {
	putWorkOfInt16ToInterface(d)
}

func (_ _Int16ToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _Int16ToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int16ToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _Int16ToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _Int16ToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _Int16ToInterface) CallSync(ctx context.Context, value int16, push func(ctx context.Context, work *WorkOfInt16ToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int16ToInterface) CallAsync(ctx context.Context, work *WorkOfInt16ToInterface, h func(ctx context.Context, arg int16) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToBool interface {
	Push(ctx context.Context, work *WorkOfInt32ToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfInt32ToBool struct {
	Value    int32
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfInt32ToBoolWithContext struct {
	Context context.Context
	WorkOfInt32ToBool
}

var (
	zero_of_WorkOfInt32ToBool       WorkOfInt32ToBool
	zero_of_WorkOfInt32ToBool_Value int32
	pool_of_WorkOfInt32ToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToBool{}
		},
	}
)

func getWorkOfInt32ToBool() *WorkOfInt32ToBool {
	return pool_of_WorkOfInt32ToBool.Get().(*WorkOfInt32ToBool)
}
func putWorkOfInt32ToBool(d *WorkOfInt32ToBool) {
	d.Value = zero_of_WorkOfInt32ToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToBool.Put(d)
}

type _Int32ToBool struct{}

func (_ _Int32ToBool) GetWork() *WorkOfInt32ToBool {
	return getWorkOfInt32ToBool()
}
func (__ _Int32ToBool) GetWorkWith(value int32, returnCh chan<- *ReturnOfBool) *WorkOfInt32ToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToBool) PutWork(d *WorkOfInt32ToBool) {
	putWorkOfInt32ToBool(d)
}

func (_ _Int32ToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _Int32ToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _Int32ToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _Int32ToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _Int32ToBool) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToBool) CallAsync(ctx context.Context, work *WorkOfInt32ToBool, h func(ctx context.Context, arg int32) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToByte interface {
	Push(ctx context.Context, work *WorkOfInt32ToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfInt32ToByte struct {
	Value    int32
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfInt32ToByteWithContext struct {
	Context context.Context
	WorkOfInt32ToByte
}

var (
	zero_of_WorkOfInt32ToByte       WorkOfInt32ToByte
	zero_of_WorkOfInt32ToByte_Value int32
	pool_of_WorkOfInt32ToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToByte{}
		},
	}
)

func getWorkOfInt32ToByte() *WorkOfInt32ToByte {
	return pool_of_WorkOfInt32ToByte.Get().(*WorkOfInt32ToByte)
}
func putWorkOfInt32ToByte(d *WorkOfInt32ToByte) {
	d.Value = zero_of_WorkOfInt32ToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToByte.Put(d)
}

type _Int32ToByte struct{}

func (_ _Int32ToByte) GetWork() *WorkOfInt32ToByte {
	return getWorkOfInt32ToByte()
}
func (__ _Int32ToByte) GetWorkWith(value int32, returnCh chan<- *ReturnOfByte) *WorkOfInt32ToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToByte) PutWork(d *WorkOfInt32ToByte) {
	putWorkOfInt32ToByte(d)
}

func (_ _Int32ToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _Int32ToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _Int32ToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _Int32ToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _Int32ToByte) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToByte) CallAsync(ctx context.Context, work *WorkOfInt32ToByte, h func(ctx context.Context, arg int32) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToComplex128 interface {
	Push(ctx context.Context, work *WorkOfInt32ToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfInt32ToComplex128 struct {
	Value    int32
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfInt32ToComplex128WithContext struct {
	Context context.Context
	WorkOfInt32ToComplex128
}

var (
	zero_of_WorkOfInt32ToComplex128       WorkOfInt32ToComplex128
	zero_of_WorkOfInt32ToComplex128_Value int32
	pool_of_WorkOfInt32ToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToComplex128{}
		},
	}
)

func getWorkOfInt32ToComplex128() *WorkOfInt32ToComplex128 {
	return pool_of_WorkOfInt32ToComplex128.Get().(*WorkOfInt32ToComplex128)
}
func putWorkOfInt32ToComplex128(d *WorkOfInt32ToComplex128) {
	d.Value = zero_of_WorkOfInt32ToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToComplex128.Put(d)
}

type _Int32ToComplex128 struct{}

func (_ _Int32ToComplex128) GetWork() *WorkOfInt32ToComplex128 {
	return getWorkOfInt32ToComplex128()
}
func (__ _Int32ToComplex128) GetWorkWith(value int32, returnCh chan<- *ReturnOfComplex128) *WorkOfInt32ToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToComplex128) PutWork(d *WorkOfInt32ToComplex128) {
	putWorkOfInt32ToComplex128(d)
}

func (_ _Int32ToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _Int32ToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _Int32ToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _Int32ToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _Int32ToComplex128) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToComplex128) CallAsync(ctx context.Context, work *WorkOfInt32ToComplex128, h func(ctx context.Context, arg int32) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToComplex64 interface {
	Push(ctx context.Context, work *WorkOfInt32ToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfInt32ToComplex64 struct {
	Value    int32
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfInt32ToComplex64WithContext struct {
	Context context.Context
	WorkOfInt32ToComplex64
}

var (
	zero_of_WorkOfInt32ToComplex64       WorkOfInt32ToComplex64
	zero_of_WorkOfInt32ToComplex64_Value int32
	pool_of_WorkOfInt32ToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToComplex64{}
		},
	}
)

func getWorkOfInt32ToComplex64() *WorkOfInt32ToComplex64 {
	return pool_of_WorkOfInt32ToComplex64.Get().(*WorkOfInt32ToComplex64)
}
func putWorkOfInt32ToComplex64(d *WorkOfInt32ToComplex64) {
	d.Value = zero_of_WorkOfInt32ToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToComplex64.Put(d)
}

type _Int32ToComplex64 struct{}

func (_ _Int32ToComplex64) GetWork() *WorkOfInt32ToComplex64 {
	return getWorkOfInt32ToComplex64()
}
func (__ _Int32ToComplex64) GetWorkWith(value int32, returnCh chan<- *ReturnOfComplex64) *WorkOfInt32ToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToComplex64) PutWork(d *WorkOfInt32ToComplex64) {
	putWorkOfInt32ToComplex64(d)
}

func (_ _Int32ToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _Int32ToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _Int32ToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _Int32ToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _Int32ToComplex64) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToComplex64) CallAsync(ctx context.Context, work *WorkOfInt32ToComplex64, h func(ctx context.Context, arg int32) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToError interface {
	Push(ctx context.Context, work *WorkOfInt32ToError, returnCh chan<- *ReturnOfError)
}

type WorkOfInt32ToError struct {
	Value    int32
	ReturnCh chan<- *ReturnOfError
}

type WorkOfInt32ToErrorWithContext struct {
	Context context.Context
	WorkOfInt32ToError
}

var (
	zero_of_WorkOfInt32ToError       WorkOfInt32ToError
	zero_of_WorkOfInt32ToError_Value int32
	pool_of_WorkOfInt32ToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToError{}
		},
	}
)

func getWorkOfInt32ToError() *WorkOfInt32ToError {
	return pool_of_WorkOfInt32ToError.Get().(*WorkOfInt32ToError)
}
func putWorkOfInt32ToError(d *WorkOfInt32ToError) {
	d.Value = zero_of_WorkOfInt32ToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToError.Put(d)
}

type _Int32ToError struct{}

func (_ _Int32ToError) GetWork() *WorkOfInt32ToError {
	return getWorkOfInt32ToError()
}
func (__ _Int32ToError) GetWorkWith(value int32, returnCh chan<- *ReturnOfError) *WorkOfInt32ToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToError) PutWork(d *WorkOfInt32ToError) {
	putWorkOfInt32ToError(d)
}

func (_ _Int32ToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _Int32ToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _Int32ToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _Int32ToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _Int32ToError) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToError) CallAsync(ctx context.Context, work *WorkOfInt32ToError, h func(ctx context.Context, arg int32) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToFloat32 interface {
	Push(ctx context.Context, work *WorkOfInt32ToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfInt32ToFloat32 struct {
	Value    int32
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfInt32ToFloat32WithContext struct {
	Context context.Context
	WorkOfInt32ToFloat32
}

var (
	zero_of_WorkOfInt32ToFloat32       WorkOfInt32ToFloat32
	zero_of_WorkOfInt32ToFloat32_Value int32
	pool_of_WorkOfInt32ToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToFloat32{}
		},
	}
)

func getWorkOfInt32ToFloat32() *WorkOfInt32ToFloat32 {
	return pool_of_WorkOfInt32ToFloat32.Get().(*WorkOfInt32ToFloat32)
}
func putWorkOfInt32ToFloat32(d *WorkOfInt32ToFloat32) {
	d.Value = zero_of_WorkOfInt32ToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToFloat32.Put(d)
}

type _Int32ToFloat32 struct{}

func (_ _Int32ToFloat32) GetWork() *WorkOfInt32ToFloat32 {
	return getWorkOfInt32ToFloat32()
}
func (__ _Int32ToFloat32) GetWorkWith(value int32, returnCh chan<- *ReturnOfFloat32) *WorkOfInt32ToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToFloat32) PutWork(d *WorkOfInt32ToFloat32) {
	putWorkOfInt32ToFloat32(d)
}

func (_ _Int32ToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _Int32ToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _Int32ToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _Int32ToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _Int32ToFloat32) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToFloat32) CallAsync(ctx context.Context, work *WorkOfInt32ToFloat32, h func(ctx context.Context, arg int32) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToFloat64 interface {
	Push(ctx context.Context, work *WorkOfInt32ToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfInt32ToFloat64 struct {
	Value    int32
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfInt32ToFloat64WithContext struct {
	Context context.Context
	WorkOfInt32ToFloat64
}

var (
	zero_of_WorkOfInt32ToFloat64       WorkOfInt32ToFloat64
	zero_of_WorkOfInt32ToFloat64_Value int32
	pool_of_WorkOfInt32ToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToFloat64{}
		},
	}
)

func getWorkOfInt32ToFloat64() *WorkOfInt32ToFloat64 {
	return pool_of_WorkOfInt32ToFloat64.Get().(*WorkOfInt32ToFloat64)
}
func putWorkOfInt32ToFloat64(d *WorkOfInt32ToFloat64) {
	d.Value = zero_of_WorkOfInt32ToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToFloat64.Put(d)
}

type _Int32ToFloat64 struct{}

func (_ _Int32ToFloat64) GetWork() *WorkOfInt32ToFloat64 {
	return getWorkOfInt32ToFloat64()
}
func (__ _Int32ToFloat64) GetWorkWith(value int32, returnCh chan<- *ReturnOfFloat64) *WorkOfInt32ToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToFloat64) PutWork(d *WorkOfInt32ToFloat64) {
	putWorkOfInt32ToFloat64(d)
}

func (_ _Int32ToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _Int32ToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _Int32ToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _Int32ToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _Int32ToFloat64) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToFloat64) CallAsync(ctx context.Context, work *WorkOfInt32ToFloat64, h func(ctx context.Context, arg int32) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToInt interface {
	Push(ctx context.Context, work *WorkOfInt32ToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfInt32ToInt struct {
	Value    int32
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfInt32ToIntWithContext struct {
	Context context.Context
	WorkOfInt32ToInt
}

var (
	zero_of_WorkOfInt32ToInt       WorkOfInt32ToInt
	zero_of_WorkOfInt32ToInt_Value int32
	pool_of_WorkOfInt32ToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToInt{}
		},
	}
)

func getWorkOfInt32ToInt() *WorkOfInt32ToInt {
	return pool_of_WorkOfInt32ToInt.Get().(*WorkOfInt32ToInt)
}
func putWorkOfInt32ToInt(d *WorkOfInt32ToInt) {
	d.Value = zero_of_WorkOfInt32ToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToInt.Put(d)
}

type _Int32ToInt struct{}

func (_ _Int32ToInt) GetWork() *WorkOfInt32ToInt {
	return getWorkOfInt32ToInt()
}
func (__ _Int32ToInt) GetWorkWith(value int32, returnCh chan<- *ReturnOfInt) *WorkOfInt32ToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToInt) PutWork(d *WorkOfInt32ToInt) {
	putWorkOfInt32ToInt(d)
}

func (_ _Int32ToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _Int32ToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _Int32ToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _Int32ToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _Int32ToInt) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToInt) CallAsync(ctx context.Context, work *WorkOfInt32ToInt, h func(ctx context.Context, arg int32) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToInt16 interface {
	Push(ctx context.Context, work *WorkOfInt32ToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfInt32ToInt16 struct {
	Value    int32
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfInt32ToInt16WithContext struct {
	Context context.Context
	WorkOfInt32ToInt16
}

var (
	zero_of_WorkOfInt32ToInt16       WorkOfInt32ToInt16
	zero_of_WorkOfInt32ToInt16_Value int32
	pool_of_WorkOfInt32ToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToInt16{}
		},
	}
)

func getWorkOfInt32ToInt16() *WorkOfInt32ToInt16 {
	return pool_of_WorkOfInt32ToInt16.Get().(*WorkOfInt32ToInt16)
}
func putWorkOfInt32ToInt16(d *WorkOfInt32ToInt16) {
	d.Value = zero_of_WorkOfInt32ToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToInt16.Put(d)
}

type _Int32ToInt16 struct{}

func (_ _Int32ToInt16) GetWork() *WorkOfInt32ToInt16 {
	return getWorkOfInt32ToInt16()
}
func (__ _Int32ToInt16) GetWorkWith(value int32, returnCh chan<- *ReturnOfInt16) *WorkOfInt32ToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToInt16) PutWork(d *WorkOfInt32ToInt16) {
	putWorkOfInt32ToInt16(d)
}

func (_ _Int32ToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _Int32ToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _Int32ToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _Int32ToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _Int32ToInt16) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToInt16) CallAsync(ctx context.Context, work *WorkOfInt32ToInt16, h func(ctx context.Context, arg int32) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToInt32 interface {
	Push(ctx context.Context, work *WorkOfInt32ToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfInt32ToInt32 struct {
	Value    int32
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfInt32ToInt32WithContext struct {
	Context context.Context
	WorkOfInt32ToInt32
}

var (
	zero_of_WorkOfInt32ToInt32       WorkOfInt32ToInt32
	zero_of_WorkOfInt32ToInt32_Value int32
	pool_of_WorkOfInt32ToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToInt32{}
		},
	}
)

func getWorkOfInt32ToInt32() *WorkOfInt32ToInt32 {
	return pool_of_WorkOfInt32ToInt32.Get().(*WorkOfInt32ToInt32)
}
func putWorkOfInt32ToInt32(d *WorkOfInt32ToInt32) {
	d.Value = zero_of_WorkOfInt32ToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToInt32.Put(d)
}

type _Int32ToInt32 struct{}

func (_ _Int32ToInt32) GetWork() *WorkOfInt32ToInt32 {
	return getWorkOfInt32ToInt32()
}
func (__ _Int32ToInt32) GetWorkWith(value int32, returnCh chan<- *ReturnOfInt32) *WorkOfInt32ToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToInt32) PutWork(d *WorkOfInt32ToInt32) {
	putWorkOfInt32ToInt32(d)
}

func (_ _Int32ToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _Int32ToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _Int32ToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _Int32ToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _Int32ToInt32) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToInt32) CallAsync(ctx context.Context, work *WorkOfInt32ToInt32, h func(ctx context.Context, arg int32) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToInt64 interface {
	Push(ctx context.Context, work *WorkOfInt32ToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfInt32ToInt64 struct {
	Value    int32
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfInt32ToInt64WithContext struct {
	Context context.Context
	WorkOfInt32ToInt64
}

var (
	zero_of_WorkOfInt32ToInt64       WorkOfInt32ToInt64
	zero_of_WorkOfInt32ToInt64_Value int32
	pool_of_WorkOfInt32ToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToInt64{}
		},
	}
)

func getWorkOfInt32ToInt64() *WorkOfInt32ToInt64 {
	return pool_of_WorkOfInt32ToInt64.Get().(*WorkOfInt32ToInt64)
}
func putWorkOfInt32ToInt64(d *WorkOfInt32ToInt64) {
	d.Value = zero_of_WorkOfInt32ToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToInt64.Put(d)
}

type _Int32ToInt64 struct{}

func (_ _Int32ToInt64) GetWork() *WorkOfInt32ToInt64 {
	return getWorkOfInt32ToInt64()
}
func (__ _Int32ToInt64) GetWorkWith(value int32, returnCh chan<- *ReturnOfInt64) *WorkOfInt32ToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToInt64) PutWork(d *WorkOfInt32ToInt64) {
	putWorkOfInt32ToInt64(d)
}

func (_ _Int32ToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _Int32ToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _Int32ToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _Int32ToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _Int32ToInt64) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToInt64) CallAsync(ctx context.Context, work *WorkOfInt32ToInt64, h func(ctx context.Context, arg int32) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToInt8 interface {
	Push(ctx context.Context, work *WorkOfInt32ToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfInt32ToInt8 struct {
	Value    int32
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfInt32ToInt8WithContext struct {
	Context context.Context
	WorkOfInt32ToInt8
}

var (
	zero_of_WorkOfInt32ToInt8       WorkOfInt32ToInt8
	zero_of_WorkOfInt32ToInt8_Value int32
	pool_of_WorkOfInt32ToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToInt8{}
		},
	}
)

func getWorkOfInt32ToInt8() *WorkOfInt32ToInt8 {
	return pool_of_WorkOfInt32ToInt8.Get().(*WorkOfInt32ToInt8)
}
func putWorkOfInt32ToInt8(d *WorkOfInt32ToInt8) {
	d.Value = zero_of_WorkOfInt32ToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToInt8.Put(d)
}

type _Int32ToInt8 struct{}

func (_ _Int32ToInt8) GetWork() *WorkOfInt32ToInt8 {
	return getWorkOfInt32ToInt8()
}
func (__ _Int32ToInt8) GetWorkWith(value int32, returnCh chan<- *ReturnOfInt8) *WorkOfInt32ToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToInt8) PutWork(d *WorkOfInt32ToInt8) {
	putWorkOfInt32ToInt8(d)
}

func (_ _Int32ToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _Int32ToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _Int32ToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _Int32ToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _Int32ToInt8) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToInt8) CallAsync(ctx context.Context, work *WorkOfInt32ToInt8, h func(ctx context.Context, arg int32) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToRune interface {
	Push(ctx context.Context, work *WorkOfInt32ToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfInt32ToRune struct {
	Value    int32
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfInt32ToRuneWithContext struct {
	Context context.Context
	WorkOfInt32ToRune
}

var (
	zero_of_WorkOfInt32ToRune       WorkOfInt32ToRune
	zero_of_WorkOfInt32ToRune_Value int32
	pool_of_WorkOfInt32ToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToRune{}
		},
	}
)

func getWorkOfInt32ToRune() *WorkOfInt32ToRune {
	return pool_of_WorkOfInt32ToRune.Get().(*WorkOfInt32ToRune)
}
func putWorkOfInt32ToRune(d *WorkOfInt32ToRune) {
	d.Value = zero_of_WorkOfInt32ToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToRune.Put(d)
}

type _Int32ToRune struct{}

func (_ _Int32ToRune) GetWork() *WorkOfInt32ToRune {
	return getWorkOfInt32ToRune()
}
func (__ _Int32ToRune) GetWorkWith(value int32, returnCh chan<- *ReturnOfRune) *WorkOfInt32ToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToRune) PutWork(d *WorkOfInt32ToRune) {
	putWorkOfInt32ToRune(d)
}

func (_ _Int32ToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _Int32ToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _Int32ToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _Int32ToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _Int32ToRune) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToRune) CallAsync(ctx context.Context, work *WorkOfInt32ToRune, h func(ctx context.Context, arg int32) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToString interface {
	Push(ctx context.Context, work *WorkOfInt32ToString, returnCh chan<- *ReturnOfString)
}

type WorkOfInt32ToString struct {
	Value    int32
	ReturnCh chan<- *ReturnOfString
}

type WorkOfInt32ToStringWithContext struct {
	Context context.Context
	WorkOfInt32ToString
}

var (
	zero_of_WorkOfInt32ToString       WorkOfInt32ToString
	zero_of_WorkOfInt32ToString_Value int32
	pool_of_WorkOfInt32ToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToString{}
		},
	}
)

func getWorkOfInt32ToString() *WorkOfInt32ToString {
	return pool_of_WorkOfInt32ToString.Get().(*WorkOfInt32ToString)
}
func putWorkOfInt32ToString(d *WorkOfInt32ToString) {
	d.Value = zero_of_WorkOfInt32ToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToString.Put(d)
}

type _Int32ToString struct{}

func (_ _Int32ToString) GetWork() *WorkOfInt32ToString {
	return getWorkOfInt32ToString()
}
func (__ _Int32ToString) GetWorkWith(value int32, returnCh chan<- *ReturnOfString) *WorkOfInt32ToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToString) PutWork(d *WorkOfInt32ToString) {
	putWorkOfInt32ToString(d)
}

func (_ _Int32ToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _Int32ToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _Int32ToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _Int32ToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _Int32ToString) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToString) CallAsync(ctx context.Context, work *WorkOfInt32ToString, h func(ctx context.Context, arg int32) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToUint interface {
	Push(ctx context.Context, work *WorkOfInt32ToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfInt32ToUint struct {
	Value    int32
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfInt32ToUintWithContext struct {
	Context context.Context
	WorkOfInt32ToUint
}

var (
	zero_of_WorkOfInt32ToUint       WorkOfInt32ToUint
	zero_of_WorkOfInt32ToUint_Value int32
	pool_of_WorkOfInt32ToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToUint{}
		},
	}
)

func getWorkOfInt32ToUint() *WorkOfInt32ToUint {
	return pool_of_WorkOfInt32ToUint.Get().(*WorkOfInt32ToUint)
}
func putWorkOfInt32ToUint(d *WorkOfInt32ToUint) {
	d.Value = zero_of_WorkOfInt32ToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToUint.Put(d)
}

type _Int32ToUint struct{}

func (_ _Int32ToUint) GetWork() *WorkOfInt32ToUint {
	return getWorkOfInt32ToUint()
}
func (__ _Int32ToUint) GetWorkWith(value int32, returnCh chan<- *ReturnOfUint) *WorkOfInt32ToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToUint) PutWork(d *WorkOfInt32ToUint) {
	putWorkOfInt32ToUint(d)
}

func (_ _Int32ToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _Int32ToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _Int32ToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _Int32ToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _Int32ToUint) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToUint) CallAsync(ctx context.Context, work *WorkOfInt32ToUint, h func(ctx context.Context, arg int32) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToUint16 interface {
	Push(ctx context.Context, work *WorkOfInt32ToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfInt32ToUint16 struct {
	Value    int32
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfInt32ToUint16WithContext struct {
	Context context.Context
	WorkOfInt32ToUint16
}

var (
	zero_of_WorkOfInt32ToUint16       WorkOfInt32ToUint16
	zero_of_WorkOfInt32ToUint16_Value int32
	pool_of_WorkOfInt32ToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToUint16{}
		},
	}
)

func getWorkOfInt32ToUint16() *WorkOfInt32ToUint16 {
	return pool_of_WorkOfInt32ToUint16.Get().(*WorkOfInt32ToUint16)
}
func putWorkOfInt32ToUint16(d *WorkOfInt32ToUint16) {
	d.Value = zero_of_WorkOfInt32ToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToUint16.Put(d)
}

type _Int32ToUint16 struct{}

func (_ _Int32ToUint16) GetWork() *WorkOfInt32ToUint16 {
	return getWorkOfInt32ToUint16()
}
func (__ _Int32ToUint16) GetWorkWith(value int32, returnCh chan<- *ReturnOfUint16) *WorkOfInt32ToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToUint16) PutWork(d *WorkOfInt32ToUint16) {
	putWorkOfInt32ToUint16(d)
}

func (_ _Int32ToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _Int32ToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _Int32ToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _Int32ToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _Int32ToUint16) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToUint16) CallAsync(ctx context.Context, work *WorkOfInt32ToUint16, h func(ctx context.Context, arg int32) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToUint32 interface {
	Push(ctx context.Context, work *WorkOfInt32ToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfInt32ToUint32 struct {
	Value    int32
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfInt32ToUint32WithContext struct {
	Context context.Context
	WorkOfInt32ToUint32
}

var (
	zero_of_WorkOfInt32ToUint32       WorkOfInt32ToUint32
	zero_of_WorkOfInt32ToUint32_Value int32
	pool_of_WorkOfInt32ToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToUint32{}
		},
	}
)

func getWorkOfInt32ToUint32() *WorkOfInt32ToUint32 {
	return pool_of_WorkOfInt32ToUint32.Get().(*WorkOfInt32ToUint32)
}
func putWorkOfInt32ToUint32(d *WorkOfInt32ToUint32) {
	d.Value = zero_of_WorkOfInt32ToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToUint32.Put(d)
}

type _Int32ToUint32 struct{}

func (_ _Int32ToUint32) GetWork() *WorkOfInt32ToUint32 {
	return getWorkOfInt32ToUint32()
}
func (__ _Int32ToUint32) GetWorkWith(value int32, returnCh chan<- *ReturnOfUint32) *WorkOfInt32ToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToUint32) PutWork(d *WorkOfInt32ToUint32) {
	putWorkOfInt32ToUint32(d)
}

func (_ _Int32ToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _Int32ToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _Int32ToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _Int32ToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _Int32ToUint32) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToUint32) CallAsync(ctx context.Context, work *WorkOfInt32ToUint32, h func(ctx context.Context, arg int32) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToUint64 interface {
	Push(ctx context.Context, work *WorkOfInt32ToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfInt32ToUint64 struct {
	Value    int32
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfInt32ToUint64WithContext struct {
	Context context.Context
	WorkOfInt32ToUint64
}

var (
	zero_of_WorkOfInt32ToUint64       WorkOfInt32ToUint64
	zero_of_WorkOfInt32ToUint64_Value int32
	pool_of_WorkOfInt32ToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToUint64{}
		},
	}
)

func getWorkOfInt32ToUint64() *WorkOfInt32ToUint64 {
	return pool_of_WorkOfInt32ToUint64.Get().(*WorkOfInt32ToUint64)
}
func putWorkOfInt32ToUint64(d *WorkOfInt32ToUint64) {
	d.Value = zero_of_WorkOfInt32ToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToUint64.Put(d)
}

type _Int32ToUint64 struct{}

func (_ _Int32ToUint64) GetWork() *WorkOfInt32ToUint64 {
	return getWorkOfInt32ToUint64()
}
func (__ _Int32ToUint64) GetWorkWith(value int32, returnCh chan<- *ReturnOfUint64) *WorkOfInt32ToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToUint64) PutWork(d *WorkOfInt32ToUint64) {
	putWorkOfInt32ToUint64(d)
}

func (_ _Int32ToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _Int32ToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _Int32ToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _Int32ToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _Int32ToUint64) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToUint64) CallAsync(ctx context.Context, work *WorkOfInt32ToUint64, h func(ctx context.Context, arg int32) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToUint8 interface {
	Push(ctx context.Context, work *WorkOfInt32ToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfInt32ToUint8 struct {
	Value    int32
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfInt32ToUint8WithContext struct {
	Context context.Context
	WorkOfInt32ToUint8
}

var (
	zero_of_WorkOfInt32ToUint8       WorkOfInt32ToUint8
	zero_of_WorkOfInt32ToUint8_Value int32
	pool_of_WorkOfInt32ToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToUint8{}
		},
	}
)

func getWorkOfInt32ToUint8() *WorkOfInt32ToUint8 {
	return pool_of_WorkOfInt32ToUint8.Get().(*WorkOfInt32ToUint8)
}
func putWorkOfInt32ToUint8(d *WorkOfInt32ToUint8) {
	d.Value = zero_of_WorkOfInt32ToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToUint8.Put(d)
}

type _Int32ToUint8 struct{}

func (_ _Int32ToUint8) GetWork() *WorkOfInt32ToUint8 {
	return getWorkOfInt32ToUint8()
}
func (__ _Int32ToUint8) GetWorkWith(value int32, returnCh chan<- *ReturnOfUint8) *WorkOfInt32ToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToUint8) PutWork(d *WorkOfInt32ToUint8) {
	putWorkOfInt32ToUint8(d)
}

func (_ _Int32ToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _Int32ToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _Int32ToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _Int32ToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _Int32ToUint8) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToUint8) CallAsync(ctx context.Context, work *WorkOfInt32ToUint8, h func(ctx context.Context, arg int32) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToUintptr interface {
	Push(ctx context.Context, work *WorkOfInt32ToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfInt32ToUintptr struct {
	Value    int32
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfInt32ToUintptrWithContext struct {
	Context context.Context
	WorkOfInt32ToUintptr
}

var (
	zero_of_WorkOfInt32ToUintptr       WorkOfInt32ToUintptr
	zero_of_WorkOfInt32ToUintptr_Value int32
	pool_of_WorkOfInt32ToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToUintptr{}
		},
	}
)

func getWorkOfInt32ToUintptr() *WorkOfInt32ToUintptr {
	return pool_of_WorkOfInt32ToUintptr.Get().(*WorkOfInt32ToUintptr)
}
func putWorkOfInt32ToUintptr(d *WorkOfInt32ToUintptr) {
	d.Value = zero_of_WorkOfInt32ToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToUintptr.Put(d)
}

type _Int32ToUintptr struct{}

func (_ _Int32ToUintptr) GetWork() *WorkOfInt32ToUintptr {
	return getWorkOfInt32ToUintptr()
}
func (__ _Int32ToUintptr) GetWorkWith(value int32, returnCh chan<- *ReturnOfUintptr) *WorkOfInt32ToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToUintptr) PutWork(d *WorkOfInt32ToUintptr) {
	putWorkOfInt32ToUintptr(d)
}

func (_ _Int32ToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _Int32ToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _Int32ToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _Int32ToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _Int32ToUintptr) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToUintptr) CallAsync(ctx context.Context, work *WorkOfInt32ToUintptr, h func(ctx context.Context, arg int32) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToBytes interface {
	Push(ctx context.Context, work *WorkOfInt32ToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfInt32ToBytes struct {
	Value    int32
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfInt32ToBytesWithContext struct {
	Context context.Context
	WorkOfInt32ToBytes
}

var (
	zero_of_WorkOfInt32ToBytes       WorkOfInt32ToBytes
	zero_of_WorkOfInt32ToBytes_Value int32
	pool_of_WorkOfInt32ToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToBytes{}
		},
	}
)

func getWorkOfInt32ToBytes() *WorkOfInt32ToBytes {
	return pool_of_WorkOfInt32ToBytes.Get().(*WorkOfInt32ToBytes)
}
func putWorkOfInt32ToBytes(d *WorkOfInt32ToBytes) {
	d.Value = zero_of_WorkOfInt32ToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToBytes.Put(d)
}

type _Int32ToBytes struct{}

func (_ _Int32ToBytes) GetWork() *WorkOfInt32ToBytes {
	return getWorkOfInt32ToBytes()
}
func (__ _Int32ToBytes) GetWorkWith(value int32, returnCh chan<- *ReturnOfBytes) *WorkOfInt32ToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToBytes) PutWork(d *WorkOfInt32ToBytes) {
	putWorkOfInt32ToBytes(d)
}

func (_ _Int32ToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _Int32ToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _Int32ToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _Int32ToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _Int32ToBytes) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToBytes) CallAsync(ctx context.Context, work *WorkOfInt32ToBytes, h func(ctx context.Context, arg int32) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt32ToInterface interface {
	Push(ctx context.Context, work *WorkOfInt32ToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfInt32ToInterface struct {
	Value    int32
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfInt32ToInterfaceWithContext struct {
	Context context.Context
	WorkOfInt32ToInterface
}

var (
	zero_of_WorkOfInt32ToInterface       WorkOfInt32ToInterface
	zero_of_WorkOfInt32ToInterface_Value int32
	pool_of_WorkOfInt32ToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt32ToInterface{}
		},
	}
)

func getWorkOfInt32ToInterface() *WorkOfInt32ToInterface {
	return pool_of_WorkOfInt32ToInterface.Get().(*WorkOfInt32ToInterface)
}
func putWorkOfInt32ToInterface(d *WorkOfInt32ToInterface) {
	d.Value = zero_of_WorkOfInt32ToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt32ToInterface.Put(d)
}

type _Int32ToInterface struct{}

func (_ _Int32ToInterface) GetWork() *WorkOfInt32ToInterface {
	return getWorkOfInt32ToInterface()
}
func (__ _Int32ToInterface) GetWorkWith(value int32, returnCh chan<- *ReturnOfInterface) *WorkOfInt32ToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int32ToInterface) PutWork(d *WorkOfInt32ToInterface) {
	putWorkOfInt32ToInterface(d)
}

func (_ _Int32ToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _Int32ToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int32ToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _Int32ToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _Int32ToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _Int32ToInterface) CallSync(ctx context.Context, value int32, push func(ctx context.Context, work *WorkOfInt32ToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int32ToInterface) CallAsync(ctx context.Context, work *WorkOfInt32ToInterface, h func(ctx context.Context, arg int32) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToBool interface {
	Push(ctx context.Context, work *WorkOfInt64ToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfInt64ToBool struct {
	Value    int64
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfInt64ToBoolWithContext struct {
	Context context.Context
	WorkOfInt64ToBool
}

var (
	zero_of_WorkOfInt64ToBool       WorkOfInt64ToBool
	zero_of_WorkOfInt64ToBool_Value int64
	pool_of_WorkOfInt64ToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToBool{}
		},
	}
)

func getWorkOfInt64ToBool() *WorkOfInt64ToBool {
	return pool_of_WorkOfInt64ToBool.Get().(*WorkOfInt64ToBool)
}
func putWorkOfInt64ToBool(d *WorkOfInt64ToBool) {
	d.Value = zero_of_WorkOfInt64ToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToBool.Put(d)
}

type _Int64ToBool struct{}

func (_ _Int64ToBool) GetWork() *WorkOfInt64ToBool {
	return getWorkOfInt64ToBool()
}
func (__ _Int64ToBool) GetWorkWith(value int64, returnCh chan<- *ReturnOfBool) *WorkOfInt64ToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToBool) PutWork(d *WorkOfInt64ToBool) {
	putWorkOfInt64ToBool(d)
}

func (_ _Int64ToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _Int64ToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _Int64ToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _Int64ToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _Int64ToBool) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToBool) CallAsync(ctx context.Context, work *WorkOfInt64ToBool, h func(ctx context.Context, arg int64) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToByte interface {
	Push(ctx context.Context, work *WorkOfInt64ToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfInt64ToByte struct {
	Value    int64
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfInt64ToByteWithContext struct {
	Context context.Context
	WorkOfInt64ToByte
}

var (
	zero_of_WorkOfInt64ToByte       WorkOfInt64ToByte
	zero_of_WorkOfInt64ToByte_Value int64
	pool_of_WorkOfInt64ToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToByte{}
		},
	}
)

func getWorkOfInt64ToByte() *WorkOfInt64ToByte {
	return pool_of_WorkOfInt64ToByte.Get().(*WorkOfInt64ToByte)
}
func putWorkOfInt64ToByte(d *WorkOfInt64ToByte) {
	d.Value = zero_of_WorkOfInt64ToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToByte.Put(d)
}

type _Int64ToByte struct{}

func (_ _Int64ToByte) GetWork() *WorkOfInt64ToByte {
	return getWorkOfInt64ToByte()
}
func (__ _Int64ToByte) GetWorkWith(value int64, returnCh chan<- *ReturnOfByte) *WorkOfInt64ToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToByte) PutWork(d *WorkOfInt64ToByte) {
	putWorkOfInt64ToByte(d)
}

func (_ _Int64ToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _Int64ToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _Int64ToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _Int64ToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _Int64ToByte) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToByte) CallAsync(ctx context.Context, work *WorkOfInt64ToByte, h func(ctx context.Context, arg int64) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToComplex128 interface {
	Push(ctx context.Context, work *WorkOfInt64ToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfInt64ToComplex128 struct {
	Value    int64
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfInt64ToComplex128WithContext struct {
	Context context.Context
	WorkOfInt64ToComplex128
}

var (
	zero_of_WorkOfInt64ToComplex128       WorkOfInt64ToComplex128
	zero_of_WorkOfInt64ToComplex128_Value int64
	pool_of_WorkOfInt64ToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToComplex128{}
		},
	}
)

func getWorkOfInt64ToComplex128() *WorkOfInt64ToComplex128 {
	return pool_of_WorkOfInt64ToComplex128.Get().(*WorkOfInt64ToComplex128)
}
func putWorkOfInt64ToComplex128(d *WorkOfInt64ToComplex128) {
	d.Value = zero_of_WorkOfInt64ToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToComplex128.Put(d)
}

type _Int64ToComplex128 struct{}

func (_ _Int64ToComplex128) GetWork() *WorkOfInt64ToComplex128 {
	return getWorkOfInt64ToComplex128()
}
func (__ _Int64ToComplex128) GetWorkWith(value int64, returnCh chan<- *ReturnOfComplex128) *WorkOfInt64ToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToComplex128) PutWork(d *WorkOfInt64ToComplex128) {
	putWorkOfInt64ToComplex128(d)
}

func (_ _Int64ToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _Int64ToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _Int64ToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _Int64ToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _Int64ToComplex128) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToComplex128) CallAsync(ctx context.Context, work *WorkOfInt64ToComplex128, h func(ctx context.Context, arg int64) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToComplex64 interface {
	Push(ctx context.Context, work *WorkOfInt64ToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfInt64ToComplex64 struct {
	Value    int64
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfInt64ToComplex64WithContext struct {
	Context context.Context
	WorkOfInt64ToComplex64
}

var (
	zero_of_WorkOfInt64ToComplex64       WorkOfInt64ToComplex64
	zero_of_WorkOfInt64ToComplex64_Value int64
	pool_of_WorkOfInt64ToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToComplex64{}
		},
	}
)

func getWorkOfInt64ToComplex64() *WorkOfInt64ToComplex64 {
	return pool_of_WorkOfInt64ToComplex64.Get().(*WorkOfInt64ToComplex64)
}
func putWorkOfInt64ToComplex64(d *WorkOfInt64ToComplex64) {
	d.Value = zero_of_WorkOfInt64ToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToComplex64.Put(d)
}

type _Int64ToComplex64 struct{}

func (_ _Int64ToComplex64) GetWork() *WorkOfInt64ToComplex64 {
	return getWorkOfInt64ToComplex64()
}
func (__ _Int64ToComplex64) GetWorkWith(value int64, returnCh chan<- *ReturnOfComplex64) *WorkOfInt64ToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToComplex64) PutWork(d *WorkOfInt64ToComplex64) {
	putWorkOfInt64ToComplex64(d)
}

func (_ _Int64ToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _Int64ToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _Int64ToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _Int64ToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _Int64ToComplex64) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToComplex64) CallAsync(ctx context.Context, work *WorkOfInt64ToComplex64, h func(ctx context.Context, arg int64) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToError interface {
	Push(ctx context.Context, work *WorkOfInt64ToError, returnCh chan<- *ReturnOfError)
}

type WorkOfInt64ToError struct {
	Value    int64
	ReturnCh chan<- *ReturnOfError
}

type WorkOfInt64ToErrorWithContext struct {
	Context context.Context
	WorkOfInt64ToError
}

var (
	zero_of_WorkOfInt64ToError       WorkOfInt64ToError
	zero_of_WorkOfInt64ToError_Value int64
	pool_of_WorkOfInt64ToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToError{}
		},
	}
)

func getWorkOfInt64ToError() *WorkOfInt64ToError {
	return pool_of_WorkOfInt64ToError.Get().(*WorkOfInt64ToError)
}
func putWorkOfInt64ToError(d *WorkOfInt64ToError) {
	d.Value = zero_of_WorkOfInt64ToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToError.Put(d)
}

type _Int64ToError struct{}

func (_ _Int64ToError) GetWork() *WorkOfInt64ToError {
	return getWorkOfInt64ToError()
}
func (__ _Int64ToError) GetWorkWith(value int64, returnCh chan<- *ReturnOfError) *WorkOfInt64ToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToError) PutWork(d *WorkOfInt64ToError) {
	putWorkOfInt64ToError(d)
}

func (_ _Int64ToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _Int64ToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _Int64ToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _Int64ToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _Int64ToError) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToError) CallAsync(ctx context.Context, work *WorkOfInt64ToError, h func(ctx context.Context, arg int64) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToFloat32 interface {
	Push(ctx context.Context, work *WorkOfInt64ToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfInt64ToFloat32 struct {
	Value    int64
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfInt64ToFloat32WithContext struct {
	Context context.Context
	WorkOfInt64ToFloat32
}

var (
	zero_of_WorkOfInt64ToFloat32       WorkOfInt64ToFloat32
	zero_of_WorkOfInt64ToFloat32_Value int64
	pool_of_WorkOfInt64ToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToFloat32{}
		},
	}
)

func getWorkOfInt64ToFloat32() *WorkOfInt64ToFloat32 {
	return pool_of_WorkOfInt64ToFloat32.Get().(*WorkOfInt64ToFloat32)
}
func putWorkOfInt64ToFloat32(d *WorkOfInt64ToFloat32) {
	d.Value = zero_of_WorkOfInt64ToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToFloat32.Put(d)
}

type _Int64ToFloat32 struct{}

func (_ _Int64ToFloat32) GetWork() *WorkOfInt64ToFloat32 {
	return getWorkOfInt64ToFloat32()
}
func (__ _Int64ToFloat32) GetWorkWith(value int64, returnCh chan<- *ReturnOfFloat32) *WorkOfInt64ToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToFloat32) PutWork(d *WorkOfInt64ToFloat32) {
	putWorkOfInt64ToFloat32(d)
}

func (_ _Int64ToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _Int64ToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _Int64ToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _Int64ToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _Int64ToFloat32) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToFloat32) CallAsync(ctx context.Context, work *WorkOfInt64ToFloat32, h func(ctx context.Context, arg int64) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToFloat64 interface {
	Push(ctx context.Context, work *WorkOfInt64ToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfInt64ToFloat64 struct {
	Value    int64
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfInt64ToFloat64WithContext struct {
	Context context.Context
	WorkOfInt64ToFloat64
}

var (
	zero_of_WorkOfInt64ToFloat64       WorkOfInt64ToFloat64
	zero_of_WorkOfInt64ToFloat64_Value int64
	pool_of_WorkOfInt64ToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToFloat64{}
		},
	}
)

func getWorkOfInt64ToFloat64() *WorkOfInt64ToFloat64 {
	return pool_of_WorkOfInt64ToFloat64.Get().(*WorkOfInt64ToFloat64)
}
func putWorkOfInt64ToFloat64(d *WorkOfInt64ToFloat64) {
	d.Value = zero_of_WorkOfInt64ToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToFloat64.Put(d)
}

type _Int64ToFloat64 struct{}

func (_ _Int64ToFloat64) GetWork() *WorkOfInt64ToFloat64 {
	return getWorkOfInt64ToFloat64()
}
func (__ _Int64ToFloat64) GetWorkWith(value int64, returnCh chan<- *ReturnOfFloat64) *WorkOfInt64ToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToFloat64) PutWork(d *WorkOfInt64ToFloat64) {
	putWorkOfInt64ToFloat64(d)
}

func (_ _Int64ToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _Int64ToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _Int64ToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _Int64ToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _Int64ToFloat64) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToFloat64) CallAsync(ctx context.Context, work *WorkOfInt64ToFloat64, h func(ctx context.Context, arg int64) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToInt interface {
	Push(ctx context.Context, work *WorkOfInt64ToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfInt64ToInt struct {
	Value    int64
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfInt64ToIntWithContext struct {
	Context context.Context
	WorkOfInt64ToInt
}

var (
	zero_of_WorkOfInt64ToInt       WorkOfInt64ToInt
	zero_of_WorkOfInt64ToInt_Value int64
	pool_of_WorkOfInt64ToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToInt{}
		},
	}
)

func getWorkOfInt64ToInt() *WorkOfInt64ToInt {
	return pool_of_WorkOfInt64ToInt.Get().(*WorkOfInt64ToInt)
}
func putWorkOfInt64ToInt(d *WorkOfInt64ToInt) {
	d.Value = zero_of_WorkOfInt64ToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToInt.Put(d)
}

type _Int64ToInt struct{}

func (_ _Int64ToInt) GetWork() *WorkOfInt64ToInt {
	return getWorkOfInt64ToInt()
}
func (__ _Int64ToInt) GetWorkWith(value int64, returnCh chan<- *ReturnOfInt) *WorkOfInt64ToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToInt) PutWork(d *WorkOfInt64ToInt) {
	putWorkOfInt64ToInt(d)
}

func (_ _Int64ToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _Int64ToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _Int64ToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _Int64ToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _Int64ToInt) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToInt) CallAsync(ctx context.Context, work *WorkOfInt64ToInt, h func(ctx context.Context, arg int64) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToInt16 interface {
	Push(ctx context.Context, work *WorkOfInt64ToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfInt64ToInt16 struct {
	Value    int64
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfInt64ToInt16WithContext struct {
	Context context.Context
	WorkOfInt64ToInt16
}

var (
	zero_of_WorkOfInt64ToInt16       WorkOfInt64ToInt16
	zero_of_WorkOfInt64ToInt16_Value int64
	pool_of_WorkOfInt64ToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToInt16{}
		},
	}
)

func getWorkOfInt64ToInt16() *WorkOfInt64ToInt16 {
	return pool_of_WorkOfInt64ToInt16.Get().(*WorkOfInt64ToInt16)
}
func putWorkOfInt64ToInt16(d *WorkOfInt64ToInt16) {
	d.Value = zero_of_WorkOfInt64ToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToInt16.Put(d)
}

type _Int64ToInt16 struct{}

func (_ _Int64ToInt16) GetWork() *WorkOfInt64ToInt16 {
	return getWorkOfInt64ToInt16()
}
func (__ _Int64ToInt16) GetWorkWith(value int64, returnCh chan<- *ReturnOfInt16) *WorkOfInt64ToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToInt16) PutWork(d *WorkOfInt64ToInt16) {
	putWorkOfInt64ToInt16(d)
}

func (_ _Int64ToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _Int64ToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _Int64ToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _Int64ToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _Int64ToInt16) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToInt16) CallAsync(ctx context.Context, work *WorkOfInt64ToInt16, h func(ctx context.Context, arg int64) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToInt32 interface {
	Push(ctx context.Context, work *WorkOfInt64ToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfInt64ToInt32 struct {
	Value    int64
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfInt64ToInt32WithContext struct {
	Context context.Context
	WorkOfInt64ToInt32
}

var (
	zero_of_WorkOfInt64ToInt32       WorkOfInt64ToInt32
	zero_of_WorkOfInt64ToInt32_Value int64
	pool_of_WorkOfInt64ToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToInt32{}
		},
	}
)

func getWorkOfInt64ToInt32() *WorkOfInt64ToInt32 {
	return pool_of_WorkOfInt64ToInt32.Get().(*WorkOfInt64ToInt32)
}
func putWorkOfInt64ToInt32(d *WorkOfInt64ToInt32) {
	d.Value = zero_of_WorkOfInt64ToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToInt32.Put(d)
}

type _Int64ToInt32 struct{}

func (_ _Int64ToInt32) GetWork() *WorkOfInt64ToInt32 {
	return getWorkOfInt64ToInt32()
}
func (__ _Int64ToInt32) GetWorkWith(value int64, returnCh chan<- *ReturnOfInt32) *WorkOfInt64ToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToInt32) PutWork(d *WorkOfInt64ToInt32) {
	putWorkOfInt64ToInt32(d)
}

func (_ _Int64ToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _Int64ToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _Int64ToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _Int64ToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _Int64ToInt32) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToInt32) CallAsync(ctx context.Context, work *WorkOfInt64ToInt32, h func(ctx context.Context, arg int64) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToInt64 interface {
	Push(ctx context.Context, work *WorkOfInt64ToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfInt64ToInt64 struct {
	Value    int64
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfInt64ToInt64WithContext struct {
	Context context.Context
	WorkOfInt64ToInt64
}

var (
	zero_of_WorkOfInt64ToInt64       WorkOfInt64ToInt64
	zero_of_WorkOfInt64ToInt64_Value int64
	pool_of_WorkOfInt64ToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToInt64{}
		},
	}
)

func getWorkOfInt64ToInt64() *WorkOfInt64ToInt64 {
	return pool_of_WorkOfInt64ToInt64.Get().(*WorkOfInt64ToInt64)
}
func putWorkOfInt64ToInt64(d *WorkOfInt64ToInt64) {
	d.Value = zero_of_WorkOfInt64ToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToInt64.Put(d)
}

type _Int64ToInt64 struct{}

func (_ _Int64ToInt64) GetWork() *WorkOfInt64ToInt64 {
	return getWorkOfInt64ToInt64()
}
func (__ _Int64ToInt64) GetWorkWith(value int64, returnCh chan<- *ReturnOfInt64) *WorkOfInt64ToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToInt64) PutWork(d *WorkOfInt64ToInt64) {
	putWorkOfInt64ToInt64(d)
}

func (_ _Int64ToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _Int64ToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _Int64ToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _Int64ToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _Int64ToInt64) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToInt64) CallAsync(ctx context.Context, work *WorkOfInt64ToInt64, h func(ctx context.Context, arg int64) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToInt8 interface {
	Push(ctx context.Context, work *WorkOfInt64ToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfInt64ToInt8 struct {
	Value    int64
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfInt64ToInt8WithContext struct {
	Context context.Context
	WorkOfInt64ToInt8
}

var (
	zero_of_WorkOfInt64ToInt8       WorkOfInt64ToInt8
	zero_of_WorkOfInt64ToInt8_Value int64
	pool_of_WorkOfInt64ToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToInt8{}
		},
	}
)

func getWorkOfInt64ToInt8() *WorkOfInt64ToInt8 {
	return pool_of_WorkOfInt64ToInt8.Get().(*WorkOfInt64ToInt8)
}
func putWorkOfInt64ToInt8(d *WorkOfInt64ToInt8) {
	d.Value = zero_of_WorkOfInt64ToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToInt8.Put(d)
}

type _Int64ToInt8 struct{}

func (_ _Int64ToInt8) GetWork() *WorkOfInt64ToInt8 {
	return getWorkOfInt64ToInt8()
}
func (__ _Int64ToInt8) GetWorkWith(value int64, returnCh chan<- *ReturnOfInt8) *WorkOfInt64ToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToInt8) PutWork(d *WorkOfInt64ToInt8) {
	putWorkOfInt64ToInt8(d)
}

func (_ _Int64ToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _Int64ToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _Int64ToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _Int64ToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _Int64ToInt8) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToInt8) CallAsync(ctx context.Context, work *WorkOfInt64ToInt8, h func(ctx context.Context, arg int64) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToRune interface {
	Push(ctx context.Context, work *WorkOfInt64ToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfInt64ToRune struct {
	Value    int64
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfInt64ToRuneWithContext struct {
	Context context.Context
	WorkOfInt64ToRune
}

var (
	zero_of_WorkOfInt64ToRune       WorkOfInt64ToRune
	zero_of_WorkOfInt64ToRune_Value int64
	pool_of_WorkOfInt64ToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToRune{}
		},
	}
)

func getWorkOfInt64ToRune() *WorkOfInt64ToRune {
	return pool_of_WorkOfInt64ToRune.Get().(*WorkOfInt64ToRune)
}
func putWorkOfInt64ToRune(d *WorkOfInt64ToRune) {
	d.Value = zero_of_WorkOfInt64ToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToRune.Put(d)
}

type _Int64ToRune struct{}

func (_ _Int64ToRune) GetWork() *WorkOfInt64ToRune {
	return getWorkOfInt64ToRune()
}
func (__ _Int64ToRune) GetWorkWith(value int64, returnCh chan<- *ReturnOfRune) *WorkOfInt64ToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToRune) PutWork(d *WorkOfInt64ToRune) {
	putWorkOfInt64ToRune(d)
}

func (_ _Int64ToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _Int64ToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _Int64ToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _Int64ToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _Int64ToRune) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToRune) CallAsync(ctx context.Context, work *WorkOfInt64ToRune, h func(ctx context.Context, arg int64) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToString interface {
	Push(ctx context.Context, work *WorkOfInt64ToString, returnCh chan<- *ReturnOfString)
}

type WorkOfInt64ToString struct {
	Value    int64
	ReturnCh chan<- *ReturnOfString
}

type WorkOfInt64ToStringWithContext struct {
	Context context.Context
	WorkOfInt64ToString
}

var (
	zero_of_WorkOfInt64ToString       WorkOfInt64ToString
	zero_of_WorkOfInt64ToString_Value int64
	pool_of_WorkOfInt64ToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToString{}
		},
	}
)

func getWorkOfInt64ToString() *WorkOfInt64ToString {
	return pool_of_WorkOfInt64ToString.Get().(*WorkOfInt64ToString)
}
func putWorkOfInt64ToString(d *WorkOfInt64ToString) {
	d.Value = zero_of_WorkOfInt64ToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToString.Put(d)
}

type _Int64ToString struct{}

func (_ _Int64ToString) GetWork() *WorkOfInt64ToString {
	return getWorkOfInt64ToString()
}
func (__ _Int64ToString) GetWorkWith(value int64, returnCh chan<- *ReturnOfString) *WorkOfInt64ToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToString) PutWork(d *WorkOfInt64ToString) {
	putWorkOfInt64ToString(d)
}

func (_ _Int64ToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _Int64ToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _Int64ToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _Int64ToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _Int64ToString) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToString) CallAsync(ctx context.Context, work *WorkOfInt64ToString, h func(ctx context.Context, arg int64) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToUint interface {
	Push(ctx context.Context, work *WorkOfInt64ToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfInt64ToUint struct {
	Value    int64
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfInt64ToUintWithContext struct {
	Context context.Context
	WorkOfInt64ToUint
}

var (
	zero_of_WorkOfInt64ToUint       WorkOfInt64ToUint
	zero_of_WorkOfInt64ToUint_Value int64
	pool_of_WorkOfInt64ToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToUint{}
		},
	}
)

func getWorkOfInt64ToUint() *WorkOfInt64ToUint {
	return pool_of_WorkOfInt64ToUint.Get().(*WorkOfInt64ToUint)
}
func putWorkOfInt64ToUint(d *WorkOfInt64ToUint) {
	d.Value = zero_of_WorkOfInt64ToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToUint.Put(d)
}

type _Int64ToUint struct{}

func (_ _Int64ToUint) GetWork() *WorkOfInt64ToUint {
	return getWorkOfInt64ToUint()
}
func (__ _Int64ToUint) GetWorkWith(value int64, returnCh chan<- *ReturnOfUint) *WorkOfInt64ToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToUint) PutWork(d *WorkOfInt64ToUint) {
	putWorkOfInt64ToUint(d)
}

func (_ _Int64ToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _Int64ToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _Int64ToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _Int64ToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _Int64ToUint) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToUint) CallAsync(ctx context.Context, work *WorkOfInt64ToUint, h func(ctx context.Context, arg int64) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToUint16 interface {
	Push(ctx context.Context, work *WorkOfInt64ToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfInt64ToUint16 struct {
	Value    int64
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfInt64ToUint16WithContext struct {
	Context context.Context
	WorkOfInt64ToUint16
}

var (
	zero_of_WorkOfInt64ToUint16       WorkOfInt64ToUint16
	zero_of_WorkOfInt64ToUint16_Value int64
	pool_of_WorkOfInt64ToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToUint16{}
		},
	}
)

func getWorkOfInt64ToUint16() *WorkOfInt64ToUint16 {
	return pool_of_WorkOfInt64ToUint16.Get().(*WorkOfInt64ToUint16)
}
func putWorkOfInt64ToUint16(d *WorkOfInt64ToUint16) {
	d.Value = zero_of_WorkOfInt64ToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToUint16.Put(d)
}

type _Int64ToUint16 struct{}

func (_ _Int64ToUint16) GetWork() *WorkOfInt64ToUint16 {
	return getWorkOfInt64ToUint16()
}
func (__ _Int64ToUint16) GetWorkWith(value int64, returnCh chan<- *ReturnOfUint16) *WorkOfInt64ToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToUint16) PutWork(d *WorkOfInt64ToUint16) {
	putWorkOfInt64ToUint16(d)
}

func (_ _Int64ToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _Int64ToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _Int64ToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _Int64ToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _Int64ToUint16) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToUint16) CallAsync(ctx context.Context, work *WorkOfInt64ToUint16, h func(ctx context.Context, arg int64) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToUint32 interface {
	Push(ctx context.Context, work *WorkOfInt64ToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfInt64ToUint32 struct {
	Value    int64
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfInt64ToUint32WithContext struct {
	Context context.Context
	WorkOfInt64ToUint32
}

var (
	zero_of_WorkOfInt64ToUint32       WorkOfInt64ToUint32
	zero_of_WorkOfInt64ToUint32_Value int64
	pool_of_WorkOfInt64ToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToUint32{}
		},
	}
)

func getWorkOfInt64ToUint32() *WorkOfInt64ToUint32 {
	return pool_of_WorkOfInt64ToUint32.Get().(*WorkOfInt64ToUint32)
}
func putWorkOfInt64ToUint32(d *WorkOfInt64ToUint32) {
	d.Value = zero_of_WorkOfInt64ToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToUint32.Put(d)
}

type _Int64ToUint32 struct{}

func (_ _Int64ToUint32) GetWork() *WorkOfInt64ToUint32 {
	return getWorkOfInt64ToUint32()
}
func (__ _Int64ToUint32) GetWorkWith(value int64, returnCh chan<- *ReturnOfUint32) *WorkOfInt64ToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToUint32) PutWork(d *WorkOfInt64ToUint32) {
	putWorkOfInt64ToUint32(d)
}

func (_ _Int64ToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _Int64ToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _Int64ToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _Int64ToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _Int64ToUint32) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToUint32) CallAsync(ctx context.Context, work *WorkOfInt64ToUint32, h func(ctx context.Context, arg int64) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToUint64 interface {
	Push(ctx context.Context, work *WorkOfInt64ToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfInt64ToUint64 struct {
	Value    int64
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfInt64ToUint64WithContext struct {
	Context context.Context
	WorkOfInt64ToUint64
}

var (
	zero_of_WorkOfInt64ToUint64       WorkOfInt64ToUint64
	zero_of_WorkOfInt64ToUint64_Value int64
	pool_of_WorkOfInt64ToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToUint64{}
		},
	}
)

func getWorkOfInt64ToUint64() *WorkOfInt64ToUint64 {
	return pool_of_WorkOfInt64ToUint64.Get().(*WorkOfInt64ToUint64)
}
func putWorkOfInt64ToUint64(d *WorkOfInt64ToUint64) {
	d.Value = zero_of_WorkOfInt64ToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToUint64.Put(d)
}

type _Int64ToUint64 struct{}

func (_ _Int64ToUint64) GetWork() *WorkOfInt64ToUint64 {
	return getWorkOfInt64ToUint64()
}
func (__ _Int64ToUint64) GetWorkWith(value int64, returnCh chan<- *ReturnOfUint64) *WorkOfInt64ToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToUint64) PutWork(d *WorkOfInt64ToUint64) {
	putWorkOfInt64ToUint64(d)
}

func (_ _Int64ToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _Int64ToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _Int64ToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _Int64ToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _Int64ToUint64) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToUint64) CallAsync(ctx context.Context, work *WorkOfInt64ToUint64, h func(ctx context.Context, arg int64) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToUint8 interface {
	Push(ctx context.Context, work *WorkOfInt64ToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfInt64ToUint8 struct {
	Value    int64
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfInt64ToUint8WithContext struct {
	Context context.Context
	WorkOfInt64ToUint8
}

var (
	zero_of_WorkOfInt64ToUint8       WorkOfInt64ToUint8
	zero_of_WorkOfInt64ToUint8_Value int64
	pool_of_WorkOfInt64ToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToUint8{}
		},
	}
)

func getWorkOfInt64ToUint8() *WorkOfInt64ToUint8 {
	return pool_of_WorkOfInt64ToUint8.Get().(*WorkOfInt64ToUint8)
}
func putWorkOfInt64ToUint8(d *WorkOfInt64ToUint8) {
	d.Value = zero_of_WorkOfInt64ToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToUint8.Put(d)
}

type _Int64ToUint8 struct{}

func (_ _Int64ToUint8) GetWork() *WorkOfInt64ToUint8 {
	return getWorkOfInt64ToUint8()
}
func (__ _Int64ToUint8) GetWorkWith(value int64, returnCh chan<- *ReturnOfUint8) *WorkOfInt64ToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToUint8) PutWork(d *WorkOfInt64ToUint8) {
	putWorkOfInt64ToUint8(d)
}

func (_ _Int64ToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _Int64ToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _Int64ToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _Int64ToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _Int64ToUint8) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToUint8) CallAsync(ctx context.Context, work *WorkOfInt64ToUint8, h func(ctx context.Context, arg int64) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToUintptr interface {
	Push(ctx context.Context, work *WorkOfInt64ToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfInt64ToUintptr struct {
	Value    int64
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfInt64ToUintptrWithContext struct {
	Context context.Context
	WorkOfInt64ToUintptr
}

var (
	zero_of_WorkOfInt64ToUintptr       WorkOfInt64ToUintptr
	zero_of_WorkOfInt64ToUintptr_Value int64
	pool_of_WorkOfInt64ToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToUintptr{}
		},
	}
)

func getWorkOfInt64ToUintptr() *WorkOfInt64ToUintptr {
	return pool_of_WorkOfInt64ToUintptr.Get().(*WorkOfInt64ToUintptr)
}
func putWorkOfInt64ToUintptr(d *WorkOfInt64ToUintptr) {
	d.Value = zero_of_WorkOfInt64ToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToUintptr.Put(d)
}

type _Int64ToUintptr struct{}

func (_ _Int64ToUintptr) GetWork() *WorkOfInt64ToUintptr {
	return getWorkOfInt64ToUintptr()
}
func (__ _Int64ToUintptr) GetWorkWith(value int64, returnCh chan<- *ReturnOfUintptr) *WorkOfInt64ToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToUintptr) PutWork(d *WorkOfInt64ToUintptr) {
	putWorkOfInt64ToUintptr(d)
}

func (_ _Int64ToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _Int64ToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _Int64ToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _Int64ToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _Int64ToUintptr) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToUintptr) CallAsync(ctx context.Context, work *WorkOfInt64ToUintptr, h func(ctx context.Context, arg int64) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToBytes interface {
	Push(ctx context.Context, work *WorkOfInt64ToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfInt64ToBytes struct {
	Value    int64
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfInt64ToBytesWithContext struct {
	Context context.Context
	WorkOfInt64ToBytes
}

var (
	zero_of_WorkOfInt64ToBytes       WorkOfInt64ToBytes
	zero_of_WorkOfInt64ToBytes_Value int64
	pool_of_WorkOfInt64ToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToBytes{}
		},
	}
)

func getWorkOfInt64ToBytes() *WorkOfInt64ToBytes {
	return pool_of_WorkOfInt64ToBytes.Get().(*WorkOfInt64ToBytes)
}
func putWorkOfInt64ToBytes(d *WorkOfInt64ToBytes) {
	d.Value = zero_of_WorkOfInt64ToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToBytes.Put(d)
}

type _Int64ToBytes struct{}

func (_ _Int64ToBytes) GetWork() *WorkOfInt64ToBytes {
	return getWorkOfInt64ToBytes()
}
func (__ _Int64ToBytes) GetWorkWith(value int64, returnCh chan<- *ReturnOfBytes) *WorkOfInt64ToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToBytes) PutWork(d *WorkOfInt64ToBytes) {
	putWorkOfInt64ToBytes(d)
}

func (_ _Int64ToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _Int64ToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _Int64ToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _Int64ToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _Int64ToBytes) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToBytes) CallAsync(ctx context.Context, work *WorkOfInt64ToBytes, h func(ctx context.Context, arg int64) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt64ToInterface interface {
	Push(ctx context.Context, work *WorkOfInt64ToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfInt64ToInterface struct {
	Value    int64
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfInt64ToInterfaceWithContext struct {
	Context context.Context
	WorkOfInt64ToInterface
}

var (
	zero_of_WorkOfInt64ToInterface       WorkOfInt64ToInterface
	zero_of_WorkOfInt64ToInterface_Value int64
	pool_of_WorkOfInt64ToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt64ToInterface{}
		},
	}
)

func getWorkOfInt64ToInterface() *WorkOfInt64ToInterface {
	return pool_of_WorkOfInt64ToInterface.Get().(*WorkOfInt64ToInterface)
}
func putWorkOfInt64ToInterface(d *WorkOfInt64ToInterface) {
	d.Value = zero_of_WorkOfInt64ToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt64ToInterface.Put(d)
}

type _Int64ToInterface struct{}

func (_ _Int64ToInterface) GetWork() *WorkOfInt64ToInterface {
	return getWorkOfInt64ToInterface()
}
func (__ _Int64ToInterface) GetWorkWith(value int64, returnCh chan<- *ReturnOfInterface) *WorkOfInt64ToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int64ToInterface) PutWork(d *WorkOfInt64ToInterface) {
	putWorkOfInt64ToInterface(d)
}

func (_ _Int64ToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _Int64ToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int64ToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _Int64ToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _Int64ToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _Int64ToInterface) CallSync(ctx context.Context, value int64, push func(ctx context.Context, work *WorkOfInt64ToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int64ToInterface) CallAsync(ctx context.Context, work *WorkOfInt64ToInterface, h func(ctx context.Context, arg int64) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToBool interface {
	Push(ctx context.Context, work *WorkOfInt8ToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfInt8ToBool struct {
	Value    int8
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfInt8ToBoolWithContext struct {
	Context context.Context
	WorkOfInt8ToBool
}

var (
	zero_of_WorkOfInt8ToBool       WorkOfInt8ToBool
	zero_of_WorkOfInt8ToBool_Value int8
	pool_of_WorkOfInt8ToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToBool{}
		},
	}
)

func getWorkOfInt8ToBool() *WorkOfInt8ToBool {
	return pool_of_WorkOfInt8ToBool.Get().(*WorkOfInt8ToBool)
}
func putWorkOfInt8ToBool(d *WorkOfInt8ToBool) {
	d.Value = zero_of_WorkOfInt8ToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToBool.Put(d)
}

type _Int8ToBool struct{}

func (_ _Int8ToBool) GetWork() *WorkOfInt8ToBool {
	return getWorkOfInt8ToBool()
}
func (__ _Int8ToBool) GetWorkWith(value int8, returnCh chan<- *ReturnOfBool) *WorkOfInt8ToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToBool) PutWork(d *WorkOfInt8ToBool) {
	putWorkOfInt8ToBool(d)
}

func (_ _Int8ToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _Int8ToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _Int8ToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _Int8ToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _Int8ToBool) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToBool) CallAsync(ctx context.Context, work *WorkOfInt8ToBool, h func(ctx context.Context, arg int8) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToByte interface {
	Push(ctx context.Context, work *WorkOfInt8ToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfInt8ToByte struct {
	Value    int8
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfInt8ToByteWithContext struct {
	Context context.Context
	WorkOfInt8ToByte
}

var (
	zero_of_WorkOfInt8ToByte       WorkOfInt8ToByte
	zero_of_WorkOfInt8ToByte_Value int8
	pool_of_WorkOfInt8ToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToByte{}
		},
	}
)

func getWorkOfInt8ToByte() *WorkOfInt8ToByte {
	return pool_of_WorkOfInt8ToByte.Get().(*WorkOfInt8ToByte)
}
func putWorkOfInt8ToByte(d *WorkOfInt8ToByte) {
	d.Value = zero_of_WorkOfInt8ToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToByte.Put(d)
}

type _Int8ToByte struct{}

func (_ _Int8ToByte) GetWork() *WorkOfInt8ToByte {
	return getWorkOfInt8ToByte()
}
func (__ _Int8ToByte) GetWorkWith(value int8, returnCh chan<- *ReturnOfByte) *WorkOfInt8ToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToByte) PutWork(d *WorkOfInt8ToByte) {
	putWorkOfInt8ToByte(d)
}

func (_ _Int8ToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _Int8ToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _Int8ToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _Int8ToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _Int8ToByte) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToByte) CallAsync(ctx context.Context, work *WorkOfInt8ToByte, h func(ctx context.Context, arg int8) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToComplex128 interface {
	Push(ctx context.Context, work *WorkOfInt8ToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfInt8ToComplex128 struct {
	Value    int8
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfInt8ToComplex128WithContext struct {
	Context context.Context
	WorkOfInt8ToComplex128
}

var (
	zero_of_WorkOfInt8ToComplex128       WorkOfInt8ToComplex128
	zero_of_WorkOfInt8ToComplex128_Value int8
	pool_of_WorkOfInt8ToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToComplex128{}
		},
	}
)

func getWorkOfInt8ToComplex128() *WorkOfInt8ToComplex128 {
	return pool_of_WorkOfInt8ToComplex128.Get().(*WorkOfInt8ToComplex128)
}
func putWorkOfInt8ToComplex128(d *WorkOfInt8ToComplex128) {
	d.Value = zero_of_WorkOfInt8ToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToComplex128.Put(d)
}

type _Int8ToComplex128 struct{}

func (_ _Int8ToComplex128) GetWork() *WorkOfInt8ToComplex128 {
	return getWorkOfInt8ToComplex128()
}
func (__ _Int8ToComplex128) GetWorkWith(value int8, returnCh chan<- *ReturnOfComplex128) *WorkOfInt8ToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToComplex128) PutWork(d *WorkOfInt8ToComplex128) {
	putWorkOfInt8ToComplex128(d)
}

func (_ _Int8ToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _Int8ToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _Int8ToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _Int8ToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _Int8ToComplex128) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToComplex128) CallAsync(ctx context.Context, work *WorkOfInt8ToComplex128, h func(ctx context.Context, arg int8) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToComplex64 interface {
	Push(ctx context.Context, work *WorkOfInt8ToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfInt8ToComplex64 struct {
	Value    int8
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfInt8ToComplex64WithContext struct {
	Context context.Context
	WorkOfInt8ToComplex64
}

var (
	zero_of_WorkOfInt8ToComplex64       WorkOfInt8ToComplex64
	zero_of_WorkOfInt8ToComplex64_Value int8
	pool_of_WorkOfInt8ToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToComplex64{}
		},
	}
)

func getWorkOfInt8ToComplex64() *WorkOfInt8ToComplex64 {
	return pool_of_WorkOfInt8ToComplex64.Get().(*WorkOfInt8ToComplex64)
}
func putWorkOfInt8ToComplex64(d *WorkOfInt8ToComplex64) {
	d.Value = zero_of_WorkOfInt8ToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToComplex64.Put(d)
}

type _Int8ToComplex64 struct{}

func (_ _Int8ToComplex64) GetWork() *WorkOfInt8ToComplex64 {
	return getWorkOfInt8ToComplex64()
}
func (__ _Int8ToComplex64) GetWorkWith(value int8, returnCh chan<- *ReturnOfComplex64) *WorkOfInt8ToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToComplex64) PutWork(d *WorkOfInt8ToComplex64) {
	putWorkOfInt8ToComplex64(d)
}

func (_ _Int8ToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _Int8ToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _Int8ToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _Int8ToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _Int8ToComplex64) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToComplex64) CallAsync(ctx context.Context, work *WorkOfInt8ToComplex64, h func(ctx context.Context, arg int8) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToError interface {
	Push(ctx context.Context, work *WorkOfInt8ToError, returnCh chan<- *ReturnOfError)
}

type WorkOfInt8ToError struct {
	Value    int8
	ReturnCh chan<- *ReturnOfError
}

type WorkOfInt8ToErrorWithContext struct {
	Context context.Context
	WorkOfInt8ToError
}

var (
	zero_of_WorkOfInt8ToError       WorkOfInt8ToError
	zero_of_WorkOfInt8ToError_Value int8
	pool_of_WorkOfInt8ToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToError{}
		},
	}
)

func getWorkOfInt8ToError() *WorkOfInt8ToError {
	return pool_of_WorkOfInt8ToError.Get().(*WorkOfInt8ToError)
}
func putWorkOfInt8ToError(d *WorkOfInt8ToError) {
	d.Value = zero_of_WorkOfInt8ToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToError.Put(d)
}

type _Int8ToError struct{}

func (_ _Int8ToError) GetWork() *WorkOfInt8ToError {
	return getWorkOfInt8ToError()
}
func (__ _Int8ToError) GetWorkWith(value int8, returnCh chan<- *ReturnOfError) *WorkOfInt8ToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToError) PutWork(d *WorkOfInt8ToError) {
	putWorkOfInt8ToError(d)
}

func (_ _Int8ToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _Int8ToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _Int8ToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _Int8ToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _Int8ToError) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToError) CallAsync(ctx context.Context, work *WorkOfInt8ToError, h func(ctx context.Context, arg int8) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToFloat32 interface {
	Push(ctx context.Context, work *WorkOfInt8ToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfInt8ToFloat32 struct {
	Value    int8
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfInt8ToFloat32WithContext struct {
	Context context.Context
	WorkOfInt8ToFloat32
}

var (
	zero_of_WorkOfInt8ToFloat32       WorkOfInt8ToFloat32
	zero_of_WorkOfInt8ToFloat32_Value int8
	pool_of_WorkOfInt8ToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToFloat32{}
		},
	}
)

func getWorkOfInt8ToFloat32() *WorkOfInt8ToFloat32 {
	return pool_of_WorkOfInt8ToFloat32.Get().(*WorkOfInt8ToFloat32)
}
func putWorkOfInt8ToFloat32(d *WorkOfInt8ToFloat32) {
	d.Value = zero_of_WorkOfInt8ToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToFloat32.Put(d)
}

type _Int8ToFloat32 struct{}

func (_ _Int8ToFloat32) GetWork() *WorkOfInt8ToFloat32 {
	return getWorkOfInt8ToFloat32()
}
func (__ _Int8ToFloat32) GetWorkWith(value int8, returnCh chan<- *ReturnOfFloat32) *WorkOfInt8ToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToFloat32) PutWork(d *WorkOfInt8ToFloat32) {
	putWorkOfInt8ToFloat32(d)
}

func (_ _Int8ToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _Int8ToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _Int8ToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _Int8ToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _Int8ToFloat32) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToFloat32) CallAsync(ctx context.Context, work *WorkOfInt8ToFloat32, h func(ctx context.Context, arg int8) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToFloat64 interface {
	Push(ctx context.Context, work *WorkOfInt8ToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfInt8ToFloat64 struct {
	Value    int8
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfInt8ToFloat64WithContext struct {
	Context context.Context
	WorkOfInt8ToFloat64
}

var (
	zero_of_WorkOfInt8ToFloat64       WorkOfInt8ToFloat64
	zero_of_WorkOfInt8ToFloat64_Value int8
	pool_of_WorkOfInt8ToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToFloat64{}
		},
	}
)

func getWorkOfInt8ToFloat64() *WorkOfInt8ToFloat64 {
	return pool_of_WorkOfInt8ToFloat64.Get().(*WorkOfInt8ToFloat64)
}
func putWorkOfInt8ToFloat64(d *WorkOfInt8ToFloat64) {
	d.Value = zero_of_WorkOfInt8ToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToFloat64.Put(d)
}

type _Int8ToFloat64 struct{}

func (_ _Int8ToFloat64) GetWork() *WorkOfInt8ToFloat64 {
	return getWorkOfInt8ToFloat64()
}
func (__ _Int8ToFloat64) GetWorkWith(value int8, returnCh chan<- *ReturnOfFloat64) *WorkOfInt8ToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToFloat64) PutWork(d *WorkOfInt8ToFloat64) {
	putWorkOfInt8ToFloat64(d)
}

func (_ _Int8ToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _Int8ToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _Int8ToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _Int8ToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _Int8ToFloat64) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToFloat64) CallAsync(ctx context.Context, work *WorkOfInt8ToFloat64, h func(ctx context.Context, arg int8) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToInt interface {
	Push(ctx context.Context, work *WorkOfInt8ToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfInt8ToInt struct {
	Value    int8
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfInt8ToIntWithContext struct {
	Context context.Context
	WorkOfInt8ToInt
}

var (
	zero_of_WorkOfInt8ToInt       WorkOfInt8ToInt
	zero_of_WorkOfInt8ToInt_Value int8
	pool_of_WorkOfInt8ToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToInt{}
		},
	}
)

func getWorkOfInt8ToInt() *WorkOfInt8ToInt {
	return pool_of_WorkOfInt8ToInt.Get().(*WorkOfInt8ToInt)
}
func putWorkOfInt8ToInt(d *WorkOfInt8ToInt) {
	d.Value = zero_of_WorkOfInt8ToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToInt.Put(d)
}

type _Int8ToInt struct{}

func (_ _Int8ToInt) GetWork() *WorkOfInt8ToInt {
	return getWorkOfInt8ToInt()
}
func (__ _Int8ToInt) GetWorkWith(value int8, returnCh chan<- *ReturnOfInt) *WorkOfInt8ToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToInt) PutWork(d *WorkOfInt8ToInt) {
	putWorkOfInt8ToInt(d)
}

func (_ _Int8ToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _Int8ToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _Int8ToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _Int8ToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _Int8ToInt) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToInt) CallAsync(ctx context.Context, work *WorkOfInt8ToInt, h func(ctx context.Context, arg int8) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToInt16 interface {
	Push(ctx context.Context, work *WorkOfInt8ToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfInt8ToInt16 struct {
	Value    int8
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfInt8ToInt16WithContext struct {
	Context context.Context
	WorkOfInt8ToInt16
}

var (
	zero_of_WorkOfInt8ToInt16       WorkOfInt8ToInt16
	zero_of_WorkOfInt8ToInt16_Value int8
	pool_of_WorkOfInt8ToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToInt16{}
		},
	}
)

func getWorkOfInt8ToInt16() *WorkOfInt8ToInt16 {
	return pool_of_WorkOfInt8ToInt16.Get().(*WorkOfInt8ToInt16)
}
func putWorkOfInt8ToInt16(d *WorkOfInt8ToInt16) {
	d.Value = zero_of_WorkOfInt8ToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToInt16.Put(d)
}

type _Int8ToInt16 struct{}

func (_ _Int8ToInt16) GetWork() *WorkOfInt8ToInt16 {
	return getWorkOfInt8ToInt16()
}
func (__ _Int8ToInt16) GetWorkWith(value int8, returnCh chan<- *ReturnOfInt16) *WorkOfInt8ToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToInt16) PutWork(d *WorkOfInt8ToInt16) {
	putWorkOfInt8ToInt16(d)
}

func (_ _Int8ToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _Int8ToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _Int8ToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _Int8ToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _Int8ToInt16) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToInt16) CallAsync(ctx context.Context, work *WorkOfInt8ToInt16, h func(ctx context.Context, arg int8) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToInt32 interface {
	Push(ctx context.Context, work *WorkOfInt8ToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfInt8ToInt32 struct {
	Value    int8
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfInt8ToInt32WithContext struct {
	Context context.Context
	WorkOfInt8ToInt32
}

var (
	zero_of_WorkOfInt8ToInt32       WorkOfInt8ToInt32
	zero_of_WorkOfInt8ToInt32_Value int8
	pool_of_WorkOfInt8ToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToInt32{}
		},
	}
)

func getWorkOfInt8ToInt32() *WorkOfInt8ToInt32 {
	return pool_of_WorkOfInt8ToInt32.Get().(*WorkOfInt8ToInt32)
}
func putWorkOfInt8ToInt32(d *WorkOfInt8ToInt32) {
	d.Value = zero_of_WorkOfInt8ToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToInt32.Put(d)
}

type _Int8ToInt32 struct{}

func (_ _Int8ToInt32) GetWork() *WorkOfInt8ToInt32 {
	return getWorkOfInt8ToInt32()
}
func (__ _Int8ToInt32) GetWorkWith(value int8, returnCh chan<- *ReturnOfInt32) *WorkOfInt8ToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToInt32) PutWork(d *WorkOfInt8ToInt32) {
	putWorkOfInt8ToInt32(d)
}

func (_ _Int8ToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _Int8ToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _Int8ToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _Int8ToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _Int8ToInt32) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToInt32) CallAsync(ctx context.Context, work *WorkOfInt8ToInt32, h func(ctx context.Context, arg int8) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToInt64 interface {
	Push(ctx context.Context, work *WorkOfInt8ToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfInt8ToInt64 struct {
	Value    int8
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfInt8ToInt64WithContext struct {
	Context context.Context
	WorkOfInt8ToInt64
}

var (
	zero_of_WorkOfInt8ToInt64       WorkOfInt8ToInt64
	zero_of_WorkOfInt8ToInt64_Value int8
	pool_of_WorkOfInt8ToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToInt64{}
		},
	}
)

func getWorkOfInt8ToInt64() *WorkOfInt8ToInt64 {
	return pool_of_WorkOfInt8ToInt64.Get().(*WorkOfInt8ToInt64)
}
func putWorkOfInt8ToInt64(d *WorkOfInt8ToInt64) {
	d.Value = zero_of_WorkOfInt8ToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToInt64.Put(d)
}

type _Int8ToInt64 struct{}

func (_ _Int8ToInt64) GetWork() *WorkOfInt8ToInt64 {
	return getWorkOfInt8ToInt64()
}
func (__ _Int8ToInt64) GetWorkWith(value int8, returnCh chan<- *ReturnOfInt64) *WorkOfInt8ToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToInt64) PutWork(d *WorkOfInt8ToInt64) {
	putWorkOfInt8ToInt64(d)
}

func (_ _Int8ToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _Int8ToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _Int8ToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _Int8ToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _Int8ToInt64) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToInt64) CallAsync(ctx context.Context, work *WorkOfInt8ToInt64, h func(ctx context.Context, arg int8) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToInt8 interface {
	Push(ctx context.Context, work *WorkOfInt8ToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfInt8ToInt8 struct {
	Value    int8
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfInt8ToInt8WithContext struct {
	Context context.Context
	WorkOfInt8ToInt8
}

var (
	zero_of_WorkOfInt8ToInt8       WorkOfInt8ToInt8
	zero_of_WorkOfInt8ToInt8_Value int8
	pool_of_WorkOfInt8ToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToInt8{}
		},
	}
)

func getWorkOfInt8ToInt8() *WorkOfInt8ToInt8 {
	return pool_of_WorkOfInt8ToInt8.Get().(*WorkOfInt8ToInt8)
}
func putWorkOfInt8ToInt8(d *WorkOfInt8ToInt8) {
	d.Value = zero_of_WorkOfInt8ToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToInt8.Put(d)
}

type _Int8ToInt8 struct{}

func (_ _Int8ToInt8) GetWork() *WorkOfInt8ToInt8 {
	return getWorkOfInt8ToInt8()
}
func (__ _Int8ToInt8) GetWorkWith(value int8, returnCh chan<- *ReturnOfInt8) *WorkOfInt8ToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToInt8) PutWork(d *WorkOfInt8ToInt8) {
	putWorkOfInt8ToInt8(d)
}

func (_ _Int8ToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _Int8ToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _Int8ToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _Int8ToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _Int8ToInt8) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToInt8) CallAsync(ctx context.Context, work *WorkOfInt8ToInt8, h func(ctx context.Context, arg int8) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToRune interface {
	Push(ctx context.Context, work *WorkOfInt8ToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfInt8ToRune struct {
	Value    int8
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfInt8ToRuneWithContext struct {
	Context context.Context
	WorkOfInt8ToRune
}

var (
	zero_of_WorkOfInt8ToRune       WorkOfInt8ToRune
	zero_of_WorkOfInt8ToRune_Value int8
	pool_of_WorkOfInt8ToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToRune{}
		},
	}
)

func getWorkOfInt8ToRune() *WorkOfInt8ToRune {
	return pool_of_WorkOfInt8ToRune.Get().(*WorkOfInt8ToRune)
}
func putWorkOfInt8ToRune(d *WorkOfInt8ToRune) {
	d.Value = zero_of_WorkOfInt8ToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToRune.Put(d)
}

type _Int8ToRune struct{}

func (_ _Int8ToRune) GetWork() *WorkOfInt8ToRune {
	return getWorkOfInt8ToRune()
}
func (__ _Int8ToRune) GetWorkWith(value int8, returnCh chan<- *ReturnOfRune) *WorkOfInt8ToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToRune) PutWork(d *WorkOfInt8ToRune) {
	putWorkOfInt8ToRune(d)
}

func (_ _Int8ToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _Int8ToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _Int8ToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _Int8ToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _Int8ToRune) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToRune) CallAsync(ctx context.Context, work *WorkOfInt8ToRune, h func(ctx context.Context, arg int8) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToString interface {
	Push(ctx context.Context, work *WorkOfInt8ToString, returnCh chan<- *ReturnOfString)
}

type WorkOfInt8ToString struct {
	Value    int8
	ReturnCh chan<- *ReturnOfString
}

type WorkOfInt8ToStringWithContext struct {
	Context context.Context
	WorkOfInt8ToString
}

var (
	zero_of_WorkOfInt8ToString       WorkOfInt8ToString
	zero_of_WorkOfInt8ToString_Value int8
	pool_of_WorkOfInt8ToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToString{}
		},
	}
)

func getWorkOfInt8ToString() *WorkOfInt8ToString {
	return pool_of_WorkOfInt8ToString.Get().(*WorkOfInt8ToString)
}
func putWorkOfInt8ToString(d *WorkOfInt8ToString) {
	d.Value = zero_of_WorkOfInt8ToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToString.Put(d)
}

type _Int8ToString struct{}

func (_ _Int8ToString) GetWork() *WorkOfInt8ToString {
	return getWorkOfInt8ToString()
}
func (__ _Int8ToString) GetWorkWith(value int8, returnCh chan<- *ReturnOfString) *WorkOfInt8ToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToString) PutWork(d *WorkOfInt8ToString) {
	putWorkOfInt8ToString(d)
}

func (_ _Int8ToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _Int8ToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _Int8ToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _Int8ToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _Int8ToString) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToString) CallAsync(ctx context.Context, work *WorkOfInt8ToString, h func(ctx context.Context, arg int8) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToUint interface {
	Push(ctx context.Context, work *WorkOfInt8ToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfInt8ToUint struct {
	Value    int8
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfInt8ToUintWithContext struct {
	Context context.Context
	WorkOfInt8ToUint
}

var (
	zero_of_WorkOfInt8ToUint       WorkOfInt8ToUint
	zero_of_WorkOfInt8ToUint_Value int8
	pool_of_WorkOfInt8ToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToUint{}
		},
	}
)

func getWorkOfInt8ToUint() *WorkOfInt8ToUint {
	return pool_of_WorkOfInt8ToUint.Get().(*WorkOfInt8ToUint)
}
func putWorkOfInt8ToUint(d *WorkOfInt8ToUint) {
	d.Value = zero_of_WorkOfInt8ToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToUint.Put(d)
}

type _Int8ToUint struct{}

func (_ _Int8ToUint) GetWork() *WorkOfInt8ToUint {
	return getWorkOfInt8ToUint()
}
func (__ _Int8ToUint) GetWorkWith(value int8, returnCh chan<- *ReturnOfUint) *WorkOfInt8ToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToUint) PutWork(d *WorkOfInt8ToUint) {
	putWorkOfInt8ToUint(d)
}

func (_ _Int8ToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _Int8ToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _Int8ToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _Int8ToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _Int8ToUint) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToUint) CallAsync(ctx context.Context, work *WorkOfInt8ToUint, h func(ctx context.Context, arg int8) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToUint16 interface {
	Push(ctx context.Context, work *WorkOfInt8ToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfInt8ToUint16 struct {
	Value    int8
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfInt8ToUint16WithContext struct {
	Context context.Context
	WorkOfInt8ToUint16
}

var (
	zero_of_WorkOfInt8ToUint16       WorkOfInt8ToUint16
	zero_of_WorkOfInt8ToUint16_Value int8
	pool_of_WorkOfInt8ToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToUint16{}
		},
	}
)

func getWorkOfInt8ToUint16() *WorkOfInt8ToUint16 {
	return pool_of_WorkOfInt8ToUint16.Get().(*WorkOfInt8ToUint16)
}
func putWorkOfInt8ToUint16(d *WorkOfInt8ToUint16) {
	d.Value = zero_of_WorkOfInt8ToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToUint16.Put(d)
}

type _Int8ToUint16 struct{}

func (_ _Int8ToUint16) GetWork() *WorkOfInt8ToUint16 {
	return getWorkOfInt8ToUint16()
}
func (__ _Int8ToUint16) GetWorkWith(value int8, returnCh chan<- *ReturnOfUint16) *WorkOfInt8ToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToUint16) PutWork(d *WorkOfInt8ToUint16) {
	putWorkOfInt8ToUint16(d)
}

func (_ _Int8ToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _Int8ToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _Int8ToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _Int8ToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _Int8ToUint16) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToUint16) CallAsync(ctx context.Context, work *WorkOfInt8ToUint16, h func(ctx context.Context, arg int8) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToUint32 interface {
	Push(ctx context.Context, work *WorkOfInt8ToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfInt8ToUint32 struct {
	Value    int8
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfInt8ToUint32WithContext struct {
	Context context.Context
	WorkOfInt8ToUint32
}

var (
	zero_of_WorkOfInt8ToUint32       WorkOfInt8ToUint32
	zero_of_WorkOfInt8ToUint32_Value int8
	pool_of_WorkOfInt8ToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToUint32{}
		},
	}
)

func getWorkOfInt8ToUint32() *WorkOfInt8ToUint32 {
	return pool_of_WorkOfInt8ToUint32.Get().(*WorkOfInt8ToUint32)
}
func putWorkOfInt8ToUint32(d *WorkOfInt8ToUint32) {
	d.Value = zero_of_WorkOfInt8ToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToUint32.Put(d)
}

type _Int8ToUint32 struct{}

func (_ _Int8ToUint32) GetWork() *WorkOfInt8ToUint32 {
	return getWorkOfInt8ToUint32()
}
func (__ _Int8ToUint32) GetWorkWith(value int8, returnCh chan<- *ReturnOfUint32) *WorkOfInt8ToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToUint32) PutWork(d *WorkOfInt8ToUint32) {
	putWorkOfInt8ToUint32(d)
}

func (_ _Int8ToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _Int8ToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _Int8ToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _Int8ToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _Int8ToUint32) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToUint32) CallAsync(ctx context.Context, work *WorkOfInt8ToUint32, h func(ctx context.Context, arg int8) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToUint64 interface {
	Push(ctx context.Context, work *WorkOfInt8ToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfInt8ToUint64 struct {
	Value    int8
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfInt8ToUint64WithContext struct {
	Context context.Context
	WorkOfInt8ToUint64
}

var (
	zero_of_WorkOfInt8ToUint64       WorkOfInt8ToUint64
	zero_of_WorkOfInt8ToUint64_Value int8
	pool_of_WorkOfInt8ToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToUint64{}
		},
	}
)

func getWorkOfInt8ToUint64() *WorkOfInt8ToUint64 {
	return pool_of_WorkOfInt8ToUint64.Get().(*WorkOfInt8ToUint64)
}
func putWorkOfInt8ToUint64(d *WorkOfInt8ToUint64) {
	d.Value = zero_of_WorkOfInt8ToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToUint64.Put(d)
}

type _Int8ToUint64 struct{}

func (_ _Int8ToUint64) GetWork() *WorkOfInt8ToUint64 {
	return getWorkOfInt8ToUint64()
}
func (__ _Int8ToUint64) GetWorkWith(value int8, returnCh chan<- *ReturnOfUint64) *WorkOfInt8ToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToUint64) PutWork(d *WorkOfInt8ToUint64) {
	putWorkOfInt8ToUint64(d)
}

func (_ _Int8ToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _Int8ToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _Int8ToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _Int8ToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _Int8ToUint64) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToUint64) CallAsync(ctx context.Context, work *WorkOfInt8ToUint64, h func(ctx context.Context, arg int8) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToUint8 interface {
	Push(ctx context.Context, work *WorkOfInt8ToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfInt8ToUint8 struct {
	Value    int8
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfInt8ToUint8WithContext struct {
	Context context.Context
	WorkOfInt8ToUint8
}

var (
	zero_of_WorkOfInt8ToUint8       WorkOfInt8ToUint8
	zero_of_WorkOfInt8ToUint8_Value int8
	pool_of_WorkOfInt8ToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToUint8{}
		},
	}
)

func getWorkOfInt8ToUint8() *WorkOfInt8ToUint8 {
	return pool_of_WorkOfInt8ToUint8.Get().(*WorkOfInt8ToUint8)
}
func putWorkOfInt8ToUint8(d *WorkOfInt8ToUint8) {
	d.Value = zero_of_WorkOfInt8ToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToUint8.Put(d)
}

type _Int8ToUint8 struct{}

func (_ _Int8ToUint8) GetWork() *WorkOfInt8ToUint8 {
	return getWorkOfInt8ToUint8()
}
func (__ _Int8ToUint8) GetWorkWith(value int8, returnCh chan<- *ReturnOfUint8) *WorkOfInt8ToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToUint8) PutWork(d *WorkOfInt8ToUint8) {
	putWorkOfInt8ToUint8(d)
}

func (_ _Int8ToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _Int8ToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _Int8ToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _Int8ToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _Int8ToUint8) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToUint8) CallAsync(ctx context.Context, work *WorkOfInt8ToUint8, h func(ctx context.Context, arg int8) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToUintptr interface {
	Push(ctx context.Context, work *WorkOfInt8ToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfInt8ToUintptr struct {
	Value    int8
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfInt8ToUintptrWithContext struct {
	Context context.Context
	WorkOfInt8ToUintptr
}

var (
	zero_of_WorkOfInt8ToUintptr       WorkOfInt8ToUintptr
	zero_of_WorkOfInt8ToUintptr_Value int8
	pool_of_WorkOfInt8ToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToUintptr{}
		},
	}
)

func getWorkOfInt8ToUintptr() *WorkOfInt8ToUintptr {
	return pool_of_WorkOfInt8ToUintptr.Get().(*WorkOfInt8ToUintptr)
}
func putWorkOfInt8ToUintptr(d *WorkOfInt8ToUintptr) {
	d.Value = zero_of_WorkOfInt8ToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToUintptr.Put(d)
}

type _Int8ToUintptr struct{}

func (_ _Int8ToUintptr) GetWork() *WorkOfInt8ToUintptr {
	return getWorkOfInt8ToUintptr()
}
func (__ _Int8ToUintptr) GetWorkWith(value int8, returnCh chan<- *ReturnOfUintptr) *WorkOfInt8ToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToUintptr) PutWork(d *WorkOfInt8ToUintptr) {
	putWorkOfInt8ToUintptr(d)
}

func (_ _Int8ToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _Int8ToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _Int8ToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _Int8ToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _Int8ToUintptr) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToUintptr) CallAsync(ctx context.Context, work *WorkOfInt8ToUintptr, h func(ctx context.Context, arg int8) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToBytes interface {
	Push(ctx context.Context, work *WorkOfInt8ToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfInt8ToBytes struct {
	Value    int8
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfInt8ToBytesWithContext struct {
	Context context.Context
	WorkOfInt8ToBytes
}

var (
	zero_of_WorkOfInt8ToBytes       WorkOfInt8ToBytes
	zero_of_WorkOfInt8ToBytes_Value int8
	pool_of_WorkOfInt8ToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToBytes{}
		},
	}
)

func getWorkOfInt8ToBytes() *WorkOfInt8ToBytes {
	return pool_of_WorkOfInt8ToBytes.Get().(*WorkOfInt8ToBytes)
}
func putWorkOfInt8ToBytes(d *WorkOfInt8ToBytes) {
	d.Value = zero_of_WorkOfInt8ToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToBytes.Put(d)
}

type _Int8ToBytes struct{}

func (_ _Int8ToBytes) GetWork() *WorkOfInt8ToBytes {
	return getWorkOfInt8ToBytes()
}
func (__ _Int8ToBytes) GetWorkWith(value int8, returnCh chan<- *ReturnOfBytes) *WorkOfInt8ToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToBytes) PutWork(d *WorkOfInt8ToBytes) {
	putWorkOfInt8ToBytes(d)
}

func (_ _Int8ToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _Int8ToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _Int8ToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _Int8ToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _Int8ToBytes) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToBytes) CallAsync(ctx context.Context, work *WorkOfInt8ToBytes, h func(ctx context.Context, arg int8) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInt8ToInterface interface {
	Push(ctx context.Context, work *WorkOfInt8ToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfInt8ToInterface struct {
	Value    int8
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfInt8ToInterfaceWithContext struct {
	Context context.Context
	WorkOfInt8ToInterface
}

var (
	zero_of_WorkOfInt8ToInterface       WorkOfInt8ToInterface
	zero_of_WorkOfInt8ToInterface_Value int8
	pool_of_WorkOfInt8ToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInt8ToInterface{}
		},
	}
)

func getWorkOfInt8ToInterface() *WorkOfInt8ToInterface {
	return pool_of_WorkOfInt8ToInterface.Get().(*WorkOfInt8ToInterface)
}
func putWorkOfInt8ToInterface(d *WorkOfInt8ToInterface) {
	d.Value = zero_of_WorkOfInt8ToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfInt8ToInterface.Put(d)
}

type _Int8ToInterface struct{}

func (_ _Int8ToInterface) GetWork() *WorkOfInt8ToInterface {
	return getWorkOfInt8ToInterface()
}
func (__ _Int8ToInterface) GetWorkWith(value int8, returnCh chan<- *ReturnOfInterface) *WorkOfInt8ToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Int8ToInterface) PutWork(d *WorkOfInt8ToInterface) {
	putWorkOfInt8ToInterface(d)
}

func (_ _Int8ToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _Int8ToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Int8ToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _Int8ToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _Int8ToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _Int8ToInterface) CallSync(ctx context.Context, value int8, push func(ctx context.Context, work *WorkOfInt8ToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Int8ToInterface) CallAsync(ctx context.Context, work *WorkOfInt8ToInterface, h func(ctx context.Context, arg int8) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToBool interface {
	Push(ctx context.Context, work *WorkOfRuneToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfRuneToBool struct {
	Value    rune
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfRuneToBoolWithContext struct {
	Context context.Context
	WorkOfRuneToBool
}

var (
	zero_of_WorkOfRuneToBool       WorkOfRuneToBool
	zero_of_WorkOfRuneToBool_Value rune
	pool_of_WorkOfRuneToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToBool{}
		},
	}
)

func getWorkOfRuneToBool() *WorkOfRuneToBool {
	return pool_of_WorkOfRuneToBool.Get().(*WorkOfRuneToBool)
}
func putWorkOfRuneToBool(d *WorkOfRuneToBool) {
	d.Value = zero_of_WorkOfRuneToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToBool.Put(d)
}

type _RuneToBool struct{}

func (_ _RuneToBool) GetWork() *WorkOfRuneToBool {
	return getWorkOfRuneToBool()
}
func (__ _RuneToBool) GetWorkWith(value rune, returnCh chan<- *ReturnOfBool) *WorkOfRuneToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToBool) PutWork(d *WorkOfRuneToBool) {
	putWorkOfRuneToBool(d)
}

func (_ _RuneToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _RuneToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _RuneToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _RuneToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _RuneToBool) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToBool) CallAsync(ctx context.Context, work *WorkOfRuneToBool, h func(ctx context.Context, arg rune) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToByte interface {
	Push(ctx context.Context, work *WorkOfRuneToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfRuneToByte struct {
	Value    rune
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfRuneToByteWithContext struct {
	Context context.Context
	WorkOfRuneToByte
}

var (
	zero_of_WorkOfRuneToByte       WorkOfRuneToByte
	zero_of_WorkOfRuneToByte_Value rune
	pool_of_WorkOfRuneToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToByte{}
		},
	}
)

func getWorkOfRuneToByte() *WorkOfRuneToByte {
	return pool_of_WorkOfRuneToByte.Get().(*WorkOfRuneToByte)
}
func putWorkOfRuneToByte(d *WorkOfRuneToByte) {
	d.Value = zero_of_WorkOfRuneToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToByte.Put(d)
}

type _RuneToByte struct{}

func (_ _RuneToByte) GetWork() *WorkOfRuneToByte {
	return getWorkOfRuneToByte()
}
func (__ _RuneToByte) GetWorkWith(value rune, returnCh chan<- *ReturnOfByte) *WorkOfRuneToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToByte) PutWork(d *WorkOfRuneToByte) {
	putWorkOfRuneToByte(d)
}

func (_ _RuneToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _RuneToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _RuneToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _RuneToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _RuneToByte) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToByte) CallAsync(ctx context.Context, work *WorkOfRuneToByte, h func(ctx context.Context, arg rune) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToComplex128 interface {
	Push(ctx context.Context, work *WorkOfRuneToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfRuneToComplex128 struct {
	Value    rune
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfRuneToComplex128WithContext struct {
	Context context.Context
	WorkOfRuneToComplex128
}

var (
	zero_of_WorkOfRuneToComplex128       WorkOfRuneToComplex128
	zero_of_WorkOfRuneToComplex128_Value rune
	pool_of_WorkOfRuneToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToComplex128{}
		},
	}
)

func getWorkOfRuneToComplex128() *WorkOfRuneToComplex128 {
	return pool_of_WorkOfRuneToComplex128.Get().(*WorkOfRuneToComplex128)
}
func putWorkOfRuneToComplex128(d *WorkOfRuneToComplex128) {
	d.Value = zero_of_WorkOfRuneToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToComplex128.Put(d)
}

type _RuneToComplex128 struct{}

func (_ _RuneToComplex128) GetWork() *WorkOfRuneToComplex128 {
	return getWorkOfRuneToComplex128()
}
func (__ _RuneToComplex128) GetWorkWith(value rune, returnCh chan<- *ReturnOfComplex128) *WorkOfRuneToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToComplex128) PutWork(d *WorkOfRuneToComplex128) {
	putWorkOfRuneToComplex128(d)
}

func (_ _RuneToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _RuneToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _RuneToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _RuneToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _RuneToComplex128) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToComplex128) CallAsync(ctx context.Context, work *WorkOfRuneToComplex128, h func(ctx context.Context, arg rune) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToComplex64 interface {
	Push(ctx context.Context, work *WorkOfRuneToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfRuneToComplex64 struct {
	Value    rune
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfRuneToComplex64WithContext struct {
	Context context.Context
	WorkOfRuneToComplex64
}

var (
	zero_of_WorkOfRuneToComplex64       WorkOfRuneToComplex64
	zero_of_WorkOfRuneToComplex64_Value rune
	pool_of_WorkOfRuneToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToComplex64{}
		},
	}
)

func getWorkOfRuneToComplex64() *WorkOfRuneToComplex64 {
	return pool_of_WorkOfRuneToComplex64.Get().(*WorkOfRuneToComplex64)
}
func putWorkOfRuneToComplex64(d *WorkOfRuneToComplex64) {
	d.Value = zero_of_WorkOfRuneToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToComplex64.Put(d)
}

type _RuneToComplex64 struct{}

func (_ _RuneToComplex64) GetWork() *WorkOfRuneToComplex64 {
	return getWorkOfRuneToComplex64()
}
func (__ _RuneToComplex64) GetWorkWith(value rune, returnCh chan<- *ReturnOfComplex64) *WorkOfRuneToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToComplex64) PutWork(d *WorkOfRuneToComplex64) {
	putWorkOfRuneToComplex64(d)
}

func (_ _RuneToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _RuneToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _RuneToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _RuneToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _RuneToComplex64) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToComplex64) CallAsync(ctx context.Context, work *WorkOfRuneToComplex64, h func(ctx context.Context, arg rune) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToError interface {
	Push(ctx context.Context, work *WorkOfRuneToError, returnCh chan<- *ReturnOfError)
}

type WorkOfRuneToError struct {
	Value    rune
	ReturnCh chan<- *ReturnOfError
}

type WorkOfRuneToErrorWithContext struct {
	Context context.Context
	WorkOfRuneToError
}

var (
	zero_of_WorkOfRuneToError       WorkOfRuneToError
	zero_of_WorkOfRuneToError_Value rune
	pool_of_WorkOfRuneToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToError{}
		},
	}
)

func getWorkOfRuneToError() *WorkOfRuneToError {
	return pool_of_WorkOfRuneToError.Get().(*WorkOfRuneToError)
}
func putWorkOfRuneToError(d *WorkOfRuneToError) {
	d.Value = zero_of_WorkOfRuneToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToError.Put(d)
}

type _RuneToError struct{}

func (_ _RuneToError) GetWork() *WorkOfRuneToError {
	return getWorkOfRuneToError()
}
func (__ _RuneToError) GetWorkWith(value rune, returnCh chan<- *ReturnOfError) *WorkOfRuneToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToError) PutWork(d *WorkOfRuneToError) {
	putWorkOfRuneToError(d)
}

func (_ _RuneToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _RuneToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _RuneToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _RuneToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _RuneToError) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToError) CallAsync(ctx context.Context, work *WorkOfRuneToError, h func(ctx context.Context, arg rune) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToFloat32 interface {
	Push(ctx context.Context, work *WorkOfRuneToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfRuneToFloat32 struct {
	Value    rune
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfRuneToFloat32WithContext struct {
	Context context.Context
	WorkOfRuneToFloat32
}

var (
	zero_of_WorkOfRuneToFloat32       WorkOfRuneToFloat32
	zero_of_WorkOfRuneToFloat32_Value rune
	pool_of_WorkOfRuneToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToFloat32{}
		},
	}
)

func getWorkOfRuneToFloat32() *WorkOfRuneToFloat32 {
	return pool_of_WorkOfRuneToFloat32.Get().(*WorkOfRuneToFloat32)
}
func putWorkOfRuneToFloat32(d *WorkOfRuneToFloat32) {
	d.Value = zero_of_WorkOfRuneToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToFloat32.Put(d)
}

type _RuneToFloat32 struct{}

func (_ _RuneToFloat32) GetWork() *WorkOfRuneToFloat32 {
	return getWorkOfRuneToFloat32()
}
func (__ _RuneToFloat32) GetWorkWith(value rune, returnCh chan<- *ReturnOfFloat32) *WorkOfRuneToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToFloat32) PutWork(d *WorkOfRuneToFloat32) {
	putWorkOfRuneToFloat32(d)
}

func (_ _RuneToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _RuneToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _RuneToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _RuneToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _RuneToFloat32) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToFloat32) CallAsync(ctx context.Context, work *WorkOfRuneToFloat32, h func(ctx context.Context, arg rune) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToFloat64 interface {
	Push(ctx context.Context, work *WorkOfRuneToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfRuneToFloat64 struct {
	Value    rune
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfRuneToFloat64WithContext struct {
	Context context.Context
	WorkOfRuneToFloat64
}

var (
	zero_of_WorkOfRuneToFloat64       WorkOfRuneToFloat64
	zero_of_WorkOfRuneToFloat64_Value rune
	pool_of_WorkOfRuneToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToFloat64{}
		},
	}
)

func getWorkOfRuneToFloat64() *WorkOfRuneToFloat64 {
	return pool_of_WorkOfRuneToFloat64.Get().(*WorkOfRuneToFloat64)
}
func putWorkOfRuneToFloat64(d *WorkOfRuneToFloat64) {
	d.Value = zero_of_WorkOfRuneToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToFloat64.Put(d)
}

type _RuneToFloat64 struct{}

func (_ _RuneToFloat64) GetWork() *WorkOfRuneToFloat64 {
	return getWorkOfRuneToFloat64()
}
func (__ _RuneToFloat64) GetWorkWith(value rune, returnCh chan<- *ReturnOfFloat64) *WorkOfRuneToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToFloat64) PutWork(d *WorkOfRuneToFloat64) {
	putWorkOfRuneToFloat64(d)
}

func (_ _RuneToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _RuneToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _RuneToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _RuneToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _RuneToFloat64) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToFloat64) CallAsync(ctx context.Context, work *WorkOfRuneToFloat64, h func(ctx context.Context, arg rune) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToInt interface {
	Push(ctx context.Context, work *WorkOfRuneToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfRuneToInt struct {
	Value    rune
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfRuneToIntWithContext struct {
	Context context.Context
	WorkOfRuneToInt
}

var (
	zero_of_WorkOfRuneToInt       WorkOfRuneToInt
	zero_of_WorkOfRuneToInt_Value rune
	pool_of_WorkOfRuneToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToInt{}
		},
	}
)

func getWorkOfRuneToInt() *WorkOfRuneToInt {
	return pool_of_WorkOfRuneToInt.Get().(*WorkOfRuneToInt)
}
func putWorkOfRuneToInt(d *WorkOfRuneToInt) {
	d.Value = zero_of_WorkOfRuneToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToInt.Put(d)
}

type _RuneToInt struct{}

func (_ _RuneToInt) GetWork() *WorkOfRuneToInt {
	return getWorkOfRuneToInt()
}
func (__ _RuneToInt) GetWorkWith(value rune, returnCh chan<- *ReturnOfInt) *WorkOfRuneToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToInt) PutWork(d *WorkOfRuneToInt) {
	putWorkOfRuneToInt(d)
}

func (_ _RuneToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _RuneToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _RuneToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _RuneToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _RuneToInt) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToInt) CallAsync(ctx context.Context, work *WorkOfRuneToInt, h func(ctx context.Context, arg rune) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToInt16 interface {
	Push(ctx context.Context, work *WorkOfRuneToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfRuneToInt16 struct {
	Value    rune
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfRuneToInt16WithContext struct {
	Context context.Context
	WorkOfRuneToInt16
}

var (
	zero_of_WorkOfRuneToInt16       WorkOfRuneToInt16
	zero_of_WorkOfRuneToInt16_Value rune
	pool_of_WorkOfRuneToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToInt16{}
		},
	}
)

func getWorkOfRuneToInt16() *WorkOfRuneToInt16 {
	return pool_of_WorkOfRuneToInt16.Get().(*WorkOfRuneToInt16)
}
func putWorkOfRuneToInt16(d *WorkOfRuneToInt16) {
	d.Value = zero_of_WorkOfRuneToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToInt16.Put(d)
}

type _RuneToInt16 struct{}

func (_ _RuneToInt16) GetWork() *WorkOfRuneToInt16 {
	return getWorkOfRuneToInt16()
}
func (__ _RuneToInt16) GetWorkWith(value rune, returnCh chan<- *ReturnOfInt16) *WorkOfRuneToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToInt16) PutWork(d *WorkOfRuneToInt16) {
	putWorkOfRuneToInt16(d)
}

func (_ _RuneToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _RuneToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _RuneToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _RuneToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _RuneToInt16) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToInt16) CallAsync(ctx context.Context, work *WorkOfRuneToInt16, h func(ctx context.Context, arg rune) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToInt32 interface {
	Push(ctx context.Context, work *WorkOfRuneToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfRuneToInt32 struct {
	Value    rune
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfRuneToInt32WithContext struct {
	Context context.Context
	WorkOfRuneToInt32
}

var (
	zero_of_WorkOfRuneToInt32       WorkOfRuneToInt32
	zero_of_WorkOfRuneToInt32_Value rune
	pool_of_WorkOfRuneToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToInt32{}
		},
	}
)

func getWorkOfRuneToInt32() *WorkOfRuneToInt32 {
	return pool_of_WorkOfRuneToInt32.Get().(*WorkOfRuneToInt32)
}
func putWorkOfRuneToInt32(d *WorkOfRuneToInt32) {
	d.Value = zero_of_WorkOfRuneToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToInt32.Put(d)
}

type _RuneToInt32 struct{}

func (_ _RuneToInt32) GetWork() *WorkOfRuneToInt32 {
	return getWorkOfRuneToInt32()
}
func (__ _RuneToInt32) GetWorkWith(value rune, returnCh chan<- *ReturnOfInt32) *WorkOfRuneToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToInt32) PutWork(d *WorkOfRuneToInt32) {
	putWorkOfRuneToInt32(d)
}

func (_ _RuneToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _RuneToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _RuneToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _RuneToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _RuneToInt32) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToInt32) CallAsync(ctx context.Context, work *WorkOfRuneToInt32, h func(ctx context.Context, arg rune) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToInt64 interface {
	Push(ctx context.Context, work *WorkOfRuneToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfRuneToInt64 struct {
	Value    rune
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfRuneToInt64WithContext struct {
	Context context.Context
	WorkOfRuneToInt64
}

var (
	zero_of_WorkOfRuneToInt64       WorkOfRuneToInt64
	zero_of_WorkOfRuneToInt64_Value rune
	pool_of_WorkOfRuneToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToInt64{}
		},
	}
)

func getWorkOfRuneToInt64() *WorkOfRuneToInt64 {
	return pool_of_WorkOfRuneToInt64.Get().(*WorkOfRuneToInt64)
}
func putWorkOfRuneToInt64(d *WorkOfRuneToInt64) {
	d.Value = zero_of_WorkOfRuneToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToInt64.Put(d)
}

type _RuneToInt64 struct{}

func (_ _RuneToInt64) GetWork() *WorkOfRuneToInt64 {
	return getWorkOfRuneToInt64()
}
func (__ _RuneToInt64) GetWorkWith(value rune, returnCh chan<- *ReturnOfInt64) *WorkOfRuneToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToInt64) PutWork(d *WorkOfRuneToInt64) {
	putWorkOfRuneToInt64(d)
}

func (_ _RuneToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _RuneToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _RuneToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _RuneToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _RuneToInt64) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToInt64) CallAsync(ctx context.Context, work *WorkOfRuneToInt64, h func(ctx context.Context, arg rune) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToInt8 interface {
	Push(ctx context.Context, work *WorkOfRuneToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfRuneToInt8 struct {
	Value    rune
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfRuneToInt8WithContext struct {
	Context context.Context
	WorkOfRuneToInt8
}

var (
	zero_of_WorkOfRuneToInt8       WorkOfRuneToInt8
	zero_of_WorkOfRuneToInt8_Value rune
	pool_of_WorkOfRuneToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToInt8{}
		},
	}
)

func getWorkOfRuneToInt8() *WorkOfRuneToInt8 {
	return pool_of_WorkOfRuneToInt8.Get().(*WorkOfRuneToInt8)
}
func putWorkOfRuneToInt8(d *WorkOfRuneToInt8) {
	d.Value = zero_of_WorkOfRuneToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToInt8.Put(d)
}

type _RuneToInt8 struct{}

func (_ _RuneToInt8) GetWork() *WorkOfRuneToInt8 {
	return getWorkOfRuneToInt8()
}
func (__ _RuneToInt8) GetWorkWith(value rune, returnCh chan<- *ReturnOfInt8) *WorkOfRuneToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToInt8) PutWork(d *WorkOfRuneToInt8) {
	putWorkOfRuneToInt8(d)
}

func (_ _RuneToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _RuneToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _RuneToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _RuneToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _RuneToInt8) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToInt8) CallAsync(ctx context.Context, work *WorkOfRuneToInt8, h func(ctx context.Context, arg rune) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToRune interface {
	Push(ctx context.Context, work *WorkOfRuneToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfRuneToRune struct {
	Value    rune
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfRuneToRuneWithContext struct {
	Context context.Context
	WorkOfRuneToRune
}

var (
	zero_of_WorkOfRuneToRune       WorkOfRuneToRune
	zero_of_WorkOfRuneToRune_Value rune
	pool_of_WorkOfRuneToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToRune{}
		},
	}
)

func getWorkOfRuneToRune() *WorkOfRuneToRune {
	return pool_of_WorkOfRuneToRune.Get().(*WorkOfRuneToRune)
}
func putWorkOfRuneToRune(d *WorkOfRuneToRune) {
	d.Value = zero_of_WorkOfRuneToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToRune.Put(d)
}

type _RuneToRune struct{}

func (_ _RuneToRune) GetWork() *WorkOfRuneToRune {
	return getWorkOfRuneToRune()
}
func (__ _RuneToRune) GetWorkWith(value rune, returnCh chan<- *ReturnOfRune) *WorkOfRuneToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToRune) PutWork(d *WorkOfRuneToRune) {
	putWorkOfRuneToRune(d)
}

func (_ _RuneToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _RuneToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _RuneToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _RuneToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _RuneToRune) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToRune) CallAsync(ctx context.Context, work *WorkOfRuneToRune, h func(ctx context.Context, arg rune) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToString interface {
	Push(ctx context.Context, work *WorkOfRuneToString, returnCh chan<- *ReturnOfString)
}

type WorkOfRuneToString struct {
	Value    rune
	ReturnCh chan<- *ReturnOfString
}

type WorkOfRuneToStringWithContext struct {
	Context context.Context
	WorkOfRuneToString
}

var (
	zero_of_WorkOfRuneToString       WorkOfRuneToString
	zero_of_WorkOfRuneToString_Value rune
	pool_of_WorkOfRuneToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToString{}
		},
	}
)

func getWorkOfRuneToString() *WorkOfRuneToString {
	return pool_of_WorkOfRuneToString.Get().(*WorkOfRuneToString)
}
func putWorkOfRuneToString(d *WorkOfRuneToString) {
	d.Value = zero_of_WorkOfRuneToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToString.Put(d)
}

type _RuneToString struct{}

func (_ _RuneToString) GetWork() *WorkOfRuneToString {
	return getWorkOfRuneToString()
}
func (__ _RuneToString) GetWorkWith(value rune, returnCh chan<- *ReturnOfString) *WorkOfRuneToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToString) PutWork(d *WorkOfRuneToString) {
	putWorkOfRuneToString(d)
}

func (_ _RuneToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _RuneToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _RuneToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _RuneToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _RuneToString) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToString) CallAsync(ctx context.Context, work *WorkOfRuneToString, h func(ctx context.Context, arg rune) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToUint interface {
	Push(ctx context.Context, work *WorkOfRuneToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfRuneToUint struct {
	Value    rune
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfRuneToUintWithContext struct {
	Context context.Context
	WorkOfRuneToUint
}

var (
	zero_of_WorkOfRuneToUint       WorkOfRuneToUint
	zero_of_WorkOfRuneToUint_Value rune
	pool_of_WorkOfRuneToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToUint{}
		},
	}
)

func getWorkOfRuneToUint() *WorkOfRuneToUint {
	return pool_of_WorkOfRuneToUint.Get().(*WorkOfRuneToUint)
}
func putWorkOfRuneToUint(d *WorkOfRuneToUint) {
	d.Value = zero_of_WorkOfRuneToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToUint.Put(d)
}

type _RuneToUint struct{}

func (_ _RuneToUint) GetWork() *WorkOfRuneToUint {
	return getWorkOfRuneToUint()
}
func (__ _RuneToUint) GetWorkWith(value rune, returnCh chan<- *ReturnOfUint) *WorkOfRuneToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToUint) PutWork(d *WorkOfRuneToUint) {
	putWorkOfRuneToUint(d)
}

func (_ _RuneToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _RuneToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _RuneToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _RuneToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _RuneToUint) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToUint) CallAsync(ctx context.Context, work *WorkOfRuneToUint, h func(ctx context.Context, arg rune) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToUint16 interface {
	Push(ctx context.Context, work *WorkOfRuneToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfRuneToUint16 struct {
	Value    rune
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfRuneToUint16WithContext struct {
	Context context.Context
	WorkOfRuneToUint16
}

var (
	zero_of_WorkOfRuneToUint16       WorkOfRuneToUint16
	zero_of_WorkOfRuneToUint16_Value rune
	pool_of_WorkOfRuneToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToUint16{}
		},
	}
)

func getWorkOfRuneToUint16() *WorkOfRuneToUint16 {
	return pool_of_WorkOfRuneToUint16.Get().(*WorkOfRuneToUint16)
}
func putWorkOfRuneToUint16(d *WorkOfRuneToUint16) {
	d.Value = zero_of_WorkOfRuneToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToUint16.Put(d)
}

type _RuneToUint16 struct{}

func (_ _RuneToUint16) GetWork() *WorkOfRuneToUint16 {
	return getWorkOfRuneToUint16()
}
func (__ _RuneToUint16) GetWorkWith(value rune, returnCh chan<- *ReturnOfUint16) *WorkOfRuneToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToUint16) PutWork(d *WorkOfRuneToUint16) {
	putWorkOfRuneToUint16(d)
}

func (_ _RuneToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _RuneToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _RuneToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _RuneToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _RuneToUint16) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToUint16) CallAsync(ctx context.Context, work *WorkOfRuneToUint16, h func(ctx context.Context, arg rune) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToUint32 interface {
	Push(ctx context.Context, work *WorkOfRuneToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfRuneToUint32 struct {
	Value    rune
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfRuneToUint32WithContext struct {
	Context context.Context
	WorkOfRuneToUint32
}

var (
	zero_of_WorkOfRuneToUint32       WorkOfRuneToUint32
	zero_of_WorkOfRuneToUint32_Value rune
	pool_of_WorkOfRuneToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToUint32{}
		},
	}
)

func getWorkOfRuneToUint32() *WorkOfRuneToUint32 {
	return pool_of_WorkOfRuneToUint32.Get().(*WorkOfRuneToUint32)
}
func putWorkOfRuneToUint32(d *WorkOfRuneToUint32) {
	d.Value = zero_of_WorkOfRuneToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToUint32.Put(d)
}

type _RuneToUint32 struct{}

func (_ _RuneToUint32) GetWork() *WorkOfRuneToUint32 {
	return getWorkOfRuneToUint32()
}
func (__ _RuneToUint32) GetWorkWith(value rune, returnCh chan<- *ReturnOfUint32) *WorkOfRuneToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToUint32) PutWork(d *WorkOfRuneToUint32) {
	putWorkOfRuneToUint32(d)
}

func (_ _RuneToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _RuneToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _RuneToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _RuneToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _RuneToUint32) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToUint32) CallAsync(ctx context.Context, work *WorkOfRuneToUint32, h func(ctx context.Context, arg rune) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToUint64 interface {
	Push(ctx context.Context, work *WorkOfRuneToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfRuneToUint64 struct {
	Value    rune
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfRuneToUint64WithContext struct {
	Context context.Context
	WorkOfRuneToUint64
}

var (
	zero_of_WorkOfRuneToUint64       WorkOfRuneToUint64
	zero_of_WorkOfRuneToUint64_Value rune
	pool_of_WorkOfRuneToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToUint64{}
		},
	}
)

func getWorkOfRuneToUint64() *WorkOfRuneToUint64 {
	return pool_of_WorkOfRuneToUint64.Get().(*WorkOfRuneToUint64)
}
func putWorkOfRuneToUint64(d *WorkOfRuneToUint64) {
	d.Value = zero_of_WorkOfRuneToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToUint64.Put(d)
}

type _RuneToUint64 struct{}

func (_ _RuneToUint64) GetWork() *WorkOfRuneToUint64 {
	return getWorkOfRuneToUint64()
}
func (__ _RuneToUint64) GetWorkWith(value rune, returnCh chan<- *ReturnOfUint64) *WorkOfRuneToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToUint64) PutWork(d *WorkOfRuneToUint64) {
	putWorkOfRuneToUint64(d)
}

func (_ _RuneToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _RuneToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _RuneToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _RuneToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _RuneToUint64) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToUint64) CallAsync(ctx context.Context, work *WorkOfRuneToUint64, h func(ctx context.Context, arg rune) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToUint8 interface {
	Push(ctx context.Context, work *WorkOfRuneToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfRuneToUint8 struct {
	Value    rune
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfRuneToUint8WithContext struct {
	Context context.Context
	WorkOfRuneToUint8
}

var (
	zero_of_WorkOfRuneToUint8       WorkOfRuneToUint8
	zero_of_WorkOfRuneToUint8_Value rune
	pool_of_WorkOfRuneToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToUint8{}
		},
	}
)

func getWorkOfRuneToUint8() *WorkOfRuneToUint8 {
	return pool_of_WorkOfRuneToUint8.Get().(*WorkOfRuneToUint8)
}
func putWorkOfRuneToUint8(d *WorkOfRuneToUint8) {
	d.Value = zero_of_WorkOfRuneToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToUint8.Put(d)
}

type _RuneToUint8 struct{}

func (_ _RuneToUint8) GetWork() *WorkOfRuneToUint8 {
	return getWorkOfRuneToUint8()
}
func (__ _RuneToUint8) GetWorkWith(value rune, returnCh chan<- *ReturnOfUint8) *WorkOfRuneToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToUint8) PutWork(d *WorkOfRuneToUint8) {
	putWorkOfRuneToUint8(d)
}

func (_ _RuneToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _RuneToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _RuneToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _RuneToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _RuneToUint8) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToUint8) CallAsync(ctx context.Context, work *WorkOfRuneToUint8, h func(ctx context.Context, arg rune) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToUintptr interface {
	Push(ctx context.Context, work *WorkOfRuneToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfRuneToUintptr struct {
	Value    rune
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfRuneToUintptrWithContext struct {
	Context context.Context
	WorkOfRuneToUintptr
}

var (
	zero_of_WorkOfRuneToUintptr       WorkOfRuneToUintptr
	zero_of_WorkOfRuneToUintptr_Value rune
	pool_of_WorkOfRuneToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToUintptr{}
		},
	}
)

func getWorkOfRuneToUintptr() *WorkOfRuneToUintptr {
	return pool_of_WorkOfRuneToUintptr.Get().(*WorkOfRuneToUintptr)
}
func putWorkOfRuneToUintptr(d *WorkOfRuneToUintptr) {
	d.Value = zero_of_WorkOfRuneToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToUintptr.Put(d)
}

type _RuneToUintptr struct{}

func (_ _RuneToUintptr) GetWork() *WorkOfRuneToUintptr {
	return getWorkOfRuneToUintptr()
}
func (__ _RuneToUintptr) GetWorkWith(value rune, returnCh chan<- *ReturnOfUintptr) *WorkOfRuneToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToUintptr) PutWork(d *WorkOfRuneToUintptr) {
	putWorkOfRuneToUintptr(d)
}

func (_ _RuneToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _RuneToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _RuneToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _RuneToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _RuneToUintptr) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToUintptr) CallAsync(ctx context.Context, work *WorkOfRuneToUintptr, h func(ctx context.Context, arg rune) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToBytes interface {
	Push(ctx context.Context, work *WorkOfRuneToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfRuneToBytes struct {
	Value    rune
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfRuneToBytesWithContext struct {
	Context context.Context
	WorkOfRuneToBytes
}

var (
	zero_of_WorkOfRuneToBytes       WorkOfRuneToBytes
	zero_of_WorkOfRuneToBytes_Value rune
	pool_of_WorkOfRuneToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToBytes{}
		},
	}
)

func getWorkOfRuneToBytes() *WorkOfRuneToBytes {
	return pool_of_WorkOfRuneToBytes.Get().(*WorkOfRuneToBytes)
}
func putWorkOfRuneToBytes(d *WorkOfRuneToBytes) {
	d.Value = zero_of_WorkOfRuneToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToBytes.Put(d)
}

type _RuneToBytes struct{}

func (_ _RuneToBytes) GetWork() *WorkOfRuneToBytes {
	return getWorkOfRuneToBytes()
}
func (__ _RuneToBytes) GetWorkWith(value rune, returnCh chan<- *ReturnOfBytes) *WorkOfRuneToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToBytes) PutWork(d *WorkOfRuneToBytes) {
	putWorkOfRuneToBytes(d)
}

func (_ _RuneToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _RuneToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _RuneToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _RuneToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _RuneToBytes) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToBytes) CallAsync(ctx context.Context, work *WorkOfRuneToBytes, h func(ctx context.Context, arg rune) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfRuneToInterface interface {
	Push(ctx context.Context, work *WorkOfRuneToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfRuneToInterface struct {
	Value    rune
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfRuneToInterfaceWithContext struct {
	Context context.Context
	WorkOfRuneToInterface
}

var (
	zero_of_WorkOfRuneToInterface       WorkOfRuneToInterface
	zero_of_WorkOfRuneToInterface_Value rune
	pool_of_WorkOfRuneToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfRuneToInterface{}
		},
	}
)

func getWorkOfRuneToInterface() *WorkOfRuneToInterface {
	return pool_of_WorkOfRuneToInterface.Get().(*WorkOfRuneToInterface)
}
func putWorkOfRuneToInterface(d *WorkOfRuneToInterface) {
	d.Value = zero_of_WorkOfRuneToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfRuneToInterface.Put(d)
}

type _RuneToInterface struct{}

func (_ _RuneToInterface) GetWork() *WorkOfRuneToInterface {
	return getWorkOfRuneToInterface()
}
func (__ _RuneToInterface) GetWorkWith(value rune, returnCh chan<- *ReturnOfInterface) *WorkOfRuneToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _RuneToInterface) PutWork(d *WorkOfRuneToInterface) {
	putWorkOfRuneToInterface(d)
}

func (_ _RuneToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _RuneToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _RuneToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _RuneToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _RuneToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _RuneToInterface) CallSync(ctx context.Context, value rune, push func(ctx context.Context, work *WorkOfRuneToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _RuneToInterface) CallAsync(ctx context.Context, work *WorkOfRuneToInterface, h func(ctx context.Context, arg rune) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToBool interface {
	Push(ctx context.Context, work *WorkOfStringToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfStringToBool struct {
	Value    string
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfStringToBoolWithContext struct {
	Context context.Context
	WorkOfStringToBool
}

var (
	zero_of_WorkOfStringToBool       WorkOfStringToBool
	zero_of_WorkOfStringToBool_Value string
	pool_of_WorkOfStringToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToBool{}
		},
	}
)

func getWorkOfStringToBool() *WorkOfStringToBool {
	return pool_of_WorkOfStringToBool.Get().(*WorkOfStringToBool)
}
func putWorkOfStringToBool(d *WorkOfStringToBool) {
	d.Value = zero_of_WorkOfStringToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToBool.Put(d)
}

type _StringToBool struct{}

func (_ _StringToBool) GetWork() *WorkOfStringToBool {
	return getWorkOfStringToBool()
}
func (__ _StringToBool) GetWorkWith(value string, returnCh chan<- *ReturnOfBool) *WorkOfStringToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToBool) PutWork(d *WorkOfStringToBool) {
	putWorkOfStringToBool(d)
}

func (_ _StringToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _StringToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _StringToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _StringToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _StringToBool) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToBool) CallAsync(ctx context.Context, work *WorkOfStringToBool, h func(ctx context.Context, arg string) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToByte interface {
	Push(ctx context.Context, work *WorkOfStringToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfStringToByte struct {
	Value    string
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfStringToByteWithContext struct {
	Context context.Context
	WorkOfStringToByte
}

var (
	zero_of_WorkOfStringToByte       WorkOfStringToByte
	zero_of_WorkOfStringToByte_Value string
	pool_of_WorkOfStringToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToByte{}
		},
	}
)

func getWorkOfStringToByte() *WorkOfStringToByte {
	return pool_of_WorkOfStringToByte.Get().(*WorkOfStringToByte)
}
func putWorkOfStringToByte(d *WorkOfStringToByte) {
	d.Value = zero_of_WorkOfStringToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToByte.Put(d)
}

type _StringToByte struct{}

func (_ _StringToByte) GetWork() *WorkOfStringToByte {
	return getWorkOfStringToByte()
}
func (__ _StringToByte) GetWorkWith(value string, returnCh chan<- *ReturnOfByte) *WorkOfStringToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToByte) PutWork(d *WorkOfStringToByte) {
	putWorkOfStringToByte(d)
}

func (_ _StringToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _StringToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _StringToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _StringToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _StringToByte) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToByte) CallAsync(ctx context.Context, work *WorkOfStringToByte, h func(ctx context.Context, arg string) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToComplex128 interface {
	Push(ctx context.Context, work *WorkOfStringToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfStringToComplex128 struct {
	Value    string
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfStringToComplex128WithContext struct {
	Context context.Context
	WorkOfStringToComplex128
}

var (
	zero_of_WorkOfStringToComplex128       WorkOfStringToComplex128
	zero_of_WorkOfStringToComplex128_Value string
	pool_of_WorkOfStringToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToComplex128{}
		},
	}
)

func getWorkOfStringToComplex128() *WorkOfStringToComplex128 {
	return pool_of_WorkOfStringToComplex128.Get().(*WorkOfStringToComplex128)
}
func putWorkOfStringToComplex128(d *WorkOfStringToComplex128) {
	d.Value = zero_of_WorkOfStringToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToComplex128.Put(d)
}

type _StringToComplex128 struct{}

func (_ _StringToComplex128) GetWork() *WorkOfStringToComplex128 {
	return getWorkOfStringToComplex128()
}
func (__ _StringToComplex128) GetWorkWith(value string, returnCh chan<- *ReturnOfComplex128) *WorkOfStringToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToComplex128) PutWork(d *WorkOfStringToComplex128) {
	putWorkOfStringToComplex128(d)
}

func (_ _StringToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _StringToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _StringToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _StringToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _StringToComplex128) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToComplex128) CallAsync(ctx context.Context, work *WorkOfStringToComplex128, h func(ctx context.Context, arg string) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToComplex64 interface {
	Push(ctx context.Context, work *WorkOfStringToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfStringToComplex64 struct {
	Value    string
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfStringToComplex64WithContext struct {
	Context context.Context
	WorkOfStringToComplex64
}

var (
	zero_of_WorkOfStringToComplex64       WorkOfStringToComplex64
	zero_of_WorkOfStringToComplex64_Value string
	pool_of_WorkOfStringToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToComplex64{}
		},
	}
)

func getWorkOfStringToComplex64() *WorkOfStringToComplex64 {
	return pool_of_WorkOfStringToComplex64.Get().(*WorkOfStringToComplex64)
}
func putWorkOfStringToComplex64(d *WorkOfStringToComplex64) {
	d.Value = zero_of_WorkOfStringToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToComplex64.Put(d)
}

type _StringToComplex64 struct{}

func (_ _StringToComplex64) GetWork() *WorkOfStringToComplex64 {
	return getWorkOfStringToComplex64()
}
func (__ _StringToComplex64) GetWorkWith(value string, returnCh chan<- *ReturnOfComplex64) *WorkOfStringToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToComplex64) PutWork(d *WorkOfStringToComplex64) {
	putWorkOfStringToComplex64(d)
}

func (_ _StringToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _StringToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _StringToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _StringToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _StringToComplex64) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToComplex64) CallAsync(ctx context.Context, work *WorkOfStringToComplex64, h func(ctx context.Context, arg string) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToError interface {
	Push(ctx context.Context, work *WorkOfStringToError, returnCh chan<- *ReturnOfError)
}

type WorkOfStringToError struct {
	Value    string
	ReturnCh chan<- *ReturnOfError
}

type WorkOfStringToErrorWithContext struct {
	Context context.Context
	WorkOfStringToError
}

var (
	zero_of_WorkOfStringToError       WorkOfStringToError
	zero_of_WorkOfStringToError_Value string
	pool_of_WorkOfStringToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToError{}
		},
	}
)

func getWorkOfStringToError() *WorkOfStringToError {
	return pool_of_WorkOfStringToError.Get().(*WorkOfStringToError)
}
func putWorkOfStringToError(d *WorkOfStringToError) {
	d.Value = zero_of_WorkOfStringToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToError.Put(d)
}

type _StringToError struct{}

func (_ _StringToError) GetWork() *WorkOfStringToError {
	return getWorkOfStringToError()
}
func (__ _StringToError) GetWorkWith(value string, returnCh chan<- *ReturnOfError) *WorkOfStringToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToError) PutWork(d *WorkOfStringToError) {
	putWorkOfStringToError(d)
}

func (_ _StringToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _StringToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _StringToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _StringToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _StringToError) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToError) CallAsync(ctx context.Context, work *WorkOfStringToError, h func(ctx context.Context, arg string) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToFloat32 interface {
	Push(ctx context.Context, work *WorkOfStringToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfStringToFloat32 struct {
	Value    string
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfStringToFloat32WithContext struct {
	Context context.Context
	WorkOfStringToFloat32
}

var (
	zero_of_WorkOfStringToFloat32       WorkOfStringToFloat32
	zero_of_WorkOfStringToFloat32_Value string
	pool_of_WorkOfStringToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToFloat32{}
		},
	}
)

func getWorkOfStringToFloat32() *WorkOfStringToFloat32 {
	return pool_of_WorkOfStringToFloat32.Get().(*WorkOfStringToFloat32)
}
func putWorkOfStringToFloat32(d *WorkOfStringToFloat32) {
	d.Value = zero_of_WorkOfStringToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToFloat32.Put(d)
}

type _StringToFloat32 struct{}

func (_ _StringToFloat32) GetWork() *WorkOfStringToFloat32 {
	return getWorkOfStringToFloat32()
}
func (__ _StringToFloat32) GetWorkWith(value string, returnCh chan<- *ReturnOfFloat32) *WorkOfStringToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToFloat32) PutWork(d *WorkOfStringToFloat32) {
	putWorkOfStringToFloat32(d)
}

func (_ _StringToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _StringToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _StringToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _StringToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _StringToFloat32) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToFloat32) CallAsync(ctx context.Context, work *WorkOfStringToFloat32, h func(ctx context.Context, arg string) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToFloat64 interface {
	Push(ctx context.Context, work *WorkOfStringToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfStringToFloat64 struct {
	Value    string
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfStringToFloat64WithContext struct {
	Context context.Context
	WorkOfStringToFloat64
}

var (
	zero_of_WorkOfStringToFloat64       WorkOfStringToFloat64
	zero_of_WorkOfStringToFloat64_Value string
	pool_of_WorkOfStringToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToFloat64{}
		},
	}
)

func getWorkOfStringToFloat64() *WorkOfStringToFloat64 {
	return pool_of_WorkOfStringToFloat64.Get().(*WorkOfStringToFloat64)
}
func putWorkOfStringToFloat64(d *WorkOfStringToFloat64) {
	d.Value = zero_of_WorkOfStringToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToFloat64.Put(d)
}

type _StringToFloat64 struct{}

func (_ _StringToFloat64) GetWork() *WorkOfStringToFloat64 {
	return getWorkOfStringToFloat64()
}
func (__ _StringToFloat64) GetWorkWith(value string, returnCh chan<- *ReturnOfFloat64) *WorkOfStringToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToFloat64) PutWork(d *WorkOfStringToFloat64) {
	putWorkOfStringToFloat64(d)
}

func (_ _StringToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _StringToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _StringToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _StringToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _StringToFloat64) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToFloat64) CallAsync(ctx context.Context, work *WorkOfStringToFloat64, h func(ctx context.Context, arg string) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToInt interface {
	Push(ctx context.Context, work *WorkOfStringToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfStringToInt struct {
	Value    string
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfStringToIntWithContext struct {
	Context context.Context
	WorkOfStringToInt
}

var (
	zero_of_WorkOfStringToInt       WorkOfStringToInt
	zero_of_WorkOfStringToInt_Value string
	pool_of_WorkOfStringToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToInt{}
		},
	}
)

func getWorkOfStringToInt() *WorkOfStringToInt {
	return pool_of_WorkOfStringToInt.Get().(*WorkOfStringToInt)
}
func putWorkOfStringToInt(d *WorkOfStringToInt) {
	d.Value = zero_of_WorkOfStringToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToInt.Put(d)
}

type _StringToInt struct{}

func (_ _StringToInt) GetWork() *WorkOfStringToInt {
	return getWorkOfStringToInt()
}
func (__ _StringToInt) GetWorkWith(value string, returnCh chan<- *ReturnOfInt) *WorkOfStringToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToInt) PutWork(d *WorkOfStringToInt) {
	putWorkOfStringToInt(d)
}

func (_ _StringToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _StringToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _StringToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _StringToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _StringToInt) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToInt) CallAsync(ctx context.Context, work *WorkOfStringToInt, h func(ctx context.Context, arg string) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToInt16 interface {
	Push(ctx context.Context, work *WorkOfStringToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfStringToInt16 struct {
	Value    string
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfStringToInt16WithContext struct {
	Context context.Context
	WorkOfStringToInt16
}

var (
	zero_of_WorkOfStringToInt16       WorkOfStringToInt16
	zero_of_WorkOfStringToInt16_Value string
	pool_of_WorkOfStringToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToInt16{}
		},
	}
)

func getWorkOfStringToInt16() *WorkOfStringToInt16 {
	return pool_of_WorkOfStringToInt16.Get().(*WorkOfStringToInt16)
}
func putWorkOfStringToInt16(d *WorkOfStringToInt16) {
	d.Value = zero_of_WorkOfStringToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToInt16.Put(d)
}

type _StringToInt16 struct{}

func (_ _StringToInt16) GetWork() *WorkOfStringToInt16 {
	return getWorkOfStringToInt16()
}
func (__ _StringToInt16) GetWorkWith(value string, returnCh chan<- *ReturnOfInt16) *WorkOfStringToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToInt16) PutWork(d *WorkOfStringToInt16) {
	putWorkOfStringToInt16(d)
}

func (_ _StringToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _StringToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _StringToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _StringToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _StringToInt16) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToInt16) CallAsync(ctx context.Context, work *WorkOfStringToInt16, h func(ctx context.Context, arg string) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToInt32 interface {
	Push(ctx context.Context, work *WorkOfStringToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfStringToInt32 struct {
	Value    string
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfStringToInt32WithContext struct {
	Context context.Context
	WorkOfStringToInt32
}

var (
	zero_of_WorkOfStringToInt32       WorkOfStringToInt32
	zero_of_WorkOfStringToInt32_Value string
	pool_of_WorkOfStringToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToInt32{}
		},
	}
)

func getWorkOfStringToInt32() *WorkOfStringToInt32 {
	return pool_of_WorkOfStringToInt32.Get().(*WorkOfStringToInt32)
}
func putWorkOfStringToInt32(d *WorkOfStringToInt32) {
	d.Value = zero_of_WorkOfStringToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToInt32.Put(d)
}

type _StringToInt32 struct{}

func (_ _StringToInt32) GetWork() *WorkOfStringToInt32 {
	return getWorkOfStringToInt32()
}
func (__ _StringToInt32) GetWorkWith(value string, returnCh chan<- *ReturnOfInt32) *WorkOfStringToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToInt32) PutWork(d *WorkOfStringToInt32) {
	putWorkOfStringToInt32(d)
}

func (_ _StringToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _StringToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _StringToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _StringToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _StringToInt32) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToInt32) CallAsync(ctx context.Context, work *WorkOfStringToInt32, h func(ctx context.Context, arg string) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToInt64 interface {
	Push(ctx context.Context, work *WorkOfStringToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfStringToInt64 struct {
	Value    string
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfStringToInt64WithContext struct {
	Context context.Context
	WorkOfStringToInt64
}

var (
	zero_of_WorkOfStringToInt64       WorkOfStringToInt64
	zero_of_WorkOfStringToInt64_Value string
	pool_of_WorkOfStringToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToInt64{}
		},
	}
)

func getWorkOfStringToInt64() *WorkOfStringToInt64 {
	return pool_of_WorkOfStringToInt64.Get().(*WorkOfStringToInt64)
}
func putWorkOfStringToInt64(d *WorkOfStringToInt64) {
	d.Value = zero_of_WorkOfStringToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToInt64.Put(d)
}

type _StringToInt64 struct{}

func (_ _StringToInt64) GetWork() *WorkOfStringToInt64 {
	return getWorkOfStringToInt64()
}
func (__ _StringToInt64) GetWorkWith(value string, returnCh chan<- *ReturnOfInt64) *WorkOfStringToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToInt64) PutWork(d *WorkOfStringToInt64) {
	putWorkOfStringToInt64(d)
}

func (_ _StringToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _StringToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _StringToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _StringToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _StringToInt64) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToInt64) CallAsync(ctx context.Context, work *WorkOfStringToInt64, h func(ctx context.Context, arg string) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToInt8 interface {
	Push(ctx context.Context, work *WorkOfStringToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfStringToInt8 struct {
	Value    string
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfStringToInt8WithContext struct {
	Context context.Context
	WorkOfStringToInt8
}

var (
	zero_of_WorkOfStringToInt8       WorkOfStringToInt8
	zero_of_WorkOfStringToInt8_Value string
	pool_of_WorkOfStringToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToInt8{}
		},
	}
)

func getWorkOfStringToInt8() *WorkOfStringToInt8 {
	return pool_of_WorkOfStringToInt8.Get().(*WorkOfStringToInt8)
}
func putWorkOfStringToInt8(d *WorkOfStringToInt8) {
	d.Value = zero_of_WorkOfStringToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToInt8.Put(d)
}

type _StringToInt8 struct{}

func (_ _StringToInt8) GetWork() *WorkOfStringToInt8 {
	return getWorkOfStringToInt8()
}
func (__ _StringToInt8) GetWorkWith(value string, returnCh chan<- *ReturnOfInt8) *WorkOfStringToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToInt8) PutWork(d *WorkOfStringToInt8) {
	putWorkOfStringToInt8(d)
}

func (_ _StringToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _StringToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _StringToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _StringToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _StringToInt8) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToInt8) CallAsync(ctx context.Context, work *WorkOfStringToInt8, h func(ctx context.Context, arg string) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToRune interface {
	Push(ctx context.Context, work *WorkOfStringToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfStringToRune struct {
	Value    string
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfStringToRuneWithContext struct {
	Context context.Context
	WorkOfStringToRune
}

var (
	zero_of_WorkOfStringToRune       WorkOfStringToRune
	zero_of_WorkOfStringToRune_Value string
	pool_of_WorkOfStringToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToRune{}
		},
	}
)

func getWorkOfStringToRune() *WorkOfStringToRune {
	return pool_of_WorkOfStringToRune.Get().(*WorkOfStringToRune)
}
func putWorkOfStringToRune(d *WorkOfStringToRune) {
	d.Value = zero_of_WorkOfStringToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToRune.Put(d)
}

type _StringToRune struct{}

func (_ _StringToRune) GetWork() *WorkOfStringToRune {
	return getWorkOfStringToRune()
}
func (__ _StringToRune) GetWorkWith(value string, returnCh chan<- *ReturnOfRune) *WorkOfStringToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToRune) PutWork(d *WorkOfStringToRune) {
	putWorkOfStringToRune(d)
}

func (_ _StringToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _StringToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _StringToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _StringToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _StringToRune) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToRune) CallAsync(ctx context.Context, work *WorkOfStringToRune, h func(ctx context.Context, arg string) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToString interface {
	Push(ctx context.Context, work *WorkOfStringToString, returnCh chan<- *ReturnOfString)
}

type WorkOfStringToString struct {
	Value    string
	ReturnCh chan<- *ReturnOfString
}

type WorkOfStringToStringWithContext struct {
	Context context.Context
	WorkOfStringToString
}

var (
	zero_of_WorkOfStringToString       WorkOfStringToString
	zero_of_WorkOfStringToString_Value string
	pool_of_WorkOfStringToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToString{}
		},
	}
)

func getWorkOfStringToString() *WorkOfStringToString {
	return pool_of_WorkOfStringToString.Get().(*WorkOfStringToString)
}
func putWorkOfStringToString(d *WorkOfStringToString) {
	d.Value = zero_of_WorkOfStringToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToString.Put(d)
}

type _StringToString struct{}

func (_ _StringToString) GetWork() *WorkOfStringToString {
	return getWorkOfStringToString()
}
func (__ _StringToString) GetWorkWith(value string, returnCh chan<- *ReturnOfString) *WorkOfStringToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToString) PutWork(d *WorkOfStringToString) {
	putWorkOfStringToString(d)
}

func (_ _StringToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _StringToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _StringToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _StringToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _StringToString) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToString) CallAsync(ctx context.Context, work *WorkOfStringToString, h func(ctx context.Context, arg string) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToUint interface {
	Push(ctx context.Context, work *WorkOfStringToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfStringToUint struct {
	Value    string
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfStringToUintWithContext struct {
	Context context.Context
	WorkOfStringToUint
}

var (
	zero_of_WorkOfStringToUint       WorkOfStringToUint
	zero_of_WorkOfStringToUint_Value string
	pool_of_WorkOfStringToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToUint{}
		},
	}
)

func getWorkOfStringToUint() *WorkOfStringToUint {
	return pool_of_WorkOfStringToUint.Get().(*WorkOfStringToUint)
}
func putWorkOfStringToUint(d *WorkOfStringToUint) {
	d.Value = zero_of_WorkOfStringToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToUint.Put(d)
}

type _StringToUint struct{}

func (_ _StringToUint) GetWork() *WorkOfStringToUint {
	return getWorkOfStringToUint()
}
func (__ _StringToUint) GetWorkWith(value string, returnCh chan<- *ReturnOfUint) *WorkOfStringToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToUint) PutWork(d *WorkOfStringToUint) {
	putWorkOfStringToUint(d)
}

func (_ _StringToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _StringToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _StringToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _StringToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _StringToUint) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToUint) CallAsync(ctx context.Context, work *WorkOfStringToUint, h func(ctx context.Context, arg string) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToUint16 interface {
	Push(ctx context.Context, work *WorkOfStringToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfStringToUint16 struct {
	Value    string
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfStringToUint16WithContext struct {
	Context context.Context
	WorkOfStringToUint16
}

var (
	zero_of_WorkOfStringToUint16       WorkOfStringToUint16
	zero_of_WorkOfStringToUint16_Value string
	pool_of_WorkOfStringToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToUint16{}
		},
	}
)

func getWorkOfStringToUint16() *WorkOfStringToUint16 {
	return pool_of_WorkOfStringToUint16.Get().(*WorkOfStringToUint16)
}
func putWorkOfStringToUint16(d *WorkOfStringToUint16) {
	d.Value = zero_of_WorkOfStringToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToUint16.Put(d)
}

type _StringToUint16 struct{}

func (_ _StringToUint16) GetWork() *WorkOfStringToUint16 {
	return getWorkOfStringToUint16()
}
func (__ _StringToUint16) GetWorkWith(value string, returnCh chan<- *ReturnOfUint16) *WorkOfStringToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToUint16) PutWork(d *WorkOfStringToUint16) {
	putWorkOfStringToUint16(d)
}

func (_ _StringToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _StringToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _StringToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _StringToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _StringToUint16) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToUint16) CallAsync(ctx context.Context, work *WorkOfStringToUint16, h func(ctx context.Context, arg string) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToUint32 interface {
	Push(ctx context.Context, work *WorkOfStringToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfStringToUint32 struct {
	Value    string
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfStringToUint32WithContext struct {
	Context context.Context
	WorkOfStringToUint32
}

var (
	zero_of_WorkOfStringToUint32       WorkOfStringToUint32
	zero_of_WorkOfStringToUint32_Value string
	pool_of_WorkOfStringToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToUint32{}
		},
	}
)

func getWorkOfStringToUint32() *WorkOfStringToUint32 {
	return pool_of_WorkOfStringToUint32.Get().(*WorkOfStringToUint32)
}
func putWorkOfStringToUint32(d *WorkOfStringToUint32) {
	d.Value = zero_of_WorkOfStringToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToUint32.Put(d)
}

type _StringToUint32 struct{}

func (_ _StringToUint32) GetWork() *WorkOfStringToUint32 {
	return getWorkOfStringToUint32()
}
func (__ _StringToUint32) GetWorkWith(value string, returnCh chan<- *ReturnOfUint32) *WorkOfStringToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToUint32) PutWork(d *WorkOfStringToUint32) {
	putWorkOfStringToUint32(d)
}

func (_ _StringToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _StringToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _StringToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _StringToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _StringToUint32) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToUint32) CallAsync(ctx context.Context, work *WorkOfStringToUint32, h func(ctx context.Context, arg string) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToUint64 interface {
	Push(ctx context.Context, work *WorkOfStringToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfStringToUint64 struct {
	Value    string
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfStringToUint64WithContext struct {
	Context context.Context
	WorkOfStringToUint64
}

var (
	zero_of_WorkOfStringToUint64       WorkOfStringToUint64
	zero_of_WorkOfStringToUint64_Value string
	pool_of_WorkOfStringToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToUint64{}
		},
	}
)

func getWorkOfStringToUint64() *WorkOfStringToUint64 {
	return pool_of_WorkOfStringToUint64.Get().(*WorkOfStringToUint64)
}
func putWorkOfStringToUint64(d *WorkOfStringToUint64) {
	d.Value = zero_of_WorkOfStringToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToUint64.Put(d)
}

type _StringToUint64 struct{}

func (_ _StringToUint64) GetWork() *WorkOfStringToUint64 {
	return getWorkOfStringToUint64()
}
func (__ _StringToUint64) GetWorkWith(value string, returnCh chan<- *ReturnOfUint64) *WorkOfStringToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToUint64) PutWork(d *WorkOfStringToUint64) {
	putWorkOfStringToUint64(d)
}

func (_ _StringToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _StringToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _StringToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _StringToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _StringToUint64) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToUint64) CallAsync(ctx context.Context, work *WorkOfStringToUint64, h func(ctx context.Context, arg string) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToUint8 interface {
	Push(ctx context.Context, work *WorkOfStringToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfStringToUint8 struct {
	Value    string
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfStringToUint8WithContext struct {
	Context context.Context
	WorkOfStringToUint8
}

var (
	zero_of_WorkOfStringToUint8       WorkOfStringToUint8
	zero_of_WorkOfStringToUint8_Value string
	pool_of_WorkOfStringToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToUint8{}
		},
	}
)

func getWorkOfStringToUint8() *WorkOfStringToUint8 {
	return pool_of_WorkOfStringToUint8.Get().(*WorkOfStringToUint8)
}
func putWorkOfStringToUint8(d *WorkOfStringToUint8) {
	d.Value = zero_of_WorkOfStringToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToUint8.Put(d)
}

type _StringToUint8 struct{}

func (_ _StringToUint8) GetWork() *WorkOfStringToUint8 {
	return getWorkOfStringToUint8()
}
func (__ _StringToUint8) GetWorkWith(value string, returnCh chan<- *ReturnOfUint8) *WorkOfStringToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToUint8) PutWork(d *WorkOfStringToUint8) {
	putWorkOfStringToUint8(d)
}

func (_ _StringToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _StringToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _StringToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _StringToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _StringToUint8) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToUint8) CallAsync(ctx context.Context, work *WorkOfStringToUint8, h func(ctx context.Context, arg string) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToUintptr interface {
	Push(ctx context.Context, work *WorkOfStringToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfStringToUintptr struct {
	Value    string
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfStringToUintptrWithContext struct {
	Context context.Context
	WorkOfStringToUintptr
}

var (
	zero_of_WorkOfStringToUintptr       WorkOfStringToUintptr
	zero_of_WorkOfStringToUintptr_Value string
	pool_of_WorkOfStringToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToUintptr{}
		},
	}
)

func getWorkOfStringToUintptr() *WorkOfStringToUintptr {
	return pool_of_WorkOfStringToUintptr.Get().(*WorkOfStringToUintptr)
}
func putWorkOfStringToUintptr(d *WorkOfStringToUintptr) {
	d.Value = zero_of_WorkOfStringToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToUintptr.Put(d)
}

type _StringToUintptr struct{}

func (_ _StringToUintptr) GetWork() *WorkOfStringToUintptr {
	return getWorkOfStringToUintptr()
}
func (__ _StringToUintptr) GetWorkWith(value string, returnCh chan<- *ReturnOfUintptr) *WorkOfStringToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToUintptr) PutWork(d *WorkOfStringToUintptr) {
	putWorkOfStringToUintptr(d)
}

func (_ _StringToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _StringToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _StringToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _StringToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _StringToUintptr) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToUintptr) CallAsync(ctx context.Context, work *WorkOfStringToUintptr, h func(ctx context.Context, arg string) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToBytes interface {
	Push(ctx context.Context, work *WorkOfStringToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfStringToBytes struct {
	Value    string
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfStringToBytesWithContext struct {
	Context context.Context
	WorkOfStringToBytes
}

var (
	zero_of_WorkOfStringToBytes       WorkOfStringToBytes
	zero_of_WorkOfStringToBytes_Value string
	pool_of_WorkOfStringToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToBytes{}
		},
	}
)

func getWorkOfStringToBytes() *WorkOfStringToBytes {
	return pool_of_WorkOfStringToBytes.Get().(*WorkOfStringToBytes)
}
func putWorkOfStringToBytes(d *WorkOfStringToBytes) {
	d.Value = zero_of_WorkOfStringToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToBytes.Put(d)
}

type _StringToBytes struct{}

func (_ _StringToBytes) GetWork() *WorkOfStringToBytes {
	return getWorkOfStringToBytes()
}
func (__ _StringToBytes) GetWorkWith(value string, returnCh chan<- *ReturnOfBytes) *WorkOfStringToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToBytes) PutWork(d *WorkOfStringToBytes) {
	putWorkOfStringToBytes(d)
}

func (_ _StringToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _StringToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _StringToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _StringToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _StringToBytes) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToBytes) CallAsync(ctx context.Context, work *WorkOfStringToBytes, h func(ctx context.Context, arg string) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfStringToInterface interface {
	Push(ctx context.Context, work *WorkOfStringToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfStringToInterface struct {
	Value    string
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfStringToInterfaceWithContext struct {
	Context context.Context
	WorkOfStringToInterface
}

var (
	zero_of_WorkOfStringToInterface       WorkOfStringToInterface
	zero_of_WorkOfStringToInterface_Value string
	pool_of_WorkOfStringToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToInterface{}
		},
	}
)

func getWorkOfStringToInterface() *WorkOfStringToInterface {
	return pool_of_WorkOfStringToInterface.Get().(*WorkOfStringToInterface)
}
func putWorkOfStringToInterface(d *WorkOfStringToInterface) {
	d.Value = zero_of_WorkOfStringToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToInterface.Put(d)
}

type _StringToInterface struct{}

func (_ _StringToInterface) GetWork() *WorkOfStringToInterface {
	return getWorkOfStringToInterface()
}
func (__ _StringToInterface) GetWorkWith(value string, returnCh chan<- *ReturnOfInterface) *WorkOfStringToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToInterface) PutWork(d *WorkOfStringToInterface) {
	putWorkOfStringToInterface(d)
}

func (_ _StringToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _StringToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _StringToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _StringToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _StringToInterface) CallSync(ctx context.Context, value string, push func(ctx context.Context, work *WorkOfStringToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToInterface) CallAsync(ctx context.Context, work *WorkOfStringToInterface, h func(ctx context.Context, arg string) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToBool interface {
	Push(ctx context.Context, work *WorkOfUintToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfUintToBool struct {
	Value    uint
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfUintToBoolWithContext struct {
	Context context.Context
	WorkOfUintToBool
}

var (
	zero_of_WorkOfUintToBool       WorkOfUintToBool
	zero_of_WorkOfUintToBool_Value uint
	pool_of_WorkOfUintToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToBool{}
		},
	}
)

func getWorkOfUintToBool() *WorkOfUintToBool {
	return pool_of_WorkOfUintToBool.Get().(*WorkOfUintToBool)
}
func putWorkOfUintToBool(d *WorkOfUintToBool) {
	d.Value = zero_of_WorkOfUintToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToBool.Put(d)
}

type _UintToBool struct{}

func (_ _UintToBool) GetWork() *WorkOfUintToBool {
	return getWorkOfUintToBool()
}
func (__ _UintToBool) GetWorkWith(value uint, returnCh chan<- *ReturnOfBool) *WorkOfUintToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToBool) PutWork(d *WorkOfUintToBool) {
	putWorkOfUintToBool(d)
}

func (_ _UintToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _UintToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _UintToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _UintToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _UintToBool) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToBool) CallAsync(ctx context.Context, work *WorkOfUintToBool, h func(ctx context.Context, arg uint) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToByte interface {
	Push(ctx context.Context, work *WorkOfUintToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfUintToByte struct {
	Value    uint
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfUintToByteWithContext struct {
	Context context.Context
	WorkOfUintToByte
}

var (
	zero_of_WorkOfUintToByte       WorkOfUintToByte
	zero_of_WorkOfUintToByte_Value uint
	pool_of_WorkOfUintToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToByte{}
		},
	}
)

func getWorkOfUintToByte() *WorkOfUintToByte {
	return pool_of_WorkOfUintToByte.Get().(*WorkOfUintToByte)
}
func putWorkOfUintToByte(d *WorkOfUintToByte) {
	d.Value = zero_of_WorkOfUintToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToByte.Put(d)
}

type _UintToByte struct{}

func (_ _UintToByte) GetWork() *WorkOfUintToByte {
	return getWorkOfUintToByte()
}
func (__ _UintToByte) GetWorkWith(value uint, returnCh chan<- *ReturnOfByte) *WorkOfUintToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToByte) PutWork(d *WorkOfUintToByte) {
	putWorkOfUintToByte(d)
}

func (_ _UintToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _UintToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _UintToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _UintToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _UintToByte) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToByte) CallAsync(ctx context.Context, work *WorkOfUintToByte, h func(ctx context.Context, arg uint) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToComplex128 interface {
	Push(ctx context.Context, work *WorkOfUintToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfUintToComplex128 struct {
	Value    uint
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfUintToComplex128WithContext struct {
	Context context.Context
	WorkOfUintToComplex128
}

var (
	zero_of_WorkOfUintToComplex128       WorkOfUintToComplex128
	zero_of_WorkOfUintToComplex128_Value uint
	pool_of_WorkOfUintToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToComplex128{}
		},
	}
)

func getWorkOfUintToComplex128() *WorkOfUintToComplex128 {
	return pool_of_WorkOfUintToComplex128.Get().(*WorkOfUintToComplex128)
}
func putWorkOfUintToComplex128(d *WorkOfUintToComplex128) {
	d.Value = zero_of_WorkOfUintToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToComplex128.Put(d)
}

type _UintToComplex128 struct{}

func (_ _UintToComplex128) GetWork() *WorkOfUintToComplex128 {
	return getWorkOfUintToComplex128()
}
func (__ _UintToComplex128) GetWorkWith(value uint, returnCh chan<- *ReturnOfComplex128) *WorkOfUintToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToComplex128) PutWork(d *WorkOfUintToComplex128) {
	putWorkOfUintToComplex128(d)
}

func (_ _UintToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _UintToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _UintToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _UintToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _UintToComplex128) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToComplex128) CallAsync(ctx context.Context, work *WorkOfUintToComplex128, h func(ctx context.Context, arg uint) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToComplex64 interface {
	Push(ctx context.Context, work *WorkOfUintToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfUintToComplex64 struct {
	Value    uint
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfUintToComplex64WithContext struct {
	Context context.Context
	WorkOfUintToComplex64
}

var (
	zero_of_WorkOfUintToComplex64       WorkOfUintToComplex64
	zero_of_WorkOfUintToComplex64_Value uint
	pool_of_WorkOfUintToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToComplex64{}
		},
	}
)

func getWorkOfUintToComplex64() *WorkOfUintToComplex64 {
	return pool_of_WorkOfUintToComplex64.Get().(*WorkOfUintToComplex64)
}
func putWorkOfUintToComplex64(d *WorkOfUintToComplex64) {
	d.Value = zero_of_WorkOfUintToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToComplex64.Put(d)
}

type _UintToComplex64 struct{}

func (_ _UintToComplex64) GetWork() *WorkOfUintToComplex64 {
	return getWorkOfUintToComplex64()
}
func (__ _UintToComplex64) GetWorkWith(value uint, returnCh chan<- *ReturnOfComplex64) *WorkOfUintToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToComplex64) PutWork(d *WorkOfUintToComplex64) {
	putWorkOfUintToComplex64(d)
}

func (_ _UintToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _UintToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _UintToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _UintToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _UintToComplex64) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToComplex64) CallAsync(ctx context.Context, work *WorkOfUintToComplex64, h func(ctx context.Context, arg uint) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToError interface {
	Push(ctx context.Context, work *WorkOfUintToError, returnCh chan<- *ReturnOfError)
}

type WorkOfUintToError struct {
	Value    uint
	ReturnCh chan<- *ReturnOfError
}

type WorkOfUintToErrorWithContext struct {
	Context context.Context
	WorkOfUintToError
}

var (
	zero_of_WorkOfUintToError       WorkOfUintToError
	zero_of_WorkOfUintToError_Value uint
	pool_of_WorkOfUintToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToError{}
		},
	}
)

func getWorkOfUintToError() *WorkOfUintToError {
	return pool_of_WorkOfUintToError.Get().(*WorkOfUintToError)
}
func putWorkOfUintToError(d *WorkOfUintToError) {
	d.Value = zero_of_WorkOfUintToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToError.Put(d)
}

type _UintToError struct{}

func (_ _UintToError) GetWork() *WorkOfUintToError {
	return getWorkOfUintToError()
}
func (__ _UintToError) GetWorkWith(value uint, returnCh chan<- *ReturnOfError) *WorkOfUintToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToError) PutWork(d *WorkOfUintToError) {
	putWorkOfUintToError(d)
}

func (_ _UintToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _UintToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _UintToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _UintToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _UintToError) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToError) CallAsync(ctx context.Context, work *WorkOfUintToError, h func(ctx context.Context, arg uint) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToFloat32 interface {
	Push(ctx context.Context, work *WorkOfUintToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfUintToFloat32 struct {
	Value    uint
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfUintToFloat32WithContext struct {
	Context context.Context
	WorkOfUintToFloat32
}

var (
	zero_of_WorkOfUintToFloat32       WorkOfUintToFloat32
	zero_of_WorkOfUintToFloat32_Value uint
	pool_of_WorkOfUintToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToFloat32{}
		},
	}
)

func getWorkOfUintToFloat32() *WorkOfUintToFloat32 {
	return pool_of_WorkOfUintToFloat32.Get().(*WorkOfUintToFloat32)
}
func putWorkOfUintToFloat32(d *WorkOfUintToFloat32) {
	d.Value = zero_of_WorkOfUintToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToFloat32.Put(d)
}

type _UintToFloat32 struct{}

func (_ _UintToFloat32) GetWork() *WorkOfUintToFloat32 {
	return getWorkOfUintToFloat32()
}
func (__ _UintToFloat32) GetWorkWith(value uint, returnCh chan<- *ReturnOfFloat32) *WorkOfUintToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToFloat32) PutWork(d *WorkOfUintToFloat32) {
	putWorkOfUintToFloat32(d)
}

func (_ _UintToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _UintToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _UintToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _UintToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _UintToFloat32) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToFloat32) CallAsync(ctx context.Context, work *WorkOfUintToFloat32, h func(ctx context.Context, arg uint) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToFloat64 interface {
	Push(ctx context.Context, work *WorkOfUintToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfUintToFloat64 struct {
	Value    uint
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfUintToFloat64WithContext struct {
	Context context.Context
	WorkOfUintToFloat64
}

var (
	zero_of_WorkOfUintToFloat64       WorkOfUintToFloat64
	zero_of_WorkOfUintToFloat64_Value uint
	pool_of_WorkOfUintToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToFloat64{}
		},
	}
)

func getWorkOfUintToFloat64() *WorkOfUintToFloat64 {
	return pool_of_WorkOfUintToFloat64.Get().(*WorkOfUintToFloat64)
}
func putWorkOfUintToFloat64(d *WorkOfUintToFloat64) {
	d.Value = zero_of_WorkOfUintToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToFloat64.Put(d)
}

type _UintToFloat64 struct{}

func (_ _UintToFloat64) GetWork() *WorkOfUintToFloat64 {
	return getWorkOfUintToFloat64()
}
func (__ _UintToFloat64) GetWorkWith(value uint, returnCh chan<- *ReturnOfFloat64) *WorkOfUintToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToFloat64) PutWork(d *WorkOfUintToFloat64) {
	putWorkOfUintToFloat64(d)
}

func (_ _UintToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _UintToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _UintToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _UintToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _UintToFloat64) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToFloat64) CallAsync(ctx context.Context, work *WorkOfUintToFloat64, h func(ctx context.Context, arg uint) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToInt interface {
	Push(ctx context.Context, work *WorkOfUintToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfUintToInt struct {
	Value    uint
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfUintToIntWithContext struct {
	Context context.Context
	WorkOfUintToInt
}

var (
	zero_of_WorkOfUintToInt       WorkOfUintToInt
	zero_of_WorkOfUintToInt_Value uint
	pool_of_WorkOfUintToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToInt{}
		},
	}
)

func getWorkOfUintToInt() *WorkOfUintToInt {
	return pool_of_WorkOfUintToInt.Get().(*WorkOfUintToInt)
}
func putWorkOfUintToInt(d *WorkOfUintToInt) {
	d.Value = zero_of_WorkOfUintToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToInt.Put(d)
}

type _UintToInt struct{}

func (_ _UintToInt) GetWork() *WorkOfUintToInt {
	return getWorkOfUintToInt()
}
func (__ _UintToInt) GetWorkWith(value uint, returnCh chan<- *ReturnOfInt) *WorkOfUintToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToInt) PutWork(d *WorkOfUintToInt) {
	putWorkOfUintToInt(d)
}

func (_ _UintToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _UintToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _UintToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _UintToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _UintToInt) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToInt) CallAsync(ctx context.Context, work *WorkOfUintToInt, h func(ctx context.Context, arg uint) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToInt16 interface {
	Push(ctx context.Context, work *WorkOfUintToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfUintToInt16 struct {
	Value    uint
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfUintToInt16WithContext struct {
	Context context.Context
	WorkOfUintToInt16
}

var (
	zero_of_WorkOfUintToInt16       WorkOfUintToInt16
	zero_of_WorkOfUintToInt16_Value uint
	pool_of_WorkOfUintToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToInt16{}
		},
	}
)

func getWorkOfUintToInt16() *WorkOfUintToInt16 {
	return pool_of_WorkOfUintToInt16.Get().(*WorkOfUintToInt16)
}
func putWorkOfUintToInt16(d *WorkOfUintToInt16) {
	d.Value = zero_of_WorkOfUintToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToInt16.Put(d)
}

type _UintToInt16 struct{}

func (_ _UintToInt16) GetWork() *WorkOfUintToInt16 {
	return getWorkOfUintToInt16()
}
func (__ _UintToInt16) GetWorkWith(value uint, returnCh chan<- *ReturnOfInt16) *WorkOfUintToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToInt16) PutWork(d *WorkOfUintToInt16) {
	putWorkOfUintToInt16(d)
}

func (_ _UintToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _UintToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _UintToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _UintToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _UintToInt16) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToInt16) CallAsync(ctx context.Context, work *WorkOfUintToInt16, h func(ctx context.Context, arg uint) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToInt32 interface {
	Push(ctx context.Context, work *WorkOfUintToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfUintToInt32 struct {
	Value    uint
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfUintToInt32WithContext struct {
	Context context.Context
	WorkOfUintToInt32
}

var (
	zero_of_WorkOfUintToInt32       WorkOfUintToInt32
	zero_of_WorkOfUintToInt32_Value uint
	pool_of_WorkOfUintToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToInt32{}
		},
	}
)

func getWorkOfUintToInt32() *WorkOfUintToInt32 {
	return pool_of_WorkOfUintToInt32.Get().(*WorkOfUintToInt32)
}
func putWorkOfUintToInt32(d *WorkOfUintToInt32) {
	d.Value = zero_of_WorkOfUintToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToInt32.Put(d)
}

type _UintToInt32 struct{}

func (_ _UintToInt32) GetWork() *WorkOfUintToInt32 {
	return getWorkOfUintToInt32()
}
func (__ _UintToInt32) GetWorkWith(value uint, returnCh chan<- *ReturnOfInt32) *WorkOfUintToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToInt32) PutWork(d *WorkOfUintToInt32) {
	putWorkOfUintToInt32(d)
}

func (_ _UintToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _UintToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _UintToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _UintToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _UintToInt32) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToInt32) CallAsync(ctx context.Context, work *WorkOfUintToInt32, h func(ctx context.Context, arg uint) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToInt64 interface {
	Push(ctx context.Context, work *WorkOfUintToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfUintToInt64 struct {
	Value    uint
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfUintToInt64WithContext struct {
	Context context.Context
	WorkOfUintToInt64
}

var (
	zero_of_WorkOfUintToInt64       WorkOfUintToInt64
	zero_of_WorkOfUintToInt64_Value uint
	pool_of_WorkOfUintToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToInt64{}
		},
	}
)

func getWorkOfUintToInt64() *WorkOfUintToInt64 {
	return pool_of_WorkOfUintToInt64.Get().(*WorkOfUintToInt64)
}
func putWorkOfUintToInt64(d *WorkOfUintToInt64) {
	d.Value = zero_of_WorkOfUintToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToInt64.Put(d)
}

type _UintToInt64 struct{}

func (_ _UintToInt64) GetWork() *WorkOfUintToInt64 {
	return getWorkOfUintToInt64()
}
func (__ _UintToInt64) GetWorkWith(value uint, returnCh chan<- *ReturnOfInt64) *WorkOfUintToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToInt64) PutWork(d *WorkOfUintToInt64) {
	putWorkOfUintToInt64(d)
}

func (_ _UintToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _UintToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _UintToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _UintToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _UintToInt64) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToInt64) CallAsync(ctx context.Context, work *WorkOfUintToInt64, h func(ctx context.Context, arg uint) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToInt8 interface {
	Push(ctx context.Context, work *WorkOfUintToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfUintToInt8 struct {
	Value    uint
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfUintToInt8WithContext struct {
	Context context.Context
	WorkOfUintToInt8
}

var (
	zero_of_WorkOfUintToInt8       WorkOfUintToInt8
	zero_of_WorkOfUintToInt8_Value uint
	pool_of_WorkOfUintToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToInt8{}
		},
	}
)

func getWorkOfUintToInt8() *WorkOfUintToInt8 {
	return pool_of_WorkOfUintToInt8.Get().(*WorkOfUintToInt8)
}
func putWorkOfUintToInt8(d *WorkOfUintToInt8) {
	d.Value = zero_of_WorkOfUintToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToInt8.Put(d)
}

type _UintToInt8 struct{}

func (_ _UintToInt8) GetWork() *WorkOfUintToInt8 {
	return getWorkOfUintToInt8()
}
func (__ _UintToInt8) GetWorkWith(value uint, returnCh chan<- *ReturnOfInt8) *WorkOfUintToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToInt8) PutWork(d *WorkOfUintToInt8) {
	putWorkOfUintToInt8(d)
}

func (_ _UintToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _UintToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _UintToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _UintToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _UintToInt8) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToInt8) CallAsync(ctx context.Context, work *WorkOfUintToInt8, h func(ctx context.Context, arg uint) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToRune interface {
	Push(ctx context.Context, work *WorkOfUintToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfUintToRune struct {
	Value    uint
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfUintToRuneWithContext struct {
	Context context.Context
	WorkOfUintToRune
}

var (
	zero_of_WorkOfUintToRune       WorkOfUintToRune
	zero_of_WorkOfUintToRune_Value uint
	pool_of_WorkOfUintToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToRune{}
		},
	}
)

func getWorkOfUintToRune() *WorkOfUintToRune {
	return pool_of_WorkOfUintToRune.Get().(*WorkOfUintToRune)
}
func putWorkOfUintToRune(d *WorkOfUintToRune) {
	d.Value = zero_of_WorkOfUintToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToRune.Put(d)
}

type _UintToRune struct{}

func (_ _UintToRune) GetWork() *WorkOfUintToRune {
	return getWorkOfUintToRune()
}
func (__ _UintToRune) GetWorkWith(value uint, returnCh chan<- *ReturnOfRune) *WorkOfUintToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToRune) PutWork(d *WorkOfUintToRune) {
	putWorkOfUintToRune(d)
}

func (_ _UintToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _UintToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _UintToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _UintToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _UintToRune) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToRune) CallAsync(ctx context.Context, work *WorkOfUintToRune, h func(ctx context.Context, arg uint) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToString interface {
	Push(ctx context.Context, work *WorkOfUintToString, returnCh chan<- *ReturnOfString)
}

type WorkOfUintToString struct {
	Value    uint
	ReturnCh chan<- *ReturnOfString
}

type WorkOfUintToStringWithContext struct {
	Context context.Context
	WorkOfUintToString
}

var (
	zero_of_WorkOfUintToString       WorkOfUintToString
	zero_of_WorkOfUintToString_Value uint
	pool_of_WorkOfUintToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToString{}
		},
	}
)

func getWorkOfUintToString() *WorkOfUintToString {
	return pool_of_WorkOfUintToString.Get().(*WorkOfUintToString)
}
func putWorkOfUintToString(d *WorkOfUintToString) {
	d.Value = zero_of_WorkOfUintToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToString.Put(d)
}

type _UintToString struct{}

func (_ _UintToString) GetWork() *WorkOfUintToString {
	return getWorkOfUintToString()
}
func (__ _UintToString) GetWorkWith(value uint, returnCh chan<- *ReturnOfString) *WorkOfUintToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToString) PutWork(d *WorkOfUintToString) {
	putWorkOfUintToString(d)
}

func (_ _UintToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _UintToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _UintToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _UintToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _UintToString) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToString) CallAsync(ctx context.Context, work *WorkOfUintToString, h func(ctx context.Context, arg uint) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToUint interface {
	Push(ctx context.Context, work *WorkOfUintToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfUintToUint struct {
	Value    uint
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfUintToUintWithContext struct {
	Context context.Context
	WorkOfUintToUint
}

var (
	zero_of_WorkOfUintToUint       WorkOfUintToUint
	zero_of_WorkOfUintToUint_Value uint
	pool_of_WorkOfUintToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToUint{}
		},
	}
)

func getWorkOfUintToUint() *WorkOfUintToUint {
	return pool_of_WorkOfUintToUint.Get().(*WorkOfUintToUint)
}
func putWorkOfUintToUint(d *WorkOfUintToUint) {
	d.Value = zero_of_WorkOfUintToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToUint.Put(d)
}

type _UintToUint struct{}

func (_ _UintToUint) GetWork() *WorkOfUintToUint {
	return getWorkOfUintToUint()
}
func (__ _UintToUint) GetWorkWith(value uint, returnCh chan<- *ReturnOfUint) *WorkOfUintToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToUint) PutWork(d *WorkOfUintToUint) {
	putWorkOfUintToUint(d)
}

func (_ _UintToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _UintToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _UintToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _UintToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _UintToUint) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToUint) CallAsync(ctx context.Context, work *WorkOfUintToUint, h func(ctx context.Context, arg uint) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToUint16 interface {
	Push(ctx context.Context, work *WorkOfUintToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfUintToUint16 struct {
	Value    uint
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfUintToUint16WithContext struct {
	Context context.Context
	WorkOfUintToUint16
}

var (
	zero_of_WorkOfUintToUint16       WorkOfUintToUint16
	zero_of_WorkOfUintToUint16_Value uint
	pool_of_WorkOfUintToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToUint16{}
		},
	}
)

func getWorkOfUintToUint16() *WorkOfUintToUint16 {
	return pool_of_WorkOfUintToUint16.Get().(*WorkOfUintToUint16)
}
func putWorkOfUintToUint16(d *WorkOfUintToUint16) {
	d.Value = zero_of_WorkOfUintToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToUint16.Put(d)
}

type _UintToUint16 struct{}

func (_ _UintToUint16) GetWork() *WorkOfUintToUint16 {
	return getWorkOfUintToUint16()
}
func (__ _UintToUint16) GetWorkWith(value uint, returnCh chan<- *ReturnOfUint16) *WorkOfUintToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToUint16) PutWork(d *WorkOfUintToUint16) {
	putWorkOfUintToUint16(d)
}

func (_ _UintToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _UintToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _UintToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _UintToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _UintToUint16) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToUint16) CallAsync(ctx context.Context, work *WorkOfUintToUint16, h func(ctx context.Context, arg uint) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToUint32 interface {
	Push(ctx context.Context, work *WorkOfUintToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfUintToUint32 struct {
	Value    uint
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfUintToUint32WithContext struct {
	Context context.Context
	WorkOfUintToUint32
}

var (
	zero_of_WorkOfUintToUint32       WorkOfUintToUint32
	zero_of_WorkOfUintToUint32_Value uint
	pool_of_WorkOfUintToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToUint32{}
		},
	}
)

func getWorkOfUintToUint32() *WorkOfUintToUint32 {
	return pool_of_WorkOfUintToUint32.Get().(*WorkOfUintToUint32)
}
func putWorkOfUintToUint32(d *WorkOfUintToUint32) {
	d.Value = zero_of_WorkOfUintToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToUint32.Put(d)
}

type _UintToUint32 struct{}

func (_ _UintToUint32) GetWork() *WorkOfUintToUint32 {
	return getWorkOfUintToUint32()
}
func (__ _UintToUint32) GetWorkWith(value uint, returnCh chan<- *ReturnOfUint32) *WorkOfUintToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToUint32) PutWork(d *WorkOfUintToUint32) {
	putWorkOfUintToUint32(d)
}

func (_ _UintToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _UintToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _UintToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _UintToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _UintToUint32) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToUint32) CallAsync(ctx context.Context, work *WorkOfUintToUint32, h func(ctx context.Context, arg uint) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToUint64 interface {
	Push(ctx context.Context, work *WorkOfUintToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfUintToUint64 struct {
	Value    uint
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfUintToUint64WithContext struct {
	Context context.Context
	WorkOfUintToUint64
}

var (
	zero_of_WorkOfUintToUint64       WorkOfUintToUint64
	zero_of_WorkOfUintToUint64_Value uint
	pool_of_WorkOfUintToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToUint64{}
		},
	}
)

func getWorkOfUintToUint64() *WorkOfUintToUint64 {
	return pool_of_WorkOfUintToUint64.Get().(*WorkOfUintToUint64)
}
func putWorkOfUintToUint64(d *WorkOfUintToUint64) {
	d.Value = zero_of_WorkOfUintToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToUint64.Put(d)
}

type _UintToUint64 struct{}

func (_ _UintToUint64) GetWork() *WorkOfUintToUint64 {
	return getWorkOfUintToUint64()
}
func (__ _UintToUint64) GetWorkWith(value uint, returnCh chan<- *ReturnOfUint64) *WorkOfUintToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToUint64) PutWork(d *WorkOfUintToUint64) {
	putWorkOfUintToUint64(d)
}

func (_ _UintToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _UintToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _UintToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _UintToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _UintToUint64) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToUint64) CallAsync(ctx context.Context, work *WorkOfUintToUint64, h func(ctx context.Context, arg uint) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToUint8 interface {
	Push(ctx context.Context, work *WorkOfUintToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfUintToUint8 struct {
	Value    uint
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfUintToUint8WithContext struct {
	Context context.Context
	WorkOfUintToUint8
}

var (
	zero_of_WorkOfUintToUint8       WorkOfUintToUint8
	zero_of_WorkOfUintToUint8_Value uint
	pool_of_WorkOfUintToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToUint8{}
		},
	}
)

func getWorkOfUintToUint8() *WorkOfUintToUint8 {
	return pool_of_WorkOfUintToUint8.Get().(*WorkOfUintToUint8)
}
func putWorkOfUintToUint8(d *WorkOfUintToUint8) {
	d.Value = zero_of_WorkOfUintToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToUint8.Put(d)
}

type _UintToUint8 struct{}

func (_ _UintToUint8) GetWork() *WorkOfUintToUint8 {
	return getWorkOfUintToUint8()
}
func (__ _UintToUint8) GetWorkWith(value uint, returnCh chan<- *ReturnOfUint8) *WorkOfUintToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToUint8) PutWork(d *WorkOfUintToUint8) {
	putWorkOfUintToUint8(d)
}

func (_ _UintToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _UintToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _UintToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _UintToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _UintToUint8) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToUint8) CallAsync(ctx context.Context, work *WorkOfUintToUint8, h func(ctx context.Context, arg uint) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToUintptr interface {
	Push(ctx context.Context, work *WorkOfUintToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfUintToUintptr struct {
	Value    uint
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfUintToUintptrWithContext struct {
	Context context.Context
	WorkOfUintToUintptr
}

var (
	zero_of_WorkOfUintToUintptr       WorkOfUintToUintptr
	zero_of_WorkOfUintToUintptr_Value uint
	pool_of_WorkOfUintToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToUintptr{}
		},
	}
)

func getWorkOfUintToUintptr() *WorkOfUintToUintptr {
	return pool_of_WorkOfUintToUintptr.Get().(*WorkOfUintToUintptr)
}
func putWorkOfUintToUintptr(d *WorkOfUintToUintptr) {
	d.Value = zero_of_WorkOfUintToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToUintptr.Put(d)
}

type _UintToUintptr struct{}

func (_ _UintToUintptr) GetWork() *WorkOfUintToUintptr {
	return getWorkOfUintToUintptr()
}
func (__ _UintToUintptr) GetWorkWith(value uint, returnCh chan<- *ReturnOfUintptr) *WorkOfUintToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToUintptr) PutWork(d *WorkOfUintToUintptr) {
	putWorkOfUintToUintptr(d)
}

func (_ _UintToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _UintToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _UintToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _UintToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _UintToUintptr) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToUintptr) CallAsync(ctx context.Context, work *WorkOfUintToUintptr, h func(ctx context.Context, arg uint) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToBytes interface {
	Push(ctx context.Context, work *WorkOfUintToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfUintToBytes struct {
	Value    uint
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfUintToBytesWithContext struct {
	Context context.Context
	WorkOfUintToBytes
}

var (
	zero_of_WorkOfUintToBytes       WorkOfUintToBytes
	zero_of_WorkOfUintToBytes_Value uint
	pool_of_WorkOfUintToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToBytes{}
		},
	}
)

func getWorkOfUintToBytes() *WorkOfUintToBytes {
	return pool_of_WorkOfUintToBytes.Get().(*WorkOfUintToBytes)
}
func putWorkOfUintToBytes(d *WorkOfUintToBytes) {
	d.Value = zero_of_WorkOfUintToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToBytes.Put(d)
}

type _UintToBytes struct{}

func (_ _UintToBytes) GetWork() *WorkOfUintToBytes {
	return getWorkOfUintToBytes()
}
func (__ _UintToBytes) GetWorkWith(value uint, returnCh chan<- *ReturnOfBytes) *WorkOfUintToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToBytes) PutWork(d *WorkOfUintToBytes) {
	putWorkOfUintToBytes(d)
}

func (_ _UintToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _UintToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _UintToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _UintToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _UintToBytes) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToBytes) CallAsync(ctx context.Context, work *WorkOfUintToBytes, h func(ctx context.Context, arg uint) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintToInterface interface {
	Push(ctx context.Context, work *WorkOfUintToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfUintToInterface struct {
	Value    uint
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfUintToInterfaceWithContext struct {
	Context context.Context
	WorkOfUintToInterface
}

var (
	zero_of_WorkOfUintToInterface       WorkOfUintToInterface
	zero_of_WorkOfUintToInterface_Value uint
	pool_of_WorkOfUintToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintToInterface{}
		},
	}
)

func getWorkOfUintToInterface() *WorkOfUintToInterface {
	return pool_of_WorkOfUintToInterface.Get().(*WorkOfUintToInterface)
}
func putWorkOfUintToInterface(d *WorkOfUintToInterface) {
	d.Value = zero_of_WorkOfUintToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintToInterface.Put(d)
}

type _UintToInterface struct{}

func (_ _UintToInterface) GetWork() *WorkOfUintToInterface {
	return getWorkOfUintToInterface()
}
func (__ _UintToInterface) GetWorkWith(value uint, returnCh chan<- *ReturnOfInterface) *WorkOfUintToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintToInterface) PutWork(d *WorkOfUintToInterface) {
	putWorkOfUintToInterface(d)
}

func (_ _UintToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _UintToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _UintToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _UintToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _UintToInterface) CallSync(ctx context.Context, value uint, push func(ctx context.Context, work *WorkOfUintToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintToInterface) CallAsync(ctx context.Context, work *WorkOfUintToInterface, h func(ctx context.Context, arg uint) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToBool interface {
	Push(ctx context.Context, work *WorkOfUint16ToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfUint16ToBool struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfUint16ToBoolWithContext struct {
	Context context.Context
	WorkOfUint16ToBool
}

var (
	zero_of_WorkOfUint16ToBool       WorkOfUint16ToBool
	zero_of_WorkOfUint16ToBool_Value uint16
	pool_of_WorkOfUint16ToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToBool{}
		},
	}
)

func getWorkOfUint16ToBool() *WorkOfUint16ToBool {
	return pool_of_WorkOfUint16ToBool.Get().(*WorkOfUint16ToBool)
}
func putWorkOfUint16ToBool(d *WorkOfUint16ToBool) {
	d.Value = zero_of_WorkOfUint16ToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToBool.Put(d)
}

type _Uint16ToBool struct{}

func (_ _Uint16ToBool) GetWork() *WorkOfUint16ToBool {
	return getWorkOfUint16ToBool()
}
func (__ _Uint16ToBool) GetWorkWith(value uint16, returnCh chan<- *ReturnOfBool) *WorkOfUint16ToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToBool) PutWork(d *WorkOfUint16ToBool) {
	putWorkOfUint16ToBool(d)
}

func (_ _Uint16ToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _Uint16ToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _Uint16ToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _Uint16ToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _Uint16ToBool) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToBool) CallAsync(ctx context.Context, work *WorkOfUint16ToBool, h func(ctx context.Context, arg uint16) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToByte interface {
	Push(ctx context.Context, work *WorkOfUint16ToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfUint16ToByte struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfUint16ToByteWithContext struct {
	Context context.Context
	WorkOfUint16ToByte
}

var (
	zero_of_WorkOfUint16ToByte       WorkOfUint16ToByte
	zero_of_WorkOfUint16ToByte_Value uint16
	pool_of_WorkOfUint16ToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToByte{}
		},
	}
)

func getWorkOfUint16ToByte() *WorkOfUint16ToByte {
	return pool_of_WorkOfUint16ToByte.Get().(*WorkOfUint16ToByte)
}
func putWorkOfUint16ToByte(d *WorkOfUint16ToByte) {
	d.Value = zero_of_WorkOfUint16ToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToByte.Put(d)
}

type _Uint16ToByte struct{}

func (_ _Uint16ToByte) GetWork() *WorkOfUint16ToByte {
	return getWorkOfUint16ToByte()
}
func (__ _Uint16ToByte) GetWorkWith(value uint16, returnCh chan<- *ReturnOfByte) *WorkOfUint16ToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToByte) PutWork(d *WorkOfUint16ToByte) {
	putWorkOfUint16ToByte(d)
}

func (_ _Uint16ToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _Uint16ToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _Uint16ToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _Uint16ToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _Uint16ToByte) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToByte) CallAsync(ctx context.Context, work *WorkOfUint16ToByte, h func(ctx context.Context, arg uint16) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToComplex128 interface {
	Push(ctx context.Context, work *WorkOfUint16ToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfUint16ToComplex128 struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfUint16ToComplex128WithContext struct {
	Context context.Context
	WorkOfUint16ToComplex128
}

var (
	zero_of_WorkOfUint16ToComplex128       WorkOfUint16ToComplex128
	zero_of_WorkOfUint16ToComplex128_Value uint16
	pool_of_WorkOfUint16ToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToComplex128{}
		},
	}
)

func getWorkOfUint16ToComplex128() *WorkOfUint16ToComplex128 {
	return pool_of_WorkOfUint16ToComplex128.Get().(*WorkOfUint16ToComplex128)
}
func putWorkOfUint16ToComplex128(d *WorkOfUint16ToComplex128) {
	d.Value = zero_of_WorkOfUint16ToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToComplex128.Put(d)
}

type _Uint16ToComplex128 struct{}

func (_ _Uint16ToComplex128) GetWork() *WorkOfUint16ToComplex128 {
	return getWorkOfUint16ToComplex128()
}
func (__ _Uint16ToComplex128) GetWorkWith(value uint16, returnCh chan<- *ReturnOfComplex128) *WorkOfUint16ToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToComplex128) PutWork(d *WorkOfUint16ToComplex128) {
	putWorkOfUint16ToComplex128(d)
}

func (_ _Uint16ToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _Uint16ToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _Uint16ToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _Uint16ToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _Uint16ToComplex128) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToComplex128) CallAsync(ctx context.Context, work *WorkOfUint16ToComplex128, h func(ctx context.Context, arg uint16) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToComplex64 interface {
	Push(ctx context.Context, work *WorkOfUint16ToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfUint16ToComplex64 struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfUint16ToComplex64WithContext struct {
	Context context.Context
	WorkOfUint16ToComplex64
}

var (
	zero_of_WorkOfUint16ToComplex64       WorkOfUint16ToComplex64
	zero_of_WorkOfUint16ToComplex64_Value uint16
	pool_of_WorkOfUint16ToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToComplex64{}
		},
	}
)

func getWorkOfUint16ToComplex64() *WorkOfUint16ToComplex64 {
	return pool_of_WorkOfUint16ToComplex64.Get().(*WorkOfUint16ToComplex64)
}
func putWorkOfUint16ToComplex64(d *WorkOfUint16ToComplex64) {
	d.Value = zero_of_WorkOfUint16ToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToComplex64.Put(d)
}

type _Uint16ToComplex64 struct{}

func (_ _Uint16ToComplex64) GetWork() *WorkOfUint16ToComplex64 {
	return getWorkOfUint16ToComplex64()
}
func (__ _Uint16ToComplex64) GetWorkWith(value uint16, returnCh chan<- *ReturnOfComplex64) *WorkOfUint16ToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToComplex64) PutWork(d *WorkOfUint16ToComplex64) {
	putWorkOfUint16ToComplex64(d)
}

func (_ _Uint16ToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _Uint16ToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _Uint16ToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _Uint16ToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _Uint16ToComplex64) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToComplex64) CallAsync(ctx context.Context, work *WorkOfUint16ToComplex64, h func(ctx context.Context, arg uint16) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToError interface {
	Push(ctx context.Context, work *WorkOfUint16ToError, returnCh chan<- *ReturnOfError)
}

type WorkOfUint16ToError struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfError
}

type WorkOfUint16ToErrorWithContext struct {
	Context context.Context
	WorkOfUint16ToError
}

var (
	zero_of_WorkOfUint16ToError       WorkOfUint16ToError
	zero_of_WorkOfUint16ToError_Value uint16
	pool_of_WorkOfUint16ToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToError{}
		},
	}
)

func getWorkOfUint16ToError() *WorkOfUint16ToError {
	return pool_of_WorkOfUint16ToError.Get().(*WorkOfUint16ToError)
}
func putWorkOfUint16ToError(d *WorkOfUint16ToError) {
	d.Value = zero_of_WorkOfUint16ToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToError.Put(d)
}

type _Uint16ToError struct{}

func (_ _Uint16ToError) GetWork() *WorkOfUint16ToError {
	return getWorkOfUint16ToError()
}
func (__ _Uint16ToError) GetWorkWith(value uint16, returnCh chan<- *ReturnOfError) *WorkOfUint16ToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToError) PutWork(d *WorkOfUint16ToError) {
	putWorkOfUint16ToError(d)
}

func (_ _Uint16ToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _Uint16ToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _Uint16ToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _Uint16ToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _Uint16ToError) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToError) CallAsync(ctx context.Context, work *WorkOfUint16ToError, h func(ctx context.Context, arg uint16) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToFloat32 interface {
	Push(ctx context.Context, work *WorkOfUint16ToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfUint16ToFloat32 struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfUint16ToFloat32WithContext struct {
	Context context.Context
	WorkOfUint16ToFloat32
}

var (
	zero_of_WorkOfUint16ToFloat32       WorkOfUint16ToFloat32
	zero_of_WorkOfUint16ToFloat32_Value uint16
	pool_of_WorkOfUint16ToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToFloat32{}
		},
	}
)

func getWorkOfUint16ToFloat32() *WorkOfUint16ToFloat32 {
	return pool_of_WorkOfUint16ToFloat32.Get().(*WorkOfUint16ToFloat32)
}
func putWorkOfUint16ToFloat32(d *WorkOfUint16ToFloat32) {
	d.Value = zero_of_WorkOfUint16ToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToFloat32.Put(d)
}

type _Uint16ToFloat32 struct{}

func (_ _Uint16ToFloat32) GetWork() *WorkOfUint16ToFloat32 {
	return getWorkOfUint16ToFloat32()
}
func (__ _Uint16ToFloat32) GetWorkWith(value uint16, returnCh chan<- *ReturnOfFloat32) *WorkOfUint16ToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToFloat32) PutWork(d *WorkOfUint16ToFloat32) {
	putWorkOfUint16ToFloat32(d)
}

func (_ _Uint16ToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _Uint16ToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _Uint16ToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _Uint16ToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _Uint16ToFloat32) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToFloat32) CallAsync(ctx context.Context, work *WorkOfUint16ToFloat32, h func(ctx context.Context, arg uint16) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToFloat64 interface {
	Push(ctx context.Context, work *WorkOfUint16ToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfUint16ToFloat64 struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfUint16ToFloat64WithContext struct {
	Context context.Context
	WorkOfUint16ToFloat64
}

var (
	zero_of_WorkOfUint16ToFloat64       WorkOfUint16ToFloat64
	zero_of_WorkOfUint16ToFloat64_Value uint16
	pool_of_WorkOfUint16ToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToFloat64{}
		},
	}
)

func getWorkOfUint16ToFloat64() *WorkOfUint16ToFloat64 {
	return pool_of_WorkOfUint16ToFloat64.Get().(*WorkOfUint16ToFloat64)
}
func putWorkOfUint16ToFloat64(d *WorkOfUint16ToFloat64) {
	d.Value = zero_of_WorkOfUint16ToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToFloat64.Put(d)
}

type _Uint16ToFloat64 struct{}

func (_ _Uint16ToFloat64) GetWork() *WorkOfUint16ToFloat64 {
	return getWorkOfUint16ToFloat64()
}
func (__ _Uint16ToFloat64) GetWorkWith(value uint16, returnCh chan<- *ReturnOfFloat64) *WorkOfUint16ToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToFloat64) PutWork(d *WorkOfUint16ToFloat64) {
	putWorkOfUint16ToFloat64(d)
}

func (_ _Uint16ToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _Uint16ToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _Uint16ToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _Uint16ToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _Uint16ToFloat64) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToFloat64) CallAsync(ctx context.Context, work *WorkOfUint16ToFloat64, h func(ctx context.Context, arg uint16) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToInt interface {
	Push(ctx context.Context, work *WorkOfUint16ToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfUint16ToInt struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfUint16ToIntWithContext struct {
	Context context.Context
	WorkOfUint16ToInt
}

var (
	zero_of_WorkOfUint16ToInt       WorkOfUint16ToInt
	zero_of_WorkOfUint16ToInt_Value uint16
	pool_of_WorkOfUint16ToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToInt{}
		},
	}
)

func getWorkOfUint16ToInt() *WorkOfUint16ToInt {
	return pool_of_WorkOfUint16ToInt.Get().(*WorkOfUint16ToInt)
}
func putWorkOfUint16ToInt(d *WorkOfUint16ToInt) {
	d.Value = zero_of_WorkOfUint16ToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToInt.Put(d)
}

type _Uint16ToInt struct{}

func (_ _Uint16ToInt) GetWork() *WorkOfUint16ToInt {
	return getWorkOfUint16ToInt()
}
func (__ _Uint16ToInt) GetWorkWith(value uint16, returnCh chan<- *ReturnOfInt) *WorkOfUint16ToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToInt) PutWork(d *WorkOfUint16ToInt) {
	putWorkOfUint16ToInt(d)
}

func (_ _Uint16ToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _Uint16ToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _Uint16ToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _Uint16ToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _Uint16ToInt) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToInt) CallAsync(ctx context.Context, work *WorkOfUint16ToInt, h func(ctx context.Context, arg uint16) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToInt16 interface {
	Push(ctx context.Context, work *WorkOfUint16ToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfUint16ToInt16 struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfUint16ToInt16WithContext struct {
	Context context.Context
	WorkOfUint16ToInt16
}

var (
	zero_of_WorkOfUint16ToInt16       WorkOfUint16ToInt16
	zero_of_WorkOfUint16ToInt16_Value uint16
	pool_of_WorkOfUint16ToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToInt16{}
		},
	}
)

func getWorkOfUint16ToInt16() *WorkOfUint16ToInt16 {
	return pool_of_WorkOfUint16ToInt16.Get().(*WorkOfUint16ToInt16)
}
func putWorkOfUint16ToInt16(d *WorkOfUint16ToInt16) {
	d.Value = zero_of_WorkOfUint16ToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToInt16.Put(d)
}

type _Uint16ToInt16 struct{}

func (_ _Uint16ToInt16) GetWork() *WorkOfUint16ToInt16 {
	return getWorkOfUint16ToInt16()
}
func (__ _Uint16ToInt16) GetWorkWith(value uint16, returnCh chan<- *ReturnOfInt16) *WorkOfUint16ToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToInt16) PutWork(d *WorkOfUint16ToInt16) {
	putWorkOfUint16ToInt16(d)
}

func (_ _Uint16ToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _Uint16ToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _Uint16ToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _Uint16ToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _Uint16ToInt16) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToInt16) CallAsync(ctx context.Context, work *WorkOfUint16ToInt16, h func(ctx context.Context, arg uint16) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToInt32 interface {
	Push(ctx context.Context, work *WorkOfUint16ToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfUint16ToInt32 struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfUint16ToInt32WithContext struct {
	Context context.Context
	WorkOfUint16ToInt32
}

var (
	zero_of_WorkOfUint16ToInt32       WorkOfUint16ToInt32
	zero_of_WorkOfUint16ToInt32_Value uint16
	pool_of_WorkOfUint16ToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToInt32{}
		},
	}
)

func getWorkOfUint16ToInt32() *WorkOfUint16ToInt32 {
	return pool_of_WorkOfUint16ToInt32.Get().(*WorkOfUint16ToInt32)
}
func putWorkOfUint16ToInt32(d *WorkOfUint16ToInt32) {
	d.Value = zero_of_WorkOfUint16ToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToInt32.Put(d)
}

type _Uint16ToInt32 struct{}

func (_ _Uint16ToInt32) GetWork() *WorkOfUint16ToInt32 {
	return getWorkOfUint16ToInt32()
}
func (__ _Uint16ToInt32) GetWorkWith(value uint16, returnCh chan<- *ReturnOfInt32) *WorkOfUint16ToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToInt32) PutWork(d *WorkOfUint16ToInt32) {
	putWorkOfUint16ToInt32(d)
}

func (_ _Uint16ToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _Uint16ToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _Uint16ToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _Uint16ToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _Uint16ToInt32) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToInt32) CallAsync(ctx context.Context, work *WorkOfUint16ToInt32, h func(ctx context.Context, arg uint16) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToInt64 interface {
	Push(ctx context.Context, work *WorkOfUint16ToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfUint16ToInt64 struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfUint16ToInt64WithContext struct {
	Context context.Context
	WorkOfUint16ToInt64
}

var (
	zero_of_WorkOfUint16ToInt64       WorkOfUint16ToInt64
	zero_of_WorkOfUint16ToInt64_Value uint16
	pool_of_WorkOfUint16ToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToInt64{}
		},
	}
)

func getWorkOfUint16ToInt64() *WorkOfUint16ToInt64 {
	return pool_of_WorkOfUint16ToInt64.Get().(*WorkOfUint16ToInt64)
}
func putWorkOfUint16ToInt64(d *WorkOfUint16ToInt64) {
	d.Value = zero_of_WorkOfUint16ToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToInt64.Put(d)
}

type _Uint16ToInt64 struct{}

func (_ _Uint16ToInt64) GetWork() *WorkOfUint16ToInt64 {
	return getWorkOfUint16ToInt64()
}
func (__ _Uint16ToInt64) GetWorkWith(value uint16, returnCh chan<- *ReturnOfInt64) *WorkOfUint16ToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToInt64) PutWork(d *WorkOfUint16ToInt64) {
	putWorkOfUint16ToInt64(d)
}

func (_ _Uint16ToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _Uint16ToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _Uint16ToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _Uint16ToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _Uint16ToInt64) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToInt64) CallAsync(ctx context.Context, work *WorkOfUint16ToInt64, h func(ctx context.Context, arg uint16) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToInt8 interface {
	Push(ctx context.Context, work *WorkOfUint16ToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfUint16ToInt8 struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfUint16ToInt8WithContext struct {
	Context context.Context
	WorkOfUint16ToInt8
}

var (
	zero_of_WorkOfUint16ToInt8       WorkOfUint16ToInt8
	zero_of_WorkOfUint16ToInt8_Value uint16
	pool_of_WorkOfUint16ToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToInt8{}
		},
	}
)

func getWorkOfUint16ToInt8() *WorkOfUint16ToInt8 {
	return pool_of_WorkOfUint16ToInt8.Get().(*WorkOfUint16ToInt8)
}
func putWorkOfUint16ToInt8(d *WorkOfUint16ToInt8) {
	d.Value = zero_of_WorkOfUint16ToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToInt8.Put(d)
}

type _Uint16ToInt8 struct{}

func (_ _Uint16ToInt8) GetWork() *WorkOfUint16ToInt8 {
	return getWorkOfUint16ToInt8()
}
func (__ _Uint16ToInt8) GetWorkWith(value uint16, returnCh chan<- *ReturnOfInt8) *WorkOfUint16ToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToInt8) PutWork(d *WorkOfUint16ToInt8) {
	putWorkOfUint16ToInt8(d)
}

func (_ _Uint16ToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _Uint16ToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _Uint16ToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _Uint16ToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _Uint16ToInt8) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToInt8) CallAsync(ctx context.Context, work *WorkOfUint16ToInt8, h func(ctx context.Context, arg uint16) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToRune interface {
	Push(ctx context.Context, work *WorkOfUint16ToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfUint16ToRune struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfUint16ToRuneWithContext struct {
	Context context.Context
	WorkOfUint16ToRune
}

var (
	zero_of_WorkOfUint16ToRune       WorkOfUint16ToRune
	zero_of_WorkOfUint16ToRune_Value uint16
	pool_of_WorkOfUint16ToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToRune{}
		},
	}
)

func getWorkOfUint16ToRune() *WorkOfUint16ToRune {
	return pool_of_WorkOfUint16ToRune.Get().(*WorkOfUint16ToRune)
}
func putWorkOfUint16ToRune(d *WorkOfUint16ToRune) {
	d.Value = zero_of_WorkOfUint16ToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToRune.Put(d)
}

type _Uint16ToRune struct{}

func (_ _Uint16ToRune) GetWork() *WorkOfUint16ToRune {
	return getWorkOfUint16ToRune()
}
func (__ _Uint16ToRune) GetWorkWith(value uint16, returnCh chan<- *ReturnOfRune) *WorkOfUint16ToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToRune) PutWork(d *WorkOfUint16ToRune) {
	putWorkOfUint16ToRune(d)
}

func (_ _Uint16ToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _Uint16ToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _Uint16ToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _Uint16ToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _Uint16ToRune) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToRune) CallAsync(ctx context.Context, work *WorkOfUint16ToRune, h func(ctx context.Context, arg uint16) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToString interface {
	Push(ctx context.Context, work *WorkOfUint16ToString, returnCh chan<- *ReturnOfString)
}

type WorkOfUint16ToString struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfString
}

type WorkOfUint16ToStringWithContext struct {
	Context context.Context
	WorkOfUint16ToString
}

var (
	zero_of_WorkOfUint16ToString       WorkOfUint16ToString
	zero_of_WorkOfUint16ToString_Value uint16
	pool_of_WorkOfUint16ToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToString{}
		},
	}
)

func getWorkOfUint16ToString() *WorkOfUint16ToString {
	return pool_of_WorkOfUint16ToString.Get().(*WorkOfUint16ToString)
}
func putWorkOfUint16ToString(d *WorkOfUint16ToString) {
	d.Value = zero_of_WorkOfUint16ToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToString.Put(d)
}

type _Uint16ToString struct{}

func (_ _Uint16ToString) GetWork() *WorkOfUint16ToString {
	return getWorkOfUint16ToString()
}
func (__ _Uint16ToString) GetWorkWith(value uint16, returnCh chan<- *ReturnOfString) *WorkOfUint16ToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToString) PutWork(d *WorkOfUint16ToString) {
	putWorkOfUint16ToString(d)
}

func (_ _Uint16ToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _Uint16ToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _Uint16ToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _Uint16ToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _Uint16ToString) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToString) CallAsync(ctx context.Context, work *WorkOfUint16ToString, h func(ctx context.Context, arg uint16) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToUint interface {
	Push(ctx context.Context, work *WorkOfUint16ToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfUint16ToUint struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfUint16ToUintWithContext struct {
	Context context.Context
	WorkOfUint16ToUint
}

var (
	zero_of_WorkOfUint16ToUint       WorkOfUint16ToUint
	zero_of_WorkOfUint16ToUint_Value uint16
	pool_of_WorkOfUint16ToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToUint{}
		},
	}
)

func getWorkOfUint16ToUint() *WorkOfUint16ToUint {
	return pool_of_WorkOfUint16ToUint.Get().(*WorkOfUint16ToUint)
}
func putWorkOfUint16ToUint(d *WorkOfUint16ToUint) {
	d.Value = zero_of_WorkOfUint16ToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToUint.Put(d)
}

type _Uint16ToUint struct{}

func (_ _Uint16ToUint) GetWork() *WorkOfUint16ToUint {
	return getWorkOfUint16ToUint()
}
func (__ _Uint16ToUint) GetWorkWith(value uint16, returnCh chan<- *ReturnOfUint) *WorkOfUint16ToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToUint) PutWork(d *WorkOfUint16ToUint) {
	putWorkOfUint16ToUint(d)
}

func (_ _Uint16ToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _Uint16ToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _Uint16ToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _Uint16ToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _Uint16ToUint) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToUint) CallAsync(ctx context.Context, work *WorkOfUint16ToUint, h func(ctx context.Context, arg uint16) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToUint16 interface {
	Push(ctx context.Context, work *WorkOfUint16ToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfUint16ToUint16 struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfUint16ToUint16WithContext struct {
	Context context.Context
	WorkOfUint16ToUint16
}

var (
	zero_of_WorkOfUint16ToUint16       WorkOfUint16ToUint16
	zero_of_WorkOfUint16ToUint16_Value uint16
	pool_of_WorkOfUint16ToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToUint16{}
		},
	}
)

func getWorkOfUint16ToUint16() *WorkOfUint16ToUint16 {
	return pool_of_WorkOfUint16ToUint16.Get().(*WorkOfUint16ToUint16)
}
func putWorkOfUint16ToUint16(d *WorkOfUint16ToUint16) {
	d.Value = zero_of_WorkOfUint16ToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToUint16.Put(d)
}

type _Uint16ToUint16 struct{}

func (_ _Uint16ToUint16) GetWork() *WorkOfUint16ToUint16 {
	return getWorkOfUint16ToUint16()
}
func (__ _Uint16ToUint16) GetWorkWith(value uint16, returnCh chan<- *ReturnOfUint16) *WorkOfUint16ToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToUint16) PutWork(d *WorkOfUint16ToUint16) {
	putWorkOfUint16ToUint16(d)
}

func (_ _Uint16ToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _Uint16ToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _Uint16ToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _Uint16ToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _Uint16ToUint16) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToUint16) CallAsync(ctx context.Context, work *WorkOfUint16ToUint16, h func(ctx context.Context, arg uint16) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToUint32 interface {
	Push(ctx context.Context, work *WorkOfUint16ToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfUint16ToUint32 struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfUint16ToUint32WithContext struct {
	Context context.Context
	WorkOfUint16ToUint32
}

var (
	zero_of_WorkOfUint16ToUint32       WorkOfUint16ToUint32
	zero_of_WorkOfUint16ToUint32_Value uint16
	pool_of_WorkOfUint16ToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToUint32{}
		},
	}
)

func getWorkOfUint16ToUint32() *WorkOfUint16ToUint32 {
	return pool_of_WorkOfUint16ToUint32.Get().(*WorkOfUint16ToUint32)
}
func putWorkOfUint16ToUint32(d *WorkOfUint16ToUint32) {
	d.Value = zero_of_WorkOfUint16ToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToUint32.Put(d)
}

type _Uint16ToUint32 struct{}

func (_ _Uint16ToUint32) GetWork() *WorkOfUint16ToUint32 {
	return getWorkOfUint16ToUint32()
}
func (__ _Uint16ToUint32) GetWorkWith(value uint16, returnCh chan<- *ReturnOfUint32) *WorkOfUint16ToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToUint32) PutWork(d *WorkOfUint16ToUint32) {
	putWorkOfUint16ToUint32(d)
}

func (_ _Uint16ToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _Uint16ToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _Uint16ToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _Uint16ToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _Uint16ToUint32) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToUint32) CallAsync(ctx context.Context, work *WorkOfUint16ToUint32, h func(ctx context.Context, arg uint16) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToUint64 interface {
	Push(ctx context.Context, work *WorkOfUint16ToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfUint16ToUint64 struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfUint16ToUint64WithContext struct {
	Context context.Context
	WorkOfUint16ToUint64
}

var (
	zero_of_WorkOfUint16ToUint64       WorkOfUint16ToUint64
	zero_of_WorkOfUint16ToUint64_Value uint16
	pool_of_WorkOfUint16ToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToUint64{}
		},
	}
)

func getWorkOfUint16ToUint64() *WorkOfUint16ToUint64 {
	return pool_of_WorkOfUint16ToUint64.Get().(*WorkOfUint16ToUint64)
}
func putWorkOfUint16ToUint64(d *WorkOfUint16ToUint64) {
	d.Value = zero_of_WorkOfUint16ToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToUint64.Put(d)
}

type _Uint16ToUint64 struct{}

func (_ _Uint16ToUint64) GetWork() *WorkOfUint16ToUint64 {
	return getWorkOfUint16ToUint64()
}
func (__ _Uint16ToUint64) GetWorkWith(value uint16, returnCh chan<- *ReturnOfUint64) *WorkOfUint16ToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToUint64) PutWork(d *WorkOfUint16ToUint64) {
	putWorkOfUint16ToUint64(d)
}

func (_ _Uint16ToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _Uint16ToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _Uint16ToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _Uint16ToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _Uint16ToUint64) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToUint64) CallAsync(ctx context.Context, work *WorkOfUint16ToUint64, h func(ctx context.Context, arg uint16) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToUint8 interface {
	Push(ctx context.Context, work *WorkOfUint16ToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfUint16ToUint8 struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfUint16ToUint8WithContext struct {
	Context context.Context
	WorkOfUint16ToUint8
}

var (
	zero_of_WorkOfUint16ToUint8       WorkOfUint16ToUint8
	zero_of_WorkOfUint16ToUint8_Value uint16
	pool_of_WorkOfUint16ToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToUint8{}
		},
	}
)

func getWorkOfUint16ToUint8() *WorkOfUint16ToUint8 {
	return pool_of_WorkOfUint16ToUint8.Get().(*WorkOfUint16ToUint8)
}
func putWorkOfUint16ToUint8(d *WorkOfUint16ToUint8) {
	d.Value = zero_of_WorkOfUint16ToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToUint8.Put(d)
}

type _Uint16ToUint8 struct{}

func (_ _Uint16ToUint8) GetWork() *WorkOfUint16ToUint8 {
	return getWorkOfUint16ToUint8()
}
func (__ _Uint16ToUint8) GetWorkWith(value uint16, returnCh chan<- *ReturnOfUint8) *WorkOfUint16ToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToUint8) PutWork(d *WorkOfUint16ToUint8) {
	putWorkOfUint16ToUint8(d)
}

func (_ _Uint16ToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _Uint16ToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _Uint16ToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _Uint16ToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _Uint16ToUint8) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToUint8) CallAsync(ctx context.Context, work *WorkOfUint16ToUint8, h func(ctx context.Context, arg uint16) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToUintptr interface {
	Push(ctx context.Context, work *WorkOfUint16ToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfUint16ToUintptr struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfUint16ToUintptrWithContext struct {
	Context context.Context
	WorkOfUint16ToUintptr
}

var (
	zero_of_WorkOfUint16ToUintptr       WorkOfUint16ToUintptr
	zero_of_WorkOfUint16ToUintptr_Value uint16
	pool_of_WorkOfUint16ToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToUintptr{}
		},
	}
)

func getWorkOfUint16ToUintptr() *WorkOfUint16ToUintptr {
	return pool_of_WorkOfUint16ToUintptr.Get().(*WorkOfUint16ToUintptr)
}
func putWorkOfUint16ToUintptr(d *WorkOfUint16ToUintptr) {
	d.Value = zero_of_WorkOfUint16ToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToUintptr.Put(d)
}

type _Uint16ToUintptr struct{}

func (_ _Uint16ToUintptr) GetWork() *WorkOfUint16ToUintptr {
	return getWorkOfUint16ToUintptr()
}
func (__ _Uint16ToUintptr) GetWorkWith(value uint16, returnCh chan<- *ReturnOfUintptr) *WorkOfUint16ToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToUintptr) PutWork(d *WorkOfUint16ToUintptr) {
	putWorkOfUint16ToUintptr(d)
}

func (_ _Uint16ToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _Uint16ToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _Uint16ToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _Uint16ToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _Uint16ToUintptr) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToUintptr) CallAsync(ctx context.Context, work *WorkOfUint16ToUintptr, h func(ctx context.Context, arg uint16) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToBytes interface {
	Push(ctx context.Context, work *WorkOfUint16ToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfUint16ToBytes struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfUint16ToBytesWithContext struct {
	Context context.Context
	WorkOfUint16ToBytes
}

var (
	zero_of_WorkOfUint16ToBytes       WorkOfUint16ToBytes
	zero_of_WorkOfUint16ToBytes_Value uint16
	pool_of_WorkOfUint16ToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToBytes{}
		},
	}
)

func getWorkOfUint16ToBytes() *WorkOfUint16ToBytes {
	return pool_of_WorkOfUint16ToBytes.Get().(*WorkOfUint16ToBytes)
}
func putWorkOfUint16ToBytes(d *WorkOfUint16ToBytes) {
	d.Value = zero_of_WorkOfUint16ToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToBytes.Put(d)
}

type _Uint16ToBytes struct{}

func (_ _Uint16ToBytes) GetWork() *WorkOfUint16ToBytes {
	return getWorkOfUint16ToBytes()
}
func (__ _Uint16ToBytes) GetWorkWith(value uint16, returnCh chan<- *ReturnOfBytes) *WorkOfUint16ToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToBytes) PutWork(d *WorkOfUint16ToBytes) {
	putWorkOfUint16ToBytes(d)
}

func (_ _Uint16ToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _Uint16ToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _Uint16ToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _Uint16ToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _Uint16ToBytes) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToBytes) CallAsync(ctx context.Context, work *WorkOfUint16ToBytes, h func(ctx context.Context, arg uint16) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint16ToInterface interface {
	Push(ctx context.Context, work *WorkOfUint16ToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfUint16ToInterface struct {
	Value    uint16
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfUint16ToInterfaceWithContext struct {
	Context context.Context
	WorkOfUint16ToInterface
}

var (
	zero_of_WorkOfUint16ToInterface       WorkOfUint16ToInterface
	zero_of_WorkOfUint16ToInterface_Value uint16
	pool_of_WorkOfUint16ToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint16ToInterface{}
		},
	}
)

func getWorkOfUint16ToInterface() *WorkOfUint16ToInterface {
	return pool_of_WorkOfUint16ToInterface.Get().(*WorkOfUint16ToInterface)
}
func putWorkOfUint16ToInterface(d *WorkOfUint16ToInterface) {
	d.Value = zero_of_WorkOfUint16ToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint16ToInterface.Put(d)
}

type _Uint16ToInterface struct{}

func (_ _Uint16ToInterface) GetWork() *WorkOfUint16ToInterface {
	return getWorkOfUint16ToInterface()
}
func (__ _Uint16ToInterface) GetWorkWith(value uint16, returnCh chan<- *ReturnOfInterface) *WorkOfUint16ToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint16ToInterface) PutWork(d *WorkOfUint16ToInterface) {
	putWorkOfUint16ToInterface(d)
}

func (_ _Uint16ToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _Uint16ToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint16ToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _Uint16ToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _Uint16ToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _Uint16ToInterface) CallSync(ctx context.Context, value uint16, push func(ctx context.Context, work *WorkOfUint16ToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint16ToInterface) CallAsync(ctx context.Context, work *WorkOfUint16ToInterface, h func(ctx context.Context, arg uint16) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToBool interface {
	Push(ctx context.Context, work *WorkOfUint32ToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfUint32ToBool struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfUint32ToBoolWithContext struct {
	Context context.Context
	WorkOfUint32ToBool
}

var (
	zero_of_WorkOfUint32ToBool       WorkOfUint32ToBool
	zero_of_WorkOfUint32ToBool_Value uint32
	pool_of_WorkOfUint32ToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToBool{}
		},
	}
)

func getWorkOfUint32ToBool() *WorkOfUint32ToBool {
	return pool_of_WorkOfUint32ToBool.Get().(*WorkOfUint32ToBool)
}
func putWorkOfUint32ToBool(d *WorkOfUint32ToBool) {
	d.Value = zero_of_WorkOfUint32ToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToBool.Put(d)
}

type _Uint32ToBool struct{}

func (_ _Uint32ToBool) GetWork() *WorkOfUint32ToBool {
	return getWorkOfUint32ToBool()
}
func (__ _Uint32ToBool) GetWorkWith(value uint32, returnCh chan<- *ReturnOfBool) *WorkOfUint32ToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToBool) PutWork(d *WorkOfUint32ToBool) {
	putWorkOfUint32ToBool(d)
}

func (_ _Uint32ToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _Uint32ToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _Uint32ToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _Uint32ToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _Uint32ToBool) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToBool) CallAsync(ctx context.Context, work *WorkOfUint32ToBool, h func(ctx context.Context, arg uint32) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToByte interface {
	Push(ctx context.Context, work *WorkOfUint32ToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfUint32ToByte struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfUint32ToByteWithContext struct {
	Context context.Context
	WorkOfUint32ToByte
}

var (
	zero_of_WorkOfUint32ToByte       WorkOfUint32ToByte
	zero_of_WorkOfUint32ToByte_Value uint32
	pool_of_WorkOfUint32ToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToByte{}
		},
	}
)

func getWorkOfUint32ToByte() *WorkOfUint32ToByte {
	return pool_of_WorkOfUint32ToByte.Get().(*WorkOfUint32ToByte)
}
func putWorkOfUint32ToByte(d *WorkOfUint32ToByte) {
	d.Value = zero_of_WorkOfUint32ToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToByte.Put(d)
}

type _Uint32ToByte struct{}

func (_ _Uint32ToByte) GetWork() *WorkOfUint32ToByte {
	return getWorkOfUint32ToByte()
}
func (__ _Uint32ToByte) GetWorkWith(value uint32, returnCh chan<- *ReturnOfByte) *WorkOfUint32ToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToByte) PutWork(d *WorkOfUint32ToByte) {
	putWorkOfUint32ToByte(d)
}

func (_ _Uint32ToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _Uint32ToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _Uint32ToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _Uint32ToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _Uint32ToByte) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToByte) CallAsync(ctx context.Context, work *WorkOfUint32ToByte, h func(ctx context.Context, arg uint32) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToComplex128 interface {
	Push(ctx context.Context, work *WorkOfUint32ToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfUint32ToComplex128 struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfUint32ToComplex128WithContext struct {
	Context context.Context
	WorkOfUint32ToComplex128
}

var (
	zero_of_WorkOfUint32ToComplex128       WorkOfUint32ToComplex128
	zero_of_WorkOfUint32ToComplex128_Value uint32
	pool_of_WorkOfUint32ToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToComplex128{}
		},
	}
)

func getWorkOfUint32ToComplex128() *WorkOfUint32ToComplex128 {
	return pool_of_WorkOfUint32ToComplex128.Get().(*WorkOfUint32ToComplex128)
}
func putWorkOfUint32ToComplex128(d *WorkOfUint32ToComplex128) {
	d.Value = zero_of_WorkOfUint32ToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToComplex128.Put(d)
}

type _Uint32ToComplex128 struct{}

func (_ _Uint32ToComplex128) GetWork() *WorkOfUint32ToComplex128 {
	return getWorkOfUint32ToComplex128()
}
func (__ _Uint32ToComplex128) GetWorkWith(value uint32, returnCh chan<- *ReturnOfComplex128) *WorkOfUint32ToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToComplex128) PutWork(d *WorkOfUint32ToComplex128) {
	putWorkOfUint32ToComplex128(d)
}

func (_ _Uint32ToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _Uint32ToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _Uint32ToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _Uint32ToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _Uint32ToComplex128) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToComplex128) CallAsync(ctx context.Context, work *WorkOfUint32ToComplex128, h func(ctx context.Context, arg uint32) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToComplex64 interface {
	Push(ctx context.Context, work *WorkOfUint32ToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfUint32ToComplex64 struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfUint32ToComplex64WithContext struct {
	Context context.Context
	WorkOfUint32ToComplex64
}

var (
	zero_of_WorkOfUint32ToComplex64       WorkOfUint32ToComplex64
	zero_of_WorkOfUint32ToComplex64_Value uint32
	pool_of_WorkOfUint32ToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToComplex64{}
		},
	}
)

func getWorkOfUint32ToComplex64() *WorkOfUint32ToComplex64 {
	return pool_of_WorkOfUint32ToComplex64.Get().(*WorkOfUint32ToComplex64)
}
func putWorkOfUint32ToComplex64(d *WorkOfUint32ToComplex64) {
	d.Value = zero_of_WorkOfUint32ToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToComplex64.Put(d)
}

type _Uint32ToComplex64 struct{}

func (_ _Uint32ToComplex64) GetWork() *WorkOfUint32ToComplex64 {
	return getWorkOfUint32ToComplex64()
}
func (__ _Uint32ToComplex64) GetWorkWith(value uint32, returnCh chan<- *ReturnOfComplex64) *WorkOfUint32ToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToComplex64) PutWork(d *WorkOfUint32ToComplex64) {
	putWorkOfUint32ToComplex64(d)
}

func (_ _Uint32ToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _Uint32ToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _Uint32ToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _Uint32ToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _Uint32ToComplex64) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToComplex64) CallAsync(ctx context.Context, work *WorkOfUint32ToComplex64, h func(ctx context.Context, arg uint32) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToError interface {
	Push(ctx context.Context, work *WorkOfUint32ToError, returnCh chan<- *ReturnOfError)
}

type WorkOfUint32ToError struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfError
}

type WorkOfUint32ToErrorWithContext struct {
	Context context.Context
	WorkOfUint32ToError
}

var (
	zero_of_WorkOfUint32ToError       WorkOfUint32ToError
	zero_of_WorkOfUint32ToError_Value uint32
	pool_of_WorkOfUint32ToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToError{}
		},
	}
)

func getWorkOfUint32ToError() *WorkOfUint32ToError {
	return pool_of_WorkOfUint32ToError.Get().(*WorkOfUint32ToError)
}
func putWorkOfUint32ToError(d *WorkOfUint32ToError) {
	d.Value = zero_of_WorkOfUint32ToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToError.Put(d)
}

type _Uint32ToError struct{}

func (_ _Uint32ToError) GetWork() *WorkOfUint32ToError {
	return getWorkOfUint32ToError()
}
func (__ _Uint32ToError) GetWorkWith(value uint32, returnCh chan<- *ReturnOfError) *WorkOfUint32ToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToError) PutWork(d *WorkOfUint32ToError) {
	putWorkOfUint32ToError(d)
}

func (_ _Uint32ToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _Uint32ToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _Uint32ToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _Uint32ToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _Uint32ToError) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToError) CallAsync(ctx context.Context, work *WorkOfUint32ToError, h func(ctx context.Context, arg uint32) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToFloat32 interface {
	Push(ctx context.Context, work *WorkOfUint32ToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfUint32ToFloat32 struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfUint32ToFloat32WithContext struct {
	Context context.Context
	WorkOfUint32ToFloat32
}

var (
	zero_of_WorkOfUint32ToFloat32       WorkOfUint32ToFloat32
	zero_of_WorkOfUint32ToFloat32_Value uint32
	pool_of_WorkOfUint32ToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToFloat32{}
		},
	}
)

func getWorkOfUint32ToFloat32() *WorkOfUint32ToFloat32 {
	return pool_of_WorkOfUint32ToFloat32.Get().(*WorkOfUint32ToFloat32)
}
func putWorkOfUint32ToFloat32(d *WorkOfUint32ToFloat32) {
	d.Value = zero_of_WorkOfUint32ToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToFloat32.Put(d)
}

type _Uint32ToFloat32 struct{}

func (_ _Uint32ToFloat32) GetWork() *WorkOfUint32ToFloat32 {
	return getWorkOfUint32ToFloat32()
}
func (__ _Uint32ToFloat32) GetWorkWith(value uint32, returnCh chan<- *ReturnOfFloat32) *WorkOfUint32ToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToFloat32) PutWork(d *WorkOfUint32ToFloat32) {
	putWorkOfUint32ToFloat32(d)
}

func (_ _Uint32ToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _Uint32ToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _Uint32ToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _Uint32ToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _Uint32ToFloat32) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToFloat32) CallAsync(ctx context.Context, work *WorkOfUint32ToFloat32, h func(ctx context.Context, arg uint32) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToFloat64 interface {
	Push(ctx context.Context, work *WorkOfUint32ToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfUint32ToFloat64 struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfUint32ToFloat64WithContext struct {
	Context context.Context
	WorkOfUint32ToFloat64
}

var (
	zero_of_WorkOfUint32ToFloat64       WorkOfUint32ToFloat64
	zero_of_WorkOfUint32ToFloat64_Value uint32
	pool_of_WorkOfUint32ToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToFloat64{}
		},
	}
)

func getWorkOfUint32ToFloat64() *WorkOfUint32ToFloat64 {
	return pool_of_WorkOfUint32ToFloat64.Get().(*WorkOfUint32ToFloat64)
}
func putWorkOfUint32ToFloat64(d *WorkOfUint32ToFloat64) {
	d.Value = zero_of_WorkOfUint32ToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToFloat64.Put(d)
}

type _Uint32ToFloat64 struct{}

func (_ _Uint32ToFloat64) GetWork() *WorkOfUint32ToFloat64 {
	return getWorkOfUint32ToFloat64()
}
func (__ _Uint32ToFloat64) GetWorkWith(value uint32, returnCh chan<- *ReturnOfFloat64) *WorkOfUint32ToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToFloat64) PutWork(d *WorkOfUint32ToFloat64) {
	putWorkOfUint32ToFloat64(d)
}

func (_ _Uint32ToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _Uint32ToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _Uint32ToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _Uint32ToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _Uint32ToFloat64) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToFloat64) CallAsync(ctx context.Context, work *WorkOfUint32ToFloat64, h func(ctx context.Context, arg uint32) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToInt interface {
	Push(ctx context.Context, work *WorkOfUint32ToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfUint32ToInt struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfUint32ToIntWithContext struct {
	Context context.Context
	WorkOfUint32ToInt
}

var (
	zero_of_WorkOfUint32ToInt       WorkOfUint32ToInt
	zero_of_WorkOfUint32ToInt_Value uint32
	pool_of_WorkOfUint32ToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToInt{}
		},
	}
)

func getWorkOfUint32ToInt() *WorkOfUint32ToInt {
	return pool_of_WorkOfUint32ToInt.Get().(*WorkOfUint32ToInt)
}
func putWorkOfUint32ToInt(d *WorkOfUint32ToInt) {
	d.Value = zero_of_WorkOfUint32ToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToInt.Put(d)
}

type _Uint32ToInt struct{}

func (_ _Uint32ToInt) GetWork() *WorkOfUint32ToInt {
	return getWorkOfUint32ToInt()
}
func (__ _Uint32ToInt) GetWorkWith(value uint32, returnCh chan<- *ReturnOfInt) *WorkOfUint32ToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToInt) PutWork(d *WorkOfUint32ToInt) {
	putWorkOfUint32ToInt(d)
}

func (_ _Uint32ToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _Uint32ToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _Uint32ToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _Uint32ToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _Uint32ToInt) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToInt) CallAsync(ctx context.Context, work *WorkOfUint32ToInt, h func(ctx context.Context, arg uint32) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToInt16 interface {
	Push(ctx context.Context, work *WorkOfUint32ToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfUint32ToInt16 struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfUint32ToInt16WithContext struct {
	Context context.Context
	WorkOfUint32ToInt16
}

var (
	zero_of_WorkOfUint32ToInt16       WorkOfUint32ToInt16
	zero_of_WorkOfUint32ToInt16_Value uint32
	pool_of_WorkOfUint32ToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToInt16{}
		},
	}
)

func getWorkOfUint32ToInt16() *WorkOfUint32ToInt16 {
	return pool_of_WorkOfUint32ToInt16.Get().(*WorkOfUint32ToInt16)
}
func putWorkOfUint32ToInt16(d *WorkOfUint32ToInt16) {
	d.Value = zero_of_WorkOfUint32ToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToInt16.Put(d)
}

type _Uint32ToInt16 struct{}

func (_ _Uint32ToInt16) GetWork() *WorkOfUint32ToInt16 {
	return getWorkOfUint32ToInt16()
}
func (__ _Uint32ToInt16) GetWorkWith(value uint32, returnCh chan<- *ReturnOfInt16) *WorkOfUint32ToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToInt16) PutWork(d *WorkOfUint32ToInt16) {
	putWorkOfUint32ToInt16(d)
}

func (_ _Uint32ToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _Uint32ToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _Uint32ToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _Uint32ToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _Uint32ToInt16) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToInt16) CallAsync(ctx context.Context, work *WorkOfUint32ToInt16, h func(ctx context.Context, arg uint32) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToInt32 interface {
	Push(ctx context.Context, work *WorkOfUint32ToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfUint32ToInt32 struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfUint32ToInt32WithContext struct {
	Context context.Context
	WorkOfUint32ToInt32
}

var (
	zero_of_WorkOfUint32ToInt32       WorkOfUint32ToInt32
	zero_of_WorkOfUint32ToInt32_Value uint32
	pool_of_WorkOfUint32ToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToInt32{}
		},
	}
)

func getWorkOfUint32ToInt32() *WorkOfUint32ToInt32 {
	return pool_of_WorkOfUint32ToInt32.Get().(*WorkOfUint32ToInt32)
}
func putWorkOfUint32ToInt32(d *WorkOfUint32ToInt32) {
	d.Value = zero_of_WorkOfUint32ToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToInt32.Put(d)
}

type _Uint32ToInt32 struct{}

func (_ _Uint32ToInt32) GetWork() *WorkOfUint32ToInt32 {
	return getWorkOfUint32ToInt32()
}
func (__ _Uint32ToInt32) GetWorkWith(value uint32, returnCh chan<- *ReturnOfInt32) *WorkOfUint32ToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToInt32) PutWork(d *WorkOfUint32ToInt32) {
	putWorkOfUint32ToInt32(d)
}

func (_ _Uint32ToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _Uint32ToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _Uint32ToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _Uint32ToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _Uint32ToInt32) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToInt32) CallAsync(ctx context.Context, work *WorkOfUint32ToInt32, h func(ctx context.Context, arg uint32) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToInt64 interface {
	Push(ctx context.Context, work *WorkOfUint32ToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfUint32ToInt64 struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfUint32ToInt64WithContext struct {
	Context context.Context
	WorkOfUint32ToInt64
}

var (
	zero_of_WorkOfUint32ToInt64       WorkOfUint32ToInt64
	zero_of_WorkOfUint32ToInt64_Value uint32
	pool_of_WorkOfUint32ToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToInt64{}
		},
	}
)

func getWorkOfUint32ToInt64() *WorkOfUint32ToInt64 {
	return pool_of_WorkOfUint32ToInt64.Get().(*WorkOfUint32ToInt64)
}
func putWorkOfUint32ToInt64(d *WorkOfUint32ToInt64) {
	d.Value = zero_of_WorkOfUint32ToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToInt64.Put(d)
}

type _Uint32ToInt64 struct{}

func (_ _Uint32ToInt64) GetWork() *WorkOfUint32ToInt64 {
	return getWorkOfUint32ToInt64()
}
func (__ _Uint32ToInt64) GetWorkWith(value uint32, returnCh chan<- *ReturnOfInt64) *WorkOfUint32ToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToInt64) PutWork(d *WorkOfUint32ToInt64) {
	putWorkOfUint32ToInt64(d)
}

func (_ _Uint32ToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _Uint32ToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _Uint32ToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _Uint32ToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _Uint32ToInt64) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToInt64) CallAsync(ctx context.Context, work *WorkOfUint32ToInt64, h func(ctx context.Context, arg uint32) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToInt8 interface {
	Push(ctx context.Context, work *WorkOfUint32ToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfUint32ToInt8 struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfUint32ToInt8WithContext struct {
	Context context.Context
	WorkOfUint32ToInt8
}

var (
	zero_of_WorkOfUint32ToInt8       WorkOfUint32ToInt8
	zero_of_WorkOfUint32ToInt8_Value uint32
	pool_of_WorkOfUint32ToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToInt8{}
		},
	}
)

func getWorkOfUint32ToInt8() *WorkOfUint32ToInt8 {
	return pool_of_WorkOfUint32ToInt8.Get().(*WorkOfUint32ToInt8)
}
func putWorkOfUint32ToInt8(d *WorkOfUint32ToInt8) {
	d.Value = zero_of_WorkOfUint32ToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToInt8.Put(d)
}

type _Uint32ToInt8 struct{}

func (_ _Uint32ToInt8) GetWork() *WorkOfUint32ToInt8 {
	return getWorkOfUint32ToInt8()
}
func (__ _Uint32ToInt8) GetWorkWith(value uint32, returnCh chan<- *ReturnOfInt8) *WorkOfUint32ToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToInt8) PutWork(d *WorkOfUint32ToInt8) {
	putWorkOfUint32ToInt8(d)
}

func (_ _Uint32ToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _Uint32ToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _Uint32ToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _Uint32ToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _Uint32ToInt8) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToInt8) CallAsync(ctx context.Context, work *WorkOfUint32ToInt8, h func(ctx context.Context, arg uint32) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToRune interface {
	Push(ctx context.Context, work *WorkOfUint32ToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfUint32ToRune struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfUint32ToRuneWithContext struct {
	Context context.Context
	WorkOfUint32ToRune
}

var (
	zero_of_WorkOfUint32ToRune       WorkOfUint32ToRune
	zero_of_WorkOfUint32ToRune_Value uint32
	pool_of_WorkOfUint32ToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToRune{}
		},
	}
)

func getWorkOfUint32ToRune() *WorkOfUint32ToRune {
	return pool_of_WorkOfUint32ToRune.Get().(*WorkOfUint32ToRune)
}
func putWorkOfUint32ToRune(d *WorkOfUint32ToRune) {
	d.Value = zero_of_WorkOfUint32ToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToRune.Put(d)
}

type _Uint32ToRune struct{}

func (_ _Uint32ToRune) GetWork() *WorkOfUint32ToRune {
	return getWorkOfUint32ToRune()
}
func (__ _Uint32ToRune) GetWorkWith(value uint32, returnCh chan<- *ReturnOfRune) *WorkOfUint32ToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToRune) PutWork(d *WorkOfUint32ToRune) {
	putWorkOfUint32ToRune(d)
}

func (_ _Uint32ToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _Uint32ToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _Uint32ToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _Uint32ToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _Uint32ToRune) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToRune) CallAsync(ctx context.Context, work *WorkOfUint32ToRune, h func(ctx context.Context, arg uint32) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToString interface {
	Push(ctx context.Context, work *WorkOfUint32ToString, returnCh chan<- *ReturnOfString)
}

type WorkOfUint32ToString struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfString
}

type WorkOfUint32ToStringWithContext struct {
	Context context.Context
	WorkOfUint32ToString
}

var (
	zero_of_WorkOfUint32ToString       WorkOfUint32ToString
	zero_of_WorkOfUint32ToString_Value uint32
	pool_of_WorkOfUint32ToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToString{}
		},
	}
)

func getWorkOfUint32ToString() *WorkOfUint32ToString {
	return pool_of_WorkOfUint32ToString.Get().(*WorkOfUint32ToString)
}
func putWorkOfUint32ToString(d *WorkOfUint32ToString) {
	d.Value = zero_of_WorkOfUint32ToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToString.Put(d)
}

type _Uint32ToString struct{}

func (_ _Uint32ToString) GetWork() *WorkOfUint32ToString {
	return getWorkOfUint32ToString()
}
func (__ _Uint32ToString) GetWorkWith(value uint32, returnCh chan<- *ReturnOfString) *WorkOfUint32ToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToString) PutWork(d *WorkOfUint32ToString) {
	putWorkOfUint32ToString(d)
}

func (_ _Uint32ToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _Uint32ToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _Uint32ToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _Uint32ToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _Uint32ToString) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToString) CallAsync(ctx context.Context, work *WorkOfUint32ToString, h func(ctx context.Context, arg uint32) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToUint interface {
	Push(ctx context.Context, work *WorkOfUint32ToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfUint32ToUint struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfUint32ToUintWithContext struct {
	Context context.Context
	WorkOfUint32ToUint
}

var (
	zero_of_WorkOfUint32ToUint       WorkOfUint32ToUint
	zero_of_WorkOfUint32ToUint_Value uint32
	pool_of_WorkOfUint32ToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToUint{}
		},
	}
)

func getWorkOfUint32ToUint() *WorkOfUint32ToUint {
	return pool_of_WorkOfUint32ToUint.Get().(*WorkOfUint32ToUint)
}
func putWorkOfUint32ToUint(d *WorkOfUint32ToUint) {
	d.Value = zero_of_WorkOfUint32ToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToUint.Put(d)
}

type _Uint32ToUint struct{}

func (_ _Uint32ToUint) GetWork() *WorkOfUint32ToUint {
	return getWorkOfUint32ToUint()
}
func (__ _Uint32ToUint) GetWorkWith(value uint32, returnCh chan<- *ReturnOfUint) *WorkOfUint32ToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToUint) PutWork(d *WorkOfUint32ToUint) {
	putWorkOfUint32ToUint(d)
}

func (_ _Uint32ToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _Uint32ToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _Uint32ToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _Uint32ToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _Uint32ToUint) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToUint) CallAsync(ctx context.Context, work *WorkOfUint32ToUint, h func(ctx context.Context, arg uint32) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToUint16 interface {
	Push(ctx context.Context, work *WorkOfUint32ToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfUint32ToUint16 struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfUint32ToUint16WithContext struct {
	Context context.Context
	WorkOfUint32ToUint16
}

var (
	zero_of_WorkOfUint32ToUint16       WorkOfUint32ToUint16
	zero_of_WorkOfUint32ToUint16_Value uint32
	pool_of_WorkOfUint32ToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToUint16{}
		},
	}
)

func getWorkOfUint32ToUint16() *WorkOfUint32ToUint16 {
	return pool_of_WorkOfUint32ToUint16.Get().(*WorkOfUint32ToUint16)
}
func putWorkOfUint32ToUint16(d *WorkOfUint32ToUint16) {
	d.Value = zero_of_WorkOfUint32ToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToUint16.Put(d)
}

type _Uint32ToUint16 struct{}

func (_ _Uint32ToUint16) GetWork() *WorkOfUint32ToUint16 {
	return getWorkOfUint32ToUint16()
}
func (__ _Uint32ToUint16) GetWorkWith(value uint32, returnCh chan<- *ReturnOfUint16) *WorkOfUint32ToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToUint16) PutWork(d *WorkOfUint32ToUint16) {
	putWorkOfUint32ToUint16(d)
}

func (_ _Uint32ToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _Uint32ToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _Uint32ToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _Uint32ToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _Uint32ToUint16) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToUint16) CallAsync(ctx context.Context, work *WorkOfUint32ToUint16, h func(ctx context.Context, arg uint32) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToUint32 interface {
	Push(ctx context.Context, work *WorkOfUint32ToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfUint32ToUint32 struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfUint32ToUint32WithContext struct {
	Context context.Context
	WorkOfUint32ToUint32
}

var (
	zero_of_WorkOfUint32ToUint32       WorkOfUint32ToUint32
	zero_of_WorkOfUint32ToUint32_Value uint32
	pool_of_WorkOfUint32ToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToUint32{}
		},
	}
)

func getWorkOfUint32ToUint32() *WorkOfUint32ToUint32 {
	return pool_of_WorkOfUint32ToUint32.Get().(*WorkOfUint32ToUint32)
}
func putWorkOfUint32ToUint32(d *WorkOfUint32ToUint32) {
	d.Value = zero_of_WorkOfUint32ToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToUint32.Put(d)
}

type _Uint32ToUint32 struct{}

func (_ _Uint32ToUint32) GetWork() *WorkOfUint32ToUint32 {
	return getWorkOfUint32ToUint32()
}
func (__ _Uint32ToUint32) GetWorkWith(value uint32, returnCh chan<- *ReturnOfUint32) *WorkOfUint32ToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToUint32) PutWork(d *WorkOfUint32ToUint32) {
	putWorkOfUint32ToUint32(d)
}

func (_ _Uint32ToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _Uint32ToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _Uint32ToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _Uint32ToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _Uint32ToUint32) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToUint32) CallAsync(ctx context.Context, work *WorkOfUint32ToUint32, h func(ctx context.Context, arg uint32) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToUint64 interface {
	Push(ctx context.Context, work *WorkOfUint32ToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfUint32ToUint64 struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfUint32ToUint64WithContext struct {
	Context context.Context
	WorkOfUint32ToUint64
}

var (
	zero_of_WorkOfUint32ToUint64       WorkOfUint32ToUint64
	zero_of_WorkOfUint32ToUint64_Value uint32
	pool_of_WorkOfUint32ToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToUint64{}
		},
	}
)

func getWorkOfUint32ToUint64() *WorkOfUint32ToUint64 {
	return pool_of_WorkOfUint32ToUint64.Get().(*WorkOfUint32ToUint64)
}
func putWorkOfUint32ToUint64(d *WorkOfUint32ToUint64) {
	d.Value = zero_of_WorkOfUint32ToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToUint64.Put(d)
}

type _Uint32ToUint64 struct{}

func (_ _Uint32ToUint64) GetWork() *WorkOfUint32ToUint64 {
	return getWorkOfUint32ToUint64()
}
func (__ _Uint32ToUint64) GetWorkWith(value uint32, returnCh chan<- *ReturnOfUint64) *WorkOfUint32ToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToUint64) PutWork(d *WorkOfUint32ToUint64) {
	putWorkOfUint32ToUint64(d)
}

func (_ _Uint32ToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _Uint32ToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _Uint32ToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _Uint32ToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _Uint32ToUint64) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToUint64) CallAsync(ctx context.Context, work *WorkOfUint32ToUint64, h func(ctx context.Context, arg uint32) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToUint8 interface {
	Push(ctx context.Context, work *WorkOfUint32ToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfUint32ToUint8 struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfUint32ToUint8WithContext struct {
	Context context.Context
	WorkOfUint32ToUint8
}

var (
	zero_of_WorkOfUint32ToUint8       WorkOfUint32ToUint8
	zero_of_WorkOfUint32ToUint8_Value uint32
	pool_of_WorkOfUint32ToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToUint8{}
		},
	}
)

func getWorkOfUint32ToUint8() *WorkOfUint32ToUint8 {
	return pool_of_WorkOfUint32ToUint8.Get().(*WorkOfUint32ToUint8)
}
func putWorkOfUint32ToUint8(d *WorkOfUint32ToUint8) {
	d.Value = zero_of_WorkOfUint32ToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToUint8.Put(d)
}

type _Uint32ToUint8 struct{}

func (_ _Uint32ToUint8) GetWork() *WorkOfUint32ToUint8 {
	return getWorkOfUint32ToUint8()
}
func (__ _Uint32ToUint8) GetWorkWith(value uint32, returnCh chan<- *ReturnOfUint8) *WorkOfUint32ToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToUint8) PutWork(d *WorkOfUint32ToUint8) {
	putWorkOfUint32ToUint8(d)
}

func (_ _Uint32ToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _Uint32ToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _Uint32ToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _Uint32ToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _Uint32ToUint8) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToUint8) CallAsync(ctx context.Context, work *WorkOfUint32ToUint8, h func(ctx context.Context, arg uint32) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToUintptr interface {
	Push(ctx context.Context, work *WorkOfUint32ToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfUint32ToUintptr struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfUint32ToUintptrWithContext struct {
	Context context.Context
	WorkOfUint32ToUintptr
}

var (
	zero_of_WorkOfUint32ToUintptr       WorkOfUint32ToUintptr
	zero_of_WorkOfUint32ToUintptr_Value uint32
	pool_of_WorkOfUint32ToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToUintptr{}
		},
	}
)

func getWorkOfUint32ToUintptr() *WorkOfUint32ToUintptr {
	return pool_of_WorkOfUint32ToUintptr.Get().(*WorkOfUint32ToUintptr)
}
func putWorkOfUint32ToUintptr(d *WorkOfUint32ToUintptr) {
	d.Value = zero_of_WorkOfUint32ToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToUintptr.Put(d)
}

type _Uint32ToUintptr struct{}

func (_ _Uint32ToUintptr) GetWork() *WorkOfUint32ToUintptr {
	return getWorkOfUint32ToUintptr()
}
func (__ _Uint32ToUintptr) GetWorkWith(value uint32, returnCh chan<- *ReturnOfUintptr) *WorkOfUint32ToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToUintptr) PutWork(d *WorkOfUint32ToUintptr) {
	putWorkOfUint32ToUintptr(d)
}

func (_ _Uint32ToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _Uint32ToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _Uint32ToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _Uint32ToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _Uint32ToUintptr) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToUintptr) CallAsync(ctx context.Context, work *WorkOfUint32ToUintptr, h func(ctx context.Context, arg uint32) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToBytes interface {
	Push(ctx context.Context, work *WorkOfUint32ToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfUint32ToBytes struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfUint32ToBytesWithContext struct {
	Context context.Context
	WorkOfUint32ToBytes
}

var (
	zero_of_WorkOfUint32ToBytes       WorkOfUint32ToBytes
	zero_of_WorkOfUint32ToBytes_Value uint32
	pool_of_WorkOfUint32ToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToBytes{}
		},
	}
)

func getWorkOfUint32ToBytes() *WorkOfUint32ToBytes {
	return pool_of_WorkOfUint32ToBytes.Get().(*WorkOfUint32ToBytes)
}
func putWorkOfUint32ToBytes(d *WorkOfUint32ToBytes) {
	d.Value = zero_of_WorkOfUint32ToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToBytes.Put(d)
}

type _Uint32ToBytes struct{}

func (_ _Uint32ToBytes) GetWork() *WorkOfUint32ToBytes {
	return getWorkOfUint32ToBytes()
}
func (__ _Uint32ToBytes) GetWorkWith(value uint32, returnCh chan<- *ReturnOfBytes) *WorkOfUint32ToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToBytes) PutWork(d *WorkOfUint32ToBytes) {
	putWorkOfUint32ToBytes(d)
}

func (_ _Uint32ToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _Uint32ToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _Uint32ToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _Uint32ToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _Uint32ToBytes) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToBytes) CallAsync(ctx context.Context, work *WorkOfUint32ToBytes, h func(ctx context.Context, arg uint32) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint32ToInterface interface {
	Push(ctx context.Context, work *WorkOfUint32ToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfUint32ToInterface struct {
	Value    uint32
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfUint32ToInterfaceWithContext struct {
	Context context.Context
	WorkOfUint32ToInterface
}

var (
	zero_of_WorkOfUint32ToInterface       WorkOfUint32ToInterface
	zero_of_WorkOfUint32ToInterface_Value uint32
	pool_of_WorkOfUint32ToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint32ToInterface{}
		},
	}
)

func getWorkOfUint32ToInterface() *WorkOfUint32ToInterface {
	return pool_of_WorkOfUint32ToInterface.Get().(*WorkOfUint32ToInterface)
}
func putWorkOfUint32ToInterface(d *WorkOfUint32ToInterface) {
	d.Value = zero_of_WorkOfUint32ToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint32ToInterface.Put(d)
}

type _Uint32ToInterface struct{}

func (_ _Uint32ToInterface) GetWork() *WorkOfUint32ToInterface {
	return getWorkOfUint32ToInterface()
}
func (__ _Uint32ToInterface) GetWorkWith(value uint32, returnCh chan<- *ReturnOfInterface) *WorkOfUint32ToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint32ToInterface) PutWork(d *WorkOfUint32ToInterface) {
	putWorkOfUint32ToInterface(d)
}

func (_ _Uint32ToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _Uint32ToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint32ToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _Uint32ToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _Uint32ToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _Uint32ToInterface) CallSync(ctx context.Context, value uint32, push func(ctx context.Context, work *WorkOfUint32ToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint32ToInterface) CallAsync(ctx context.Context, work *WorkOfUint32ToInterface, h func(ctx context.Context, arg uint32) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToBool interface {
	Push(ctx context.Context, work *WorkOfUint64ToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfUint64ToBool struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfUint64ToBoolWithContext struct {
	Context context.Context
	WorkOfUint64ToBool
}

var (
	zero_of_WorkOfUint64ToBool       WorkOfUint64ToBool
	zero_of_WorkOfUint64ToBool_Value uint64
	pool_of_WorkOfUint64ToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToBool{}
		},
	}
)

func getWorkOfUint64ToBool() *WorkOfUint64ToBool {
	return pool_of_WorkOfUint64ToBool.Get().(*WorkOfUint64ToBool)
}
func putWorkOfUint64ToBool(d *WorkOfUint64ToBool) {
	d.Value = zero_of_WorkOfUint64ToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToBool.Put(d)
}

type _Uint64ToBool struct{}

func (_ _Uint64ToBool) GetWork() *WorkOfUint64ToBool {
	return getWorkOfUint64ToBool()
}
func (__ _Uint64ToBool) GetWorkWith(value uint64, returnCh chan<- *ReturnOfBool) *WorkOfUint64ToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToBool) PutWork(d *WorkOfUint64ToBool) {
	putWorkOfUint64ToBool(d)
}

func (_ _Uint64ToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _Uint64ToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _Uint64ToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _Uint64ToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _Uint64ToBool) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToBool) CallAsync(ctx context.Context, work *WorkOfUint64ToBool, h func(ctx context.Context, arg uint64) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToByte interface {
	Push(ctx context.Context, work *WorkOfUint64ToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfUint64ToByte struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfUint64ToByteWithContext struct {
	Context context.Context
	WorkOfUint64ToByte
}

var (
	zero_of_WorkOfUint64ToByte       WorkOfUint64ToByte
	zero_of_WorkOfUint64ToByte_Value uint64
	pool_of_WorkOfUint64ToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToByte{}
		},
	}
)

func getWorkOfUint64ToByte() *WorkOfUint64ToByte {
	return pool_of_WorkOfUint64ToByte.Get().(*WorkOfUint64ToByte)
}
func putWorkOfUint64ToByte(d *WorkOfUint64ToByte) {
	d.Value = zero_of_WorkOfUint64ToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToByte.Put(d)
}

type _Uint64ToByte struct{}

func (_ _Uint64ToByte) GetWork() *WorkOfUint64ToByte {
	return getWorkOfUint64ToByte()
}
func (__ _Uint64ToByte) GetWorkWith(value uint64, returnCh chan<- *ReturnOfByte) *WorkOfUint64ToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToByte) PutWork(d *WorkOfUint64ToByte) {
	putWorkOfUint64ToByte(d)
}

func (_ _Uint64ToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _Uint64ToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _Uint64ToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _Uint64ToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _Uint64ToByte) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToByte) CallAsync(ctx context.Context, work *WorkOfUint64ToByte, h func(ctx context.Context, arg uint64) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToComplex128 interface {
	Push(ctx context.Context, work *WorkOfUint64ToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfUint64ToComplex128 struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfUint64ToComplex128WithContext struct {
	Context context.Context
	WorkOfUint64ToComplex128
}

var (
	zero_of_WorkOfUint64ToComplex128       WorkOfUint64ToComplex128
	zero_of_WorkOfUint64ToComplex128_Value uint64
	pool_of_WorkOfUint64ToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToComplex128{}
		},
	}
)

func getWorkOfUint64ToComplex128() *WorkOfUint64ToComplex128 {
	return pool_of_WorkOfUint64ToComplex128.Get().(*WorkOfUint64ToComplex128)
}
func putWorkOfUint64ToComplex128(d *WorkOfUint64ToComplex128) {
	d.Value = zero_of_WorkOfUint64ToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToComplex128.Put(d)
}

type _Uint64ToComplex128 struct{}

func (_ _Uint64ToComplex128) GetWork() *WorkOfUint64ToComplex128 {
	return getWorkOfUint64ToComplex128()
}
func (__ _Uint64ToComplex128) GetWorkWith(value uint64, returnCh chan<- *ReturnOfComplex128) *WorkOfUint64ToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToComplex128) PutWork(d *WorkOfUint64ToComplex128) {
	putWorkOfUint64ToComplex128(d)
}

func (_ _Uint64ToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _Uint64ToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _Uint64ToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _Uint64ToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _Uint64ToComplex128) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToComplex128) CallAsync(ctx context.Context, work *WorkOfUint64ToComplex128, h func(ctx context.Context, arg uint64) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToComplex64 interface {
	Push(ctx context.Context, work *WorkOfUint64ToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfUint64ToComplex64 struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfUint64ToComplex64WithContext struct {
	Context context.Context
	WorkOfUint64ToComplex64
}

var (
	zero_of_WorkOfUint64ToComplex64       WorkOfUint64ToComplex64
	zero_of_WorkOfUint64ToComplex64_Value uint64
	pool_of_WorkOfUint64ToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToComplex64{}
		},
	}
)

func getWorkOfUint64ToComplex64() *WorkOfUint64ToComplex64 {
	return pool_of_WorkOfUint64ToComplex64.Get().(*WorkOfUint64ToComplex64)
}
func putWorkOfUint64ToComplex64(d *WorkOfUint64ToComplex64) {
	d.Value = zero_of_WorkOfUint64ToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToComplex64.Put(d)
}

type _Uint64ToComplex64 struct{}

func (_ _Uint64ToComplex64) GetWork() *WorkOfUint64ToComplex64 {
	return getWorkOfUint64ToComplex64()
}
func (__ _Uint64ToComplex64) GetWorkWith(value uint64, returnCh chan<- *ReturnOfComplex64) *WorkOfUint64ToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToComplex64) PutWork(d *WorkOfUint64ToComplex64) {
	putWorkOfUint64ToComplex64(d)
}

func (_ _Uint64ToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _Uint64ToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _Uint64ToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _Uint64ToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _Uint64ToComplex64) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToComplex64) CallAsync(ctx context.Context, work *WorkOfUint64ToComplex64, h func(ctx context.Context, arg uint64) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToError interface {
	Push(ctx context.Context, work *WorkOfUint64ToError, returnCh chan<- *ReturnOfError)
}

type WorkOfUint64ToError struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfError
}

type WorkOfUint64ToErrorWithContext struct {
	Context context.Context
	WorkOfUint64ToError
}

var (
	zero_of_WorkOfUint64ToError       WorkOfUint64ToError
	zero_of_WorkOfUint64ToError_Value uint64
	pool_of_WorkOfUint64ToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToError{}
		},
	}
)

func getWorkOfUint64ToError() *WorkOfUint64ToError {
	return pool_of_WorkOfUint64ToError.Get().(*WorkOfUint64ToError)
}
func putWorkOfUint64ToError(d *WorkOfUint64ToError) {
	d.Value = zero_of_WorkOfUint64ToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToError.Put(d)
}

type _Uint64ToError struct{}

func (_ _Uint64ToError) GetWork() *WorkOfUint64ToError {
	return getWorkOfUint64ToError()
}
func (__ _Uint64ToError) GetWorkWith(value uint64, returnCh chan<- *ReturnOfError) *WorkOfUint64ToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToError) PutWork(d *WorkOfUint64ToError) {
	putWorkOfUint64ToError(d)
}

func (_ _Uint64ToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _Uint64ToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _Uint64ToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _Uint64ToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _Uint64ToError) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToError) CallAsync(ctx context.Context, work *WorkOfUint64ToError, h func(ctx context.Context, arg uint64) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToFloat32 interface {
	Push(ctx context.Context, work *WorkOfUint64ToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfUint64ToFloat32 struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfUint64ToFloat32WithContext struct {
	Context context.Context
	WorkOfUint64ToFloat32
}

var (
	zero_of_WorkOfUint64ToFloat32       WorkOfUint64ToFloat32
	zero_of_WorkOfUint64ToFloat32_Value uint64
	pool_of_WorkOfUint64ToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToFloat32{}
		},
	}
)

func getWorkOfUint64ToFloat32() *WorkOfUint64ToFloat32 {
	return pool_of_WorkOfUint64ToFloat32.Get().(*WorkOfUint64ToFloat32)
}
func putWorkOfUint64ToFloat32(d *WorkOfUint64ToFloat32) {
	d.Value = zero_of_WorkOfUint64ToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToFloat32.Put(d)
}

type _Uint64ToFloat32 struct{}

func (_ _Uint64ToFloat32) GetWork() *WorkOfUint64ToFloat32 {
	return getWorkOfUint64ToFloat32()
}
func (__ _Uint64ToFloat32) GetWorkWith(value uint64, returnCh chan<- *ReturnOfFloat32) *WorkOfUint64ToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToFloat32) PutWork(d *WorkOfUint64ToFloat32) {
	putWorkOfUint64ToFloat32(d)
}

func (_ _Uint64ToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _Uint64ToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _Uint64ToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _Uint64ToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _Uint64ToFloat32) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToFloat32) CallAsync(ctx context.Context, work *WorkOfUint64ToFloat32, h func(ctx context.Context, arg uint64) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToFloat64 interface {
	Push(ctx context.Context, work *WorkOfUint64ToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfUint64ToFloat64 struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfUint64ToFloat64WithContext struct {
	Context context.Context
	WorkOfUint64ToFloat64
}

var (
	zero_of_WorkOfUint64ToFloat64       WorkOfUint64ToFloat64
	zero_of_WorkOfUint64ToFloat64_Value uint64
	pool_of_WorkOfUint64ToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToFloat64{}
		},
	}
)

func getWorkOfUint64ToFloat64() *WorkOfUint64ToFloat64 {
	return pool_of_WorkOfUint64ToFloat64.Get().(*WorkOfUint64ToFloat64)
}
func putWorkOfUint64ToFloat64(d *WorkOfUint64ToFloat64) {
	d.Value = zero_of_WorkOfUint64ToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToFloat64.Put(d)
}

type _Uint64ToFloat64 struct{}

func (_ _Uint64ToFloat64) GetWork() *WorkOfUint64ToFloat64 {
	return getWorkOfUint64ToFloat64()
}
func (__ _Uint64ToFloat64) GetWorkWith(value uint64, returnCh chan<- *ReturnOfFloat64) *WorkOfUint64ToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToFloat64) PutWork(d *WorkOfUint64ToFloat64) {
	putWorkOfUint64ToFloat64(d)
}

func (_ _Uint64ToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _Uint64ToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _Uint64ToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _Uint64ToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _Uint64ToFloat64) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToFloat64) CallAsync(ctx context.Context, work *WorkOfUint64ToFloat64, h func(ctx context.Context, arg uint64) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToInt interface {
	Push(ctx context.Context, work *WorkOfUint64ToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfUint64ToInt struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfUint64ToIntWithContext struct {
	Context context.Context
	WorkOfUint64ToInt
}

var (
	zero_of_WorkOfUint64ToInt       WorkOfUint64ToInt
	zero_of_WorkOfUint64ToInt_Value uint64
	pool_of_WorkOfUint64ToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToInt{}
		},
	}
)

func getWorkOfUint64ToInt() *WorkOfUint64ToInt {
	return pool_of_WorkOfUint64ToInt.Get().(*WorkOfUint64ToInt)
}
func putWorkOfUint64ToInt(d *WorkOfUint64ToInt) {
	d.Value = zero_of_WorkOfUint64ToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToInt.Put(d)
}

type _Uint64ToInt struct{}

func (_ _Uint64ToInt) GetWork() *WorkOfUint64ToInt {
	return getWorkOfUint64ToInt()
}
func (__ _Uint64ToInt) GetWorkWith(value uint64, returnCh chan<- *ReturnOfInt) *WorkOfUint64ToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToInt) PutWork(d *WorkOfUint64ToInt) {
	putWorkOfUint64ToInt(d)
}

func (_ _Uint64ToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _Uint64ToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _Uint64ToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _Uint64ToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _Uint64ToInt) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToInt) CallAsync(ctx context.Context, work *WorkOfUint64ToInt, h func(ctx context.Context, arg uint64) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToInt16 interface {
	Push(ctx context.Context, work *WorkOfUint64ToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfUint64ToInt16 struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfUint64ToInt16WithContext struct {
	Context context.Context
	WorkOfUint64ToInt16
}

var (
	zero_of_WorkOfUint64ToInt16       WorkOfUint64ToInt16
	zero_of_WorkOfUint64ToInt16_Value uint64
	pool_of_WorkOfUint64ToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToInt16{}
		},
	}
)

func getWorkOfUint64ToInt16() *WorkOfUint64ToInt16 {
	return pool_of_WorkOfUint64ToInt16.Get().(*WorkOfUint64ToInt16)
}
func putWorkOfUint64ToInt16(d *WorkOfUint64ToInt16) {
	d.Value = zero_of_WorkOfUint64ToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToInt16.Put(d)
}

type _Uint64ToInt16 struct{}

func (_ _Uint64ToInt16) GetWork() *WorkOfUint64ToInt16 {
	return getWorkOfUint64ToInt16()
}
func (__ _Uint64ToInt16) GetWorkWith(value uint64, returnCh chan<- *ReturnOfInt16) *WorkOfUint64ToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToInt16) PutWork(d *WorkOfUint64ToInt16) {
	putWorkOfUint64ToInt16(d)
}

func (_ _Uint64ToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _Uint64ToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _Uint64ToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _Uint64ToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _Uint64ToInt16) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToInt16) CallAsync(ctx context.Context, work *WorkOfUint64ToInt16, h func(ctx context.Context, arg uint64) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToInt32 interface {
	Push(ctx context.Context, work *WorkOfUint64ToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfUint64ToInt32 struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfUint64ToInt32WithContext struct {
	Context context.Context
	WorkOfUint64ToInt32
}

var (
	zero_of_WorkOfUint64ToInt32       WorkOfUint64ToInt32
	zero_of_WorkOfUint64ToInt32_Value uint64
	pool_of_WorkOfUint64ToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToInt32{}
		},
	}
)

func getWorkOfUint64ToInt32() *WorkOfUint64ToInt32 {
	return pool_of_WorkOfUint64ToInt32.Get().(*WorkOfUint64ToInt32)
}
func putWorkOfUint64ToInt32(d *WorkOfUint64ToInt32) {
	d.Value = zero_of_WorkOfUint64ToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToInt32.Put(d)
}

type _Uint64ToInt32 struct{}

func (_ _Uint64ToInt32) GetWork() *WorkOfUint64ToInt32 {
	return getWorkOfUint64ToInt32()
}
func (__ _Uint64ToInt32) GetWorkWith(value uint64, returnCh chan<- *ReturnOfInt32) *WorkOfUint64ToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToInt32) PutWork(d *WorkOfUint64ToInt32) {
	putWorkOfUint64ToInt32(d)
}

func (_ _Uint64ToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _Uint64ToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _Uint64ToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _Uint64ToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _Uint64ToInt32) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToInt32) CallAsync(ctx context.Context, work *WorkOfUint64ToInt32, h func(ctx context.Context, arg uint64) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToInt64 interface {
	Push(ctx context.Context, work *WorkOfUint64ToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfUint64ToInt64 struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfUint64ToInt64WithContext struct {
	Context context.Context
	WorkOfUint64ToInt64
}

var (
	zero_of_WorkOfUint64ToInt64       WorkOfUint64ToInt64
	zero_of_WorkOfUint64ToInt64_Value uint64
	pool_of_WorkOfUint64ToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToInt64{}
		},
	}
)

func getWorkOfUint64ToInt64() *WorkOfUint64ToInt64 {
	return pool_of_WorkOfUint64ToInt64.Get().(*WorkOfUint64ToInt64)
}
func putWorkOfUint64ToInt64(d *WorkOfUint64ToInt64) {
	d.Value = zero_of_WorkOfUint64ToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToInt64.Put(d)
}

type _Uint64ToInt64 struct{}

func (_ _Uint64ToInt64) GetWork() *WorkOfUint64ToInt64 {
	return getWorkOfUint64ToInt64()
}
func (__ _Uint64ToInt64) GetWorkWith(value uint64, returnCh chan<- *ReturnOfInt64) *WorkOfUint64ToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToInt64) PutWork(d *WorkOfUint64ToInt64) {
	putWorkOfUint64ToInt64(d)
}

func (_ _Uint64ToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _Uint64ToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _Uint64ToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _Uint64ToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _Uint64ToInt64) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToInt64) CallAsync(ctx context.Context, work *WorkOfUint64ToInt64, h func(ctx context.Context, arg uint64) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToInt8 interface {
	Push(ctx context.Context, work *WorkOfUint64ToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfUint64ToInt8 struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfUint64ToInt8WithContext struct {
	Context context.Context
	WorkOfUint64ToInt8
}

var (
	zero_of_WorkOfUint64ToInt8       WorkOfUint64ToInt8
	zero_of_WorkOfUint64ToInt8_Value uint64
	pool_of_WorkOfUint64ToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToInt8{}
		},
	}
)

func getWorkOfUint64ToInt8() *WorkOfUint64ToInt8 {
	return pool_of_WorkOfUint64ToInt8.Get().(*WorkOfUint64ToInt8)
}
func putWorkOfUint64ToInt8(d *WorkOfUint64ToInt8) {
	d.Value = zero_of_WorkOfUint64ToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToInt8.Put(d)
}

type _Uint64ToInt8 struct{}

func (_ _Uint64ToInt8) GetWork() *WorkOfUint64ToInt8 {
	return getWorkOfUint64ToInt8()
}
func (__ _Uint64ToInt8) GetWorkWith(value uint64, returnCh chan<- *ReturnOfInt8) *WorkOfUint64ToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToInt8) PutWork(d *WorkOfUint64ToInt8) {
	putWorkOfUint64ToInt8(d)
}

func (_ _Uint64ToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _Uint64ToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _Uint64ToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _Uint64ToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _Uint64ToInt8) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToInt8) CallAsync(ctx context.Context, work *WorkOfUint64ToInt8, h func(ctx context.Context, arg uint64) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToRune interface {
	Push(ctx context.Context, work *WorkOfUint64ToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfUint64ToRune struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfUint64ToRuneWithContext struct {
	Context context.Context
	WorkOfUint64ToRune
}

var (
	zero_of_WorkOfUint64ToRune       WorkOfUint64ToRune
	zero_of_WorkOfUint64ToRune_Value uint64
	pool_of_WorkOfUint64ToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToRune{}
		},
	}
)

func getWorkOfUint64ToRune() *WorkOfUint64ToRune {
	return pool_of_WorkOfUint64ToRune.Get().(*WorkOfUint64ToRune)
}
func putWorkOfUint64ToRune(d *WorkOfUint64ToRune) {
	d.Value = zero_of_WorkOfUint64ToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToRune.Put(d)
}

type _Uint64ToRune struct{}

func (_ _Uint64ToRune) GetWork() *WorkOfUint64ToRune {
	return getWorkOfUint64ToRune()
}
func (__ _Uint64ToRune) GetWorkWith(value uint64, returnCh chan<- *ReturnOfRune) *WorkOfUint64ToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToRune) PutWork(d *WorkOfUint64ToRune) {
	putWorkOfUint64ToRune(d)
}

func (_ _Uint64ToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _Uint64ToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _Uint64ToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _Uint64ToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _Uint64ToRune) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToRune) CallAsync(ctx context.Context, work *WorkOfUint64ToRune, h func(ctx context.Context, arg uint64) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToString interface {
	Push(ctx context.Context, work *WorkOfUint64ToString, returnCh chan<- *ReturnOfString)
}

type WorkOfUint64ToString struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfString
}

type WorkOfUint64ToStringWithContext struct {
	Context context.Context
	WorkOfUint64ToString
}

var (
	zero_of_WorkOfUint64ToString       WorkOfUint64ToString
	zero_of_WorkOfUint64ToString_Value uint64
	pool_of_WorkOfUint64ToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToString{}
		},
	}
)

func getWorkOfUint64ToString() *WorkOfUint64ToString {
	return pool_of_WorkOfUint64ToString.Get().(*WorkOfUint64ToString)
}
func putWorkOfUint64ToString(d *WorkOfUint64ToString) {
	d.Value = zero_of_WorkOfUint64ToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToString.Put(d)
}

type _Uint64ToString struct{}

func (_ _Uint64ToString) GetWork() *WorkOfUint64ToString {
	return getWorkOfUint64ToString()
}
func (__ _Uint64ToString) GetWorkWith(value uint64, returnCh chan<- *ReturnOfString) *WorkOfUint64ToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToString) PutWork(d *WorkOfUint64ToString) {
	putWorkOfUint64ToString(d)
}

func (_ _Uint64ToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _Uint64ToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _Uint64ToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _Uint64ToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _Uint64ToString) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToString) CallAsync(ctx context.Context, work *WorkOfUint64ToString, h func(ctx context.Context, arg uint64) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToUint interface {
	Push(ctx context.Context, work *WorkOfUint64ToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfUint64ToUint struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfUint64ToUintWithContext struct {
	Context context.Context
	WorkOfUint64ToUint
}

var (
	zero_of_WorkOfUint64ToUint       WorkOfUint64ToUint
	zero_of_WorkOfUint64ToUint_Value uint64
	pool_of_WorkOfUint64ToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToUint{}
		},
	}
)

func getWorkOfUint64ToUint() *WorkOfUint64ToUint {
	return pool_of_WorkOfUint64ToUint.Get().(*WorkOfUint64ToUint)
}
func putWorkOfUint64ToUint(d *WorkOfUint64ToUint) {
	d.Value = zero_of_WorkOfUint64ToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToUint.Put(d)
}

type _Uint64ToUint struct{}

func (_ _Uint64ToUint) GetWork() *WorkOfUint64ToUint {
	return getWorkOfUint64ToUint()
}
func (__ _Uint64ToUint) GetWorkWith(value uint64, returnCh chan<- *ReturnOfUint) *WorkOfUint64ToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToUint) PutWork(d *WorkOfUint64ToUint) {
	putWorkOfUint64ToUint(d)
}

func (_ _Uint64ToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _Uint64ToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _Uint64ToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _Uint64ToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _Uint64ToUint) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToUint) CallAsync(ctx context.Context, work *WorkOfUint64ToUint, h func(ctx context.Context, arg uint64) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToUint16 interface {
	Push(ctx context.Context, work *WorkOfUint64ToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfUint64ToUint16 struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfUint64ToUint16WithContext struct {
	Context context.Context
	WorkOfUint64ToUint16
}

var (
	zero_of_WorkOfUint64ToUint16       WorkOfUint64ToUint16
	zero_of_WorkOfUint64ToUint16_Value uint64
	pool_of_WorkOfUint64ToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToUint16{}
		},
	}
)

func getWorkOfUint64ToUint16() *WorkOfUint64ToUint16 {
	return pool_of_WorkOfUint64ToUint16.Get().(*WorkOfUint64ToUint16)
}
func putWorkOfUint64ToUint16(d *WorkOfUint64ToUint16) {
	d.Value = zero_of_WorkOfUint64ToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToUint16.Put(d)
}

type _Uint64ToUint16 struct{}

func (_ _Uint64ToUint16) GetWork() *WorkOfUint64ToUint16 {
	return getWorkOfUint64ToUint16()
}
func (__ _Uint64ToUint16) GetWorkWith(value uint64, returnCh chan<- *ReturnOfUint16) *WorkOfUint64ToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToUint16) PutWork(d *WorkOfUint64ToUint16) {
	putWorkOfUint64ToUint16(d)
}

func (_ _Uint64ToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _Uint64ToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _Uint64ToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _Uint64ToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _Uint64ToUint16) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToUint16) CallAsync(ctx context.Context, work *WorkOfUint64ToUint16, h func(ctx context.Context, arg uint64) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToUint32 interface {
	Push(ctx context.Context, work *WorkOfUint64ToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfUint64ToUint32 struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfUint64ToUint32WithContext struct {
	Context context.Context
	WorkOfUint64ToUint32
}

var (
	zero_of_WorkOfUint64ToUint32       WorkOfUint64ToUint32
	zero_of_WorkOfUint64ToUint32_Value uint64
	pool_of_WorkOfUint64ToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToUint32{}
		},
	}
)

func getWorkOfUint64ToUint32() *WorkOfUint64ToUint32 {
	return pool_of_WorkOfUint64ToUint32.Get().(*WorkOfUint64ToUint32)
}
func putWorkOfUint64ToUint32(d *WorkOfUint64ToUint32) {
	d.Value = zero_of_WorkOfUint64ToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToUint32.Put(d)
}

type _Uint64ToUint32 struct{}

func (_ _Uint64ToUint32) GetWork() *WorkOfUint64ToUint32 {
	return getWorkOfUint64ToUint32()
}
func (__ _Uint64ToUint32) GetWorkWith(value uint64, returnCh chan<- *ReturnOfUint32) *WorkOfUint64ToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToUint32) PutWork(d *WorkOfUint64ToUint32) {
	putWorkOfUint64ToUint32(d)
}

func (_ _Uint64ToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _Uint64ToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _Uint64ToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _Uint64ToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _Uint64ToUint32) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToUint32) CallAsync(ctx context.Context, work *WorkOfUint64ToUint32, h func(ctx context.Context, arg uint64) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToUint64 interface {
	Push(ctx context.Context, work *WorkOfUint64ToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfUint64ToUint64 struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfUint64ToUint64WithContext struct {
	Context context.Context
	WorkOfUint64ToUint64
}

var (
	zero_of_WorkOfUint64ToUint64       WorkOfUint64ToUint64
	zero_of_WorkOfUint64ToUint64_Value uint64
	pool_of_WorkOfUint64ToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToUint64{}
		},
	}
)

func getWorkOfUint64ToUint64() *WorkOfUint64ToUint64 {
	return pool_of_WorkOfUint64ToUint64.Get().(*WorkOfUint64ToUint64)
}
func putWorkOfUint64ToUint64(d *WorkOfUint64ToUint64) {
	d.Value = zero_of_WorkOfUint64ToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToUint64.Put(d)
}

type _Uint64ToUint64 struct{}

func (_ _Uint64ToUint64) GetWork() *WorkOfUint64ToUint64 {
	return getWorkOfUint64ToUint64()
}
func (__ _Uint64ToUint64) GetWorkWith(value uint64, returnCh chan<- *ReturnOfUint64) *WorkOfUint64ToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToUint64) PutWork(d *WorkOfUint64ToUint64) {
	putWorkOfUint64ToUint64(d)
}

func (_ _Uint64ToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _Uint64ToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _Uint64ToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _Uint64ToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _Uint64ToUint64) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToUint64) CallAsync(ctx context.Context, work *WorkOfUint64ToUint64, h func(ctx context.Context, arg uint64) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToUint8 interface {
	Push(ctx context.Context, work *WorkOfUint64ToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfUint64ToUint8 struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfUint64ToUint8WithContext struct {
	Context context.Context
	WorkOfUint64ToUint8
}

var (
	zero_of_WorkOfUint64ToUint8       WorkOfUint64ToUint8
	zero_of_WorkOfUint64ToUint8_Value uint64
	pool_of_WorkOfUint64ToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToUint8{}
		},
	}
)

func getWorkOfUint64ToUint8() *WorkOfUint64ToUint8 {
	return pool_of_WorkOfUint64ToUint8.Get().(*WorkOfUint64ToUint8)
}
func putWorkOfUint64ToUint8(d *WorkOfUint64ToUint8) {
	d.Value = zero_of_WorkOfUint64ToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToUint8.Put(d)
}

type _Uint64ToUint8 struct{}

func (_ _Uint64ToUint8) GetWork() *WorkOfUint64ToUint8 {
	return getWorkOfUint64ToUint8()
}
func (__ _Uint64ToUint8) GetWorkWith(value uint64, returnCh chan<- *ReturnOfUint8) *WorkOfUint64ToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToUint8) PutWork(d *WorkOfUint64ToUint8) {
	putWorkOfUint64ToUint8(d)
}

func (_ _Uint64ToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _Uint64ToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _Uint64ToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _Uint64ToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _Uint64ToUint8) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToUint8) CallAsync(ctx context.Context, work *WorkOfUint64ToUint8, h func(ctx context.Context, arg uint64) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToUintptr interface {
	Push(ctx context.Context, work *WorkOfUint64ToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfUint64ToUintptr struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfUint64ToUintptrWithContext struct {
	Context context.Context
	WorkOfUint64ToUintptr
}

var (
	zero_of_WorkOfUint64ToUintptr       WorkOfUint64ToUintptr
	zero_of_WorkOfUint64ToUintptr_Value uint64
	pool_of_WorkOfUint64ToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToUintptr{}
		},
	}
)

func getWorkOfUint64ToUintptr() *WorkOfUint64ToUintptr {
	return pool_of_WorkOfUint64ToUintptr.Get().(*WorkOfUint64ToUintptr)
}
func putWorkOfUint64ToUintptr(d *WorkOfUint64ToUintptr) {
	d.Value = zero_of_WorkOfUint64ToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToUintptr.Put(d)
}

type _Uint64ToUintptr struct{}

func (_ _Uint64ToUintptr) GetWork() *WorkOfUint64ToUintptr {
	return getWorkOfUint64ToUintptr()
}
func (__ _Uint64ToUintptr) GetWorkWith(value uint64, returnCh chan<- *ReturnOfUintptr) *WorkOfUint64ToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToUintptr) PutWork(d *WorkOfUint64ToUintptr) {
	putWorkOfUint64ToUintptr(d)
}

func (_ _Uint64ToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _Uint64ToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _Uint64ToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _Uint64ToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _Uint64ToUintptr) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToUintptr) CallAsync(ctx context.Context, work *WorkOfUint64ToUintptr, h func(ctx context.Context, arg uint64) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToBytes interface {
	Push(ctx context.Context, work *WorkOfUint64ToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfUint64ToBytes struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfUint64ToBytesWithContext struct {
	Context context.Context
	WorkOfUint64ToBytes
}

var (
	zero_of_WorkOfUint64ToBytes       WorkOfUint64ToBytes
	zero_of_WorkOfUint64ToBytes_Value uint64
	pool_of_WorkOfUint64ToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToBytes{}
		},
	}
)

func getWorkOfUint64ToBytes() *WorkOfUint64ToBytes {
	return pool_of_WorkOfUint64ToBytes.Get().(*WorkOfUint64ToBytes)
}
func putWorkOfUint64ToBytes(d *WorkOfUint64ToBytes) {
	d.Value = zero_of_WorkOfUint64ToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToBytes.Put(d)
}

type _Uint64ToBytes struct{}

func (_ _Uint64ToBytes) GetWork() *WorkOfUint64ToBytes {
	return getWorkOfUint64ToBytes()
}
func (__ _Uint64ToBytes) GetWorkWith(value uint64, returnCh chan<- *ReturnOfBytes) *WorkOfUint64ToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToBytes) PutWork(d *WorkOfUint64ToBytes) {
	putWorkOfUint64ToBytes(d)
}

func (_ _Uint64ToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _Uint64ToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _Uint64ToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _Uint64ToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _Uint64ToBytes) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToBytes) CallAsync(ctx context.Context, work *WorkOfUint64ToBytes, h func(ctx context.Context, arg uint64) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint64ToInterface interface {
	Push(ctx context.Context, work *WorkOfUint64ToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfUint64ToInterface struct {
	Value    uint64
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfUint64ToInterfaceWithContext struct {
	Context context.Context
	WorkOfUint64ToInterface
}

var (
	zero_of_WorkOfUint64ToInterface       WorkOfUint64ToInterface
	zero_of_WorkOfUint64ToInterface_Value uint64
	pool_of_WorkOfUint64ToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint64ToInterface{}
		},
	}
)

func getWorkOfUint64ToInterface() *WorkOfUint64ToInterface {
	return pool_of_WorkOfUint64ToInterface.Get().(*WorkOfUint64ToInterface)
}
func putWorkOfUint64ToInterface(d *WorkOfUint64ToInterface) {
	d.Value = zero_of_WorkOfUint64ToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint64ToInterface.Put(d)
}

type _Uint64ToInterface struct{}

func (_ _Uint64ToInterface) GetWork() *WorkOfUint64ToInterface {
	return getWorkOfUint64ToInterface()
}
func (__ _Uint64ToInterface) GetWorkWith(value uint64, returnCh chan<- *ReturnOfInterface) *WorkOfUint64ToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint64ToInterface) PutWork(d *WorkOfUint64ToInterface) {
	putWorkOfUint64ToInterface(d)
}

func (_ _Uint64ToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _Uint64ToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint64ToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _Uint64ToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _Uint64ToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _Uint64ToInterface) CallSync(ctx context.Context, value uint64, push func(ctx context.Context, work *WorkOfUint64ToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint64ToInterface) CallAsync(ctx context.Context, work *WorkOfUint64ToInterface, h func(ctx context.Context, arg uint64) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToBool interface {
	Push(ctx context.Context, work *WorkOfUint8ToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfUint8ToBool struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfUint8ToBoolWithContext struct {
	Context context.Context
	WorkOfUint8ToBool
}

var (
	zero_of_WorkOfUint8ToBool       WorkOfUint8ToBool
	zero_of_WorkOfUint8ToBool_Value uint8
	pool_of_WorkOfUint8ToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToBool{}
		},
	}
)

func getWorkOfUint8ToBool() *WorkOfUint8ToBool {
	return pool_of_WorkOfUint8ToBool.Get().(*WorkOfUint8ToBool)
}
func putWorkOfUint8ToBool(d *WorkOfUint8ToBool) {
	d.Value = zero_of_WorkOfUint8ToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToBool.Put(d)
}

type _Uint8ToBool struct{}

func (_ _Uint8ToBool) GetWork() *WorkOfUint8ToBool {
	return getWorkOfUint8ToBool()
}
func (__ _Uint8ToBool) GetWorkWith(value uint8, returnCh chan<- *ReturnOfBool) *WorkOfUint8ToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToBool) PutWork(d *WorkOfUint8ToBool) {
	putWorkOfUint8ToBool(d)
}

func (_ _Uint8ToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _Uint8ToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _Uint8ToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _Uint8ToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _Uint8ToBool) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToBool) CallAsync(ctx context.Context, work *WorkOfUint8ToBool, h func(ctx context.Context, arg uint8) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToByte interface {
	Push(ctx context.Context, work *WorkOfUint8ToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfUint8ToByte struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfUint8ToByteWithContext struct {
	Context context.Context
	WorkOfUint8ToByte
}

var (
	zero_of_WorkOfUint8ToByte       WorkOfUint8ToByte
	zero_of_WorkOfUint8ToByte_Value uint8
	pool_of_WorkOfUint8ToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToByte{}
		},
	}
)

func getWorkOfUint8ToByte() *WorkOfUint8ToByte {
	return pool_of_WorkOfUint8ToByte.Get().(*WorkOfUint8ToByte)
}
func putWorkOfUint8ToByte(d *WorkOfUint8ToByte) {
	d.Value = zero_of_WorkOfUint8ToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToByte.Put(d)
}

type _Uint8ToByte struct{}

func (_ _Uint8ToByte) GetWork() *WorkOfUint8ToByte {
	return getWorkOfUint8ToByte()
}
func (__ _Uint8ToByte) GetWorkWith(value uint8, returnCh chan<- *ReturnOfByte) *WorkOfUint8ToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToByte) PutWork(d *WorkOfUint8ToByte) {
	putWorkOfUint8ToByte(d)
}

func (_ _Uint8ToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _Uint8ToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _Uint8ToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _Uint8ToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _Uint8ToByte) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToByte) CallAsync(ctx context.Context, work *WorkOfUint8ToByte, h func(ctx context.Context, arg uint8) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToComplex128 interface {
	Push(ctx context.Context, work *WorkOfUint8ToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfUint8ToComplex128 struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfUint8ToComplex128WithContext struct {
	Context context.Context
	WorkOfUint8ToComplex128
}

var (
	zero_of_WorkOfUint8ToComplex128       WorkOfUint8ToComplex128
	zero_of_WorkOfUint8ToComplex128_Value uint8
	pool_of_WorkOfUint8ToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToComplex128{}
		},
	}
)

func getWorkOfUint8ToComplex128() *WorkOfUint8ToComplex128 {
	return pool_of_WorkOfUint8ToComplex128.Get().(*WorkOfUint8ToComplex128)
}
func putWorkOfUint8ToComplex128(d *WorkOfUint8ToComplex128) {
	d.Value = zero_of_WorkOfUint8ToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToComplex128.Put(d)
}

type _Uint8ToComplex128 struct{}

func (_ _Uint8ToComplex128) GetWork() *WorkOfUint8ToComplex128 {
	return getWorkOfUint8ToComplex128()
}
func (__ _Uint8ToComplex128) GetWorkWith(value uint8, returnCh chan<- *ReturnOfComplex128) *WorkOfUint8ToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToComplex128) PutWork(d *WorkOfUint8ToComplex128) {
	putWorkOfUint8ToComplex128(d)
}

func (_ _Uint8ToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _Uint8ToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _Uint8ToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _Uint8ToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _Uint8ToComplex128) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToComplex128) CallAsync(ctx context.Context, work *WorkOfUint8ToComplex128, h func(ctx context.Context, arg uint8) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToComplex64 interface {
	Push(ctx context.Context, work *WorkOfUint8ToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfUint8ToComplex64 struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfUint8ToComplex64WithContext struct {
	Context context.Context
	WorkOfUint8ToComplex64
}

var (
	zero_of_WorkOfUint8ToComplex64       WorkOfUint8ToComplex64
	zero_of_WorkOfUint8ToComplex64_Value uint8
	pool_of_WorkOfUint8ToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToComplex64{}
		},
	}
)

func getWorkOfUint8ToComplex64() *WorkOfUint8ToComplex64 {
	return pool_of_WorkOfUint8ToComplex64.Get().(*WorkOfUint8ToComplex64)
}
func putWorkOfUint8ToComplex64(d *WorkOfUint8ToComplex64) {
	d.Value = zero_of_WorkOfUint8ToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToComplex64.Put(d)
}

type _Uint8ToComplex64 struct{}

func (_ _Uint8ToComplex64) GetWork() *WorkOfUint8ToComplex64 {
	return getWorkOfUint8ToComplex64()
}
func (__ _Uint8ToComplex64) GetWorkWith(value uint8, returnCh chan<- *ReturnOfComplex64) *WorkOfUint8ToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToComplex64) PutWork(d *WorkOfUint8ToComplex64) {
	putWorkOfUint8ToComplex64(d)
}

func (_ _Uint8ToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _Uint8ToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _Uint8ToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _Uint8ToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _Uint8ToComplex64) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToComplex64) CallAsync(ctx context.Context, work *WorkOfUint8ToComplex64, h func(ctx context.Context, arg uint8) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToError interface {
	Push(ctx context.Context, work *WorkOfUint8ToError, returnCh chan<- *ReturnOfError)
}

type WorkOfUint8ToError struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfError
}

type WorkOfUint8ToErrorWithContext struct {
	Context context.Context
	WorkOfUint8ToError
}

var (
	zero_of_WorkOfUint8ToError       WorkOfUint8ToError
	zero_of_WorkOfUint8ToError_Value uint8
	pool_of_WorkOfUint8ToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToError{}
		},
	}
)

func getWorkOfUint8ToError() *WorkOfUint8ToError {
	return pool_of_WorkOfUint8ToError.Get().(*WorkOfUint8ToError)
}
func putWorkOfUint8ToError(d *WorkOfUint8ToError) {
	d.Value = zero_of_WorkOfUint8ToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToError.Put(d)
}

type _Uint8ToError struct{}

func (_ _Uint8ToError) GetWork() *WorkOfUint8ToError {
	return getWorkOfUint8ToError()
}
func (__ _Uint8ToError) GetWorkWith(value uint8, returnCh chan<- *ReturnOfError) *WorkOfUint8ToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToError) PutWork(d *WorkOfUint8ToError) {
	putWorkOfUint8ToError(d)
}

func (_ _Uint8ToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _Uint8ToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _Uint8ToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _Uint8ToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _Uint8ToError) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToError) CallAsync(ctx context.Context, work *WorkOfUint8ToError, h func(ctx context.Context, arg uint8) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToFloat32 interface {
	Push(ctx context.Context, work *WorkOfUint8ToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfUint8ToFloat32 struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfUint8ToFloat32WithContext struct {
	Context context.Context
	WorkOfUint8ToFloat32
}

var (
	zero_of_WorkOfUint8ToFloat32       WorkOfUint8ToFloat32
	zero_of_WorkOfUint8ToFloat32_Value uint8
	pool_of_WorkOfUint8ToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToFloat32{}
		},
	}
)

func getWorkOfUint8ToFloat32() *WorkOfUint8ToFloat32 {
	return pool_of_WorkOfUint8ToFloat32.Get().(*WorkOfUint8ToFloat32)
}
func putWorkOfUint8ToFloat32(d *WorkOfUint8ToFloat32) {
	d.Value = zero_of_WorkOfUint8ToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToFloat32.Put(d)
}

type _Uint8ToFloat32 struct{}

func (_ _Uint8ToFloat32) GetWork() *WorkOfUint8ToFloat32 {
	return getWorkOfUint8ToFloat32()
}
func (__ _Uint8ToFloat32) GetWorkWith(value uint8, returnCh chan<- *ReturnOfFloat32) *WorkOfUint8ToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToFloat32) PutWork(d *WorkOfUint8ToFloat32) {
	putWorkOfUint8ToFloat32(d)
}

func (_ _Uint8ToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _Uint8ToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _Uint8ToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _Uint8ToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _Uint8ToFloat32) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToFloat32) CallAsync(ctx context.Context, work *WorkOfUint8ToFloat32, h func(ctx context.Context, arg uint8) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToFloat64 interface {
	Push(ctx context.Context, work *WorkOfUint8ToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfUint8ToFloat64 struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfUint8ToFloat64WithContext struct {
	Context context.Context
	WorkOfUint8ToFloat64
}

var (
	zero_of_WorkOfUint8ToFloat64       WorkOfUint8ToFloat64
	zero_of_WorkOfUint8ToFloat64_Value uint8
	pool_of_WorkOfUint8ToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToFloat64{}
		},
	}
)

func getWorkOfUint8ToFloat64() *WorkOfUint8ToFloat64 {
	return pool_of_WorkOfUint8ToFloat64.Get().(*WorkOfUint8ToFloat64)
}
func putWorkOfUint8ToFloat64(d *WorkOfUint8ToFloat64) {
	d.Value = zero_of_WorkOfUint8ToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToFloat64.Put(d)
}

type _Uint8ToFloat64 struct{}

func (_ _Uint8ToFloat64) GetWork() *WorkOfUint8ToFloat64 {
	return getWorkOfUint8ToFloat64()
}
func (__ _Uint8ToFloat64) GetWorkWith(value uint8, returnCh chan<- *ReturnOfFloat64) *WorkOfUint8ToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToFloat64) PutWork(d *WorkOfUint8ToFloat64) {
	putWorkOfUint8ToFloat64(d)
}

func (_ _Uint8ToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _Uint8ToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _Uint8ToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _Uint8ToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _Uint8ToFloat64) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToFloat64) CallAsync(ctx context.Context, work *WorkOfUint8ToFloat64, h func(ctx context.Context, arg uint8) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToInt interface {
	Push(ctx context.Context, work *WorkOfUint8ToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfUint8ToInt struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfUint8ToIntWithContext struct {
	Context context.Context
	WorkOfUint8ToInt
}

var (
	zero_of_WorkOfUint8ToInt       WorkOfUint8ToInt
	zero_of_WorkOfUint8ToInt_Value uint8
	pool_of_WorkOfUint8ToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToInt{}
		},
	}
)

func getWorkOfUint8ToInt() *WorkOfUint8ToInt {
	return pool_of_WorkOfUint8ToInt.Get().(*WorkOfUint8ToInt)
}
func putWorkOfUint8ToInt(d *WorkOfUint8ToInt) {
	d.Value = zero_of_WorkOfUint8ToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToInt.Put(d)
}

type _Uint8ToInt struct{}

func (_ _Uint8ToInt) GetWork() *WorkOfUint8ToInt {
	return getWorkOfUint8ToInt()
}
func (__ _Uint8ToInt) GetWorkWith(value uint8, returnCh chan<- *ReturnOfInt) *WorkOfUint8ToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToInt) PutWork(d *WorkOfUint8ToInt) {
	putWorkOfUint8ToInt(d)
}

func (_ _Uint8ToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _Uint8ToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _Uint8ToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _Uint8ToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _Uint8ToInt) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToInt) CallAsync(ctx context.Context, work *WorkOfUint8ToInt, h func(ctx context.Context, arg uint8) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToInt16 interface {
	Push(ctx context.Context, work *WorkOfUint8ToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfUint8ToInt16 struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfUint8ToInt16WithContext struct {
	Context context.Context
	WorkOfUint8ToInt16
}

var (
	zero_of_WorkOfUint8ToInt16       WorkOfUint8ToInt16
	zero_of_WorkOfUint8ToInt16_Value uint8
	pool_of_WorkOfUint8ToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToInt16{}
		},
	}
)

func getWorkOfUint8ToInt16() *WorkOfUint8ToInt16 {
	return pool_of_WorkOfUint8ToInt16.Get().(*WorkOfUint8ToInt16)
}
func putWorkOfUint8ToInt16(d *WorkOfUint8ToInt16) {
	d.Value = zero_of_WorkOfUint8ToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToInt16.Put(d)
}

type _Uint8ToInt16 struct{}

func (_ _Uint8ToInt16) GetWork() *WorkOfUint8ToInt16 {
	return getWorkOfUint8ToInt16()
}
func (__ _Uint8ToInt16) GetWorkWith(value uint8, returnCh chan<- *ReturnOfInt16) *WorkOfUint8ToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToInt16) PutWork(d *WorkOfUint8ToInt16) {
	putWorkOfUint8ToInt16(d)
}

func (_ _Uint8ToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _Uint8ToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _Uint8ToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _Uint8ToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _Uint8ToInt16) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToInt16) CallAsync(ctx context.Context, work *WorkOfUint8ToInt16, h func(ctx context.Context, arg uint8) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToInt32 interface {
	Push(ctx context.Context, work *WorkOfUint8ToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfUint8ToInt32 struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfUint8ToInt32WithContext struct {
	Context context.Context
	WorkOfUint8ToInt32
}

var (
	zero_of_WorkOfUint8ToInt32       WorkOfUint8ToInt32
	zero_of_WorkOfUint8ToInt32_Value uint8
	pool_of_WorkOfUint8ToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToInt32{}
		},
	}
)

func getWorkOfUint8ToInt32() *WorkOfUint8ToInt32 {
	return pool_of_WorkOfUint8ToInt32.Get().(*WorkOfUint8ToInt32)
}
func putWorkOfUint8ToInt32(d *WorkOfUint8ToInt32) {
	d.Value = zero_of_WorkOfUint8ToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToInt32.Put(d)
}

type _Uint8ToInt32 struct{}

func (_ _Uint8ToInt32) GetWork() *WorkOfUint8ToInt32 {
	return getWorkOfUint8ToInt32()
}
func (__ _Uint8ToInt32) GetWorkWith(value uint8, returnCh chan<- *ReturnOfInt32) *WorkOfUint8ToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToInt32) PutWork(d *WorkOfUint8ToInt32) {
	putWorkOfUint8ToInt32(d)
}

func (_ _Uint8ToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _Uint8ToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _Uint8ToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _Uint8ToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _Uint8ToInt32) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToInt32) CallAsync(ctx context.Context, work *WorkOfUint8ToInt32, h func(ctx context.Context, arg uint8) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToInt64 interface {
	Push(ctx context.Context, work *WorkOfUint8ToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfUint8ToInt64 struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfUint8ToInt64WithContext struct {
	Context context.Context
	WorkOfUint8ToInt64
}

var (
	zero_of_WorkOfUint8ToInt64       WorkOfUint8ToInt64
	zero_of_WorkOfUint8ToInt64_Value uint8
	pool_of_WorkOfUint8ToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToInt64{}
		},
	}
)

func getWorkOfUint8ToInt64() *WorkOfUint8ToInt64 {
	return pool_of_WorkOfUint8ToInt64.Get().(*WorkOfUint8ToInt64)
}
func putWorkOfUint8ToInt64(d *WorkOfUint8ToInt64) {
	d.Value = zero_of_WorkOfUint8ToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToInt64.Put(d)
}

type _Uint8ToInt64 struct{}

func (_ _Uint8ToInt64) GetWork() *WorkOfUint8ToInt64 {
	return getWorkOfUint8ToInt64()
}
func (__ _Uint8ToInt64) GetWorkWith(value uint8, returnCh chan<- *ReturnOfInt64) *WorkOfUint8ToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToInt64) PutWork(d *WorkOfUint8ToInt64) {
	putWorkOfUint8ToInt64(d)
}

func (_ _Uint8ToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _Uint8ToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _Uint8ToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _Uint8ToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _Uint8ToInt64) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToInt64) CallAsync(ctx context.Context, work *WorkOfUint8ToInt64, h func(ctx context.Context, arg uint8) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToInt8 interface {
	Push(ctx context.Context, work *WorkOfUint8ToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfUint8ToInt8 struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfUint8ToInt8WithContext struct {
	Context context.Context
	WorkOfUint8ToInt8
}

var (
	zero_of_WorkOfUint8ToInt8       WorkOfUint8ToInt8
	zero_of_WorkOfUint8ToInt8_Value uint8
	pool_of_WorkOfUint8ToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToInt8{}
		},
	}
)

func getWorkOfUint8ToInt8() *WorkOfUint8ToInt8 {
	return pool_of_WorkOfUint8ToInt8.Get().(*WorkOfUint8ToInt8)
}
func putWorkOfUint8ToInt8(d *WorkOfUint8ToInt8) {
	d.Value = zero_of_WorkOfUint8ToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToInt8.Put(d)
}

type _Uint8ToInt8 struct{}

func (_ _Uint8ToInt8) GetWork() *WorkOfUint8ToInt8 {
	return getWorkOfUint8ToInt8()
}
func (__ _Uint8ToInt8) GetWorkWith(value uint8, returnCh chan<- *ReturnOfInt8) *WorkOfUint8ToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToInt8) PutWork(d *WorkOfUint8ToInt8) {
	putWorkOfUint8ToInt8(d)
}

func (_ _Uint8ToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _Uint8ToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _Uint8ToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _Uint8ToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _Uint8ToInt8) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToInt8) CallAsync(ctx context.Context, work *WorkOfUint8ToInt8, h func(ctx context.Context, arg uint8) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToRune interface {
	Push(ctx context.Context, work *WorkOfUint8ToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfUint8ToRune struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfUint8ToRuneWithContext struct {
	Context context.Context
	WorkOfUint8ToRune
}

var (
	zero_of_WorkOfUint8ToRune       WorkOfUint8ToRune
	zero_of_WorkOfUint8ToRune_Value uint8
	pool_of_WorkOfUint8ToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToRune{}
		},
	}
)

func getWorkOfUint8ToRune() *WorkOfUint8ToRune {
	return pool_of_WorkOfUint8ToRune.Get().(*WorkOfUint8ToRune)
}
func putWorkOfUint8ToRune(d *WorkOfUint8ToRune) {
	d.Value = zero_of_WorkOfUint8ToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToRune.Put(d)
}

type _Uint8ToRune struct{}

func (_ _Uint8ToRune) GetWork() *WorkOfUint8ToRune {
	return getWorkOfUint8ToRune()
}
func (__ _Uint8ToRune) GetWorkWith(value uint8, returnCh chan<- *ReturnOfRune) *WorkOfUint8ToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToRune) PutWork(d *WorkOfUint8ToRune) {
	putWorkOfUint8ToRune(d)
}

func (_ _Uint8ToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _Uint8ToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _Uint8ToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _Uint8ToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _Uint8ToRune) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToRune) CallAsync(ctx context.Context, work *WorkOfUint8ToRune, h func(ctx context.Context, arg uint8) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToString interface {
	Push(ctx context.Context, work *WorkOfUint8ToString, returnCh chan<- *ReturnOfString)
}

type WorkOfUint8ToString struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfString
}

type WorkOfUint8ToStringWithContext struct {
	Context context.Context
	WorkOfUint8ToString
}

var (
	zero_of_WorkOfUint8ToString       WorkOfUint8ToString
	zero_of_WorkOfUint8ToString_Value uint8
	pool_of_WorkOfUint8ToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToString{}
		},
	}
)

func getWorkOfUint8ToString() *WorkOfUint8ToString {
	return pool_of_WorkOfUint8ToString.Get().(*WorkOfUint8ToString)
}
func putWorkOfUint8ToString(d *WorkOfUint8ToString) {
	d.Value = zero_of_WorkOfUint8ToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToString.Put(d)
}

type _Uint8ToString struct{}

func (_ _Uint8ToString) GetWork() *WorkOfUint8ToString {
	return getWorkOfUint8ToString()
}
func (__ _Uint8ToString) GetWorkWith(value uint8, returnCh chan<- *ReturnOfString) *WorkOfUint8ToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToString) PutWork(d *WorkOfUint8ToString) {
	putWorkOfUint8ToString(d)
}

func (_ _Uint8ToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _Uint8ToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _Uint8ToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _Uint8ToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _Uint8ToString) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToString) CallAsync(ctx context.Context, work *WorkOfUint8ToString, h func(ctx context.Context, arg uint8) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToUint interface {
	Push(ctx context.Context, work *WorkOfUint8ToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfUint8ToUint struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfUint8ToUintWithContext struct {
	Context context.Context
	WorkOfUint8ToUint
}

var (
	zero_of_WorkOfUint8ToUint       WorkOfUint8ToUint
	zero_of_WorkOfUint8ToUint_Value uint8
	pool_of_WorkOfUint8ToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToUint{}
		},
	}
)

func getWorkOfUint8ToUint() *WorkOfUint8ToUint {
	return pool_of_WorkOfUint8ToUint.Get().(*WorkOfUint8ToUint)
}
func putWorkOfUint8ToUint(d *WorkOfUint8ToUint) {
	d.Value = zero_of_WorkOfUint8ToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToUint.Put(d)
}

type _Uint8ToUint struct{}

func (_ _Uint8ToUint) GetWork() *WorkOfUint8ToUint {
	return getWorkOfUint8ToUint()
}
func (__ _Uint8ToUint) GetWorkWith(value uint8, returnCh chan<- *ReturnOfUint) *WorkOfUint8ToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToUint) PutWork(d *WorkOfUint8ToUint) {
	putWorkOfUint8ToUint(d)
}

func (_ _Uint8ToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _Uint8ToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _Uint8ToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _Uint8ToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _Uint8ToUint) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToUint) CallAsync(ctx context.Context, work *WorkOfUint8ToUint, h func(ctx context.Context, arg uint8) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToUint16 interface {
	Push(ctx context.Context, work *WorkOfUint8ToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfUint8ToUint16 struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfUint8ToUint16WithContext struct {
	Context context.Context
	WorkOfUint8ToUint16
}

var (
	zero_of_WorkOfUint8ToUint16       WorkOfUint8ToUint16
	zero_of_WorkOfUint8ToUint16_Value uint8
	pool_of_WorkOfUint8ToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToUint16{}
		},
	}
)

func getWorkOfUint8ToUint16() *WorkOfUint8ToUint16 {
	return pool_of_WorkOfUint8ToUint16.Get().(*WorkOfUint8ToUint16)
}
func putWorkOfUint8ToUint16(d *WorkOfUint8ToUint16) {
	d.Value = zero_of_WorkOfUint8ToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToUint16.Put(d)
}

type _Uint8ToUint16 struct{}

func (_ _Uint8ToUint16) GetWork() *WorkOfUint8ToUint16 {
	return getWorkOfUint8ToUint16()
}
func (__ _Uint8ToUint16) GetWorkWith(value uint8, returnCh chan<- *ReturnOfUint16) *WorkOfUint8ToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToUint16) PutWork(d *WorkOfUint8ToUint16) {
	putWorkOfUint8ToUint16(d)
}

func (_ _Uint8ToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _Uint8ToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _Uint8ToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _Uint8ToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _Uint8ToUint16) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToUint16) CallAsync(ctx context.Context, work *WorkOfUint8ToUint16, h func(ctx context.Context, arg uint8) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToUint32 interface {
	Push(ctx context.Context, work *WorkOfUint8ToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfUint8ToUint32 struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfUint8ToUint32WithContext struct {
	Context context.Context
	WorkOfUint8ToUint32
}

var (
	zero_of_WorkOfUint8ToUint32       WorkOfUint8ToUint32
	zero_of_WorkOfUint8ToUint32_Value uint8
	pool_of_WorkOfUint8ToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToUint32{}
		},
	}
)

func getWorkOfUint8ToUint32() *WorkOfUint8ToUint32 {
	return pool_of_WorkOfUint8ToUint32.Get().(*WorkOfUint8ToUint32)
}
func putWorkOfUint8ToUint32(d *WorkOfUint8ToUint32) {
	d.Value = zero_of_WorkOfUint8ToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToUint32.Put(d)
}

type _Uint8ToUint32 struct{}

func (_ _Uint8ToUint32) GetWork() *WorkOfUint8ToUint32 {
	return getWorkOfUint8ToUint32()
}
func (__ _Uint8ToUint32) GetWorkWith(value uint8, returnCh chan<- *ReturnOfUint32) *WorkOfUint8ToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToUint32) PutWork(d *WorkOfUint8ToUint32) {
	putWorkOfUint8ToUint32(d)
}

func (_ _Uint8ToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _Uint8ToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _Uint8ToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _Uint8ToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _Uint8ToUint32) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToUint32) CallAsync(ctx context.Context, work *WorkOfUint8ToUint32, h func(ctx context.Context, arg uint8) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToUint64 interface {
	Push(ctx context.Context, work *WorkOfUint8ToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfUint8ToUint64 struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfUint8ToUint64WithContext struct {
	Context context.Context
	WorkOfUint8ToUint64
}

var (
	zero_of_WorkOfUint8ToUint64       WorkOfUint8ToUint64
	zero_of_WorkOfUint8ToUint64_Value uint8
	pool_of_WorkOfUint8ToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToUint64{}
		},
	}
)

func getWorkOfUint8ToUint64() *WorkOfUint8ToUint64 {
	return pool_of_WorkOfUint8ToUint64.Get().(*WorkOfUint8ToUint64)
}
func putWorkOfUint8ToUint64(d *WorkOfUint8ToUint64) {
	d.Value = zero_of_WorkOfUint8ToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToUint64.Put(d)
}

type _Uint8ToUint64 struct{}

func (_ _Uint8ToUint64) GetWork() *WorkOfUint8ToUint64 {
	return getWorkOfUint8ToUint64()
}
func (__ _Uint8ToUint64) GetWorkWith(value uint8, returnCh chan<- *ReturnOfUint64) *WorkOfUint8ToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToUint64) PutWork(d *WorkOfUint8ToUint64) {
	putWorkOfUint8ToUint64(d)
}

func (_ _Uint8ToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _Uint8ToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _Uint8ToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _Uint8ToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _Uint8ToUint64) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToUint64) CallAsync(ctx context.Context, work *WorkOfUint8ToUint64, h func(ctx context.Context, arg uint8) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToUint8 interface {
	Push(ctx context.Context, work *WorkOfUint8ToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfUint8ToUint8 struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfUint8ToUint8WithContext struct {
	Context context.Context
	WorkOfUint8ToUint8
}

var (
	zero_of_WorkOfUint8ToUint8       WorkOfUint8ToUint8
	zero_of_WorkOfUint8ToUint8_Value uint8
	pool_of_WorkOfUint8ToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToUint8{}
		},
	}
)

func getWorkOfUint8ToUint8() *WorkOfUint8ToUint8 {
	return pool_of_WorkOfUint8ToUint8.Get().(*WorkOfUint8ToUint8)
}
func putWorkOfUint8ToUint8(d *WorkOfUint8ToUint8) {
	d.Value = zero_of_WorkOfUint8ToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToUint8.Put(d)
}

type _Uint8ToUint8 struct{}

func (_ _Uint8ToUint8) GetWork() *WorkOfUint8ToUint8 {
	return getWorkOfUint8ToUint8()
}
func (__ _Uint8ToUint8) GetWorkWith(value uint8, returnCh chan<- *ReturnOfUint8) *WorkOfUint8ToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToUint8) PutWork(d *WorkOfUint8ToUint8) {
	putWorkOfUint8ToUint8(d)
}

func (_ _Uint8ToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _Uint8ToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _Uint8ToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _Uint8ToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _Uint8ToUint8) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToUint8) CallAsync(ctx context.Context, work *WorkOfUint8ToUint8, h func(ctx context.Context, arg uint8) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToUintptr interface {
	Push(ctx context.Context, work *WorkOfUint8ToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfUint8ToUintptr struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfUint8ToUintptrWithContext struct {
	Context context.Context
	WorkOfUint8ToUintptr
}

var (
	zero_of_WorkOfUint8ToUintptr       WorkOfUint8ToUintptr
	zero_of_WorkOfUint8ToUintptr_Value uint8
	pool_of_WorkOfUint8ToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToUintptr{}
		},
	}
)

func getWorkOfUint8ToUintptr() *WorkOfUint8ToUintptr {
	return pool_of_WorkOfUint8ToUintptr.Get().(*WorkOfUint8ToUintptr)
}
func putWorkOfUint8ToUintptr(d *WorkOfUint8ToUintptr) {
	d.Value = zero_of_WorkOfUint8ToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToUintptr.Put(d)
}

type _Uint8ToUintptr struct{}

func (_ _Uint8ToUintptr) GetWork() *WorkOfUint8ToUintptr {
	return getWorkOfUint8ToUintptr()
}
func (__ _Uint8ToUintptr) GetWorkWith(value uint8, returnCh chan<- *ReturnOfUintptr) *WorkOfUint8ToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToUintptr) PutWork(d *WorkOfUint8ToUintptr) {
	putWorkOfUint8ToUintptr(d)
}

func (_ _Uint8ToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _Uint8ToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _Uint8ToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _Uint8ToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _Uint8ToUintptr) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToUintptr) CallAsync(ctx context.Context, work *WorkOfUint8ToUintptr, h func(ctx context.Context, arg uint8) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToBytes interface {
	Push(ctx context.Context, work *WorkOfUint8ToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfUint8ToBytes struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfUint8ToBytesWithContext struct {
	Context context.Context
	WorkOfUint8ToBytes
}

var (
	zero_of_WorkOfUint8ToBytes       WorkOfUint8ToBytes
	zero_of_WorkOfUint8ToBytes_Value uint8
	pool_of_WorkOfUint8ToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToBytes{}
		},
	}
)

func getWorkOfUint8ToBytes() *WorkOfUint8ToBytes {
	return pool_of_WorkOfUint8ToBytes.Get().(*WorkOfUint8ToBytes)
}
func putWorkOfUint8ToBytes(d *WorkOfUint8ToBytes) {
	d.Value = zero_of_WorkOfUint8ToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToBytes.Put(d)
}

type _Uint8ToBytes struct{}

func (_ _Uint8ToBytes) GetWork() *WorkOfUint8ToBytes {
	return getWorkOfUint8ToBytes()
}
func (__ _Uint8ToBytes) GetWorkWith(value uint8, returnCh chan<- *ReturnOfBytes) *WorkOfUint8ToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToBytes) PutWork(d *WorkOfUint8ToBytes) {
	putWorkOfUint8ToBytes(d)
}

func (_ _Uint8ToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _Uint8ToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _Uint8ToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _Uint8ToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _Uint8ToBytes) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToBytes) CallAsync(ctx context.Context, work *WorkOfUint8ToBytes, h func(ctx context.Context, arg uint8) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUint8ToInterface interface {
	Push(ctx context.Context, work *WorkOfUint8ToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfUint8ToInterface struct {
	Value    uint8
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfUint8ToInterfaceWithContext struct {
	Context context.Context
	WorkOfUint8ToInterface
}

var (
	zero_of_WorkOfUint8ToInterface       WorkOfUint8ToInterface
	zero_of_WorkOfUint8ToInterface_Value uint8
	pool_of_WorkOfUint8ToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUint8ToInterface{}
		},
	}
)

func getWorkOfUint8ToInterface() *WorkOfUint8ToInterface {
	return pool_of_WorkOfUint8ToInterface.Get().(*WorkOfUint8ToInterface)
}
func putWorkOfUint8ToInterface(d *WorkOfUint8ToInterface) {
	d.Value = zero_of_WorkOfUint8ToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfUint8ToInterface.Put(d)
}

type _Uint8ToInterface struct{}

func (_ _Uint8ToInterface) GetWork() *WorkOfUint8ToInterface {
	return getWorkOfUint8ToInterface()
}
func (__ _Uint8ToInterface) GetWorkWith(value uint8, returnCh chan<- *ReturnOfInterface) *WorkOfUint8ToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _Uint8ToInterface) PutWork(d *WorkOfUint8ToInterface) {
	putWorkOfUint8ToInterface(d)
}

func (_ _Uint8ToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _Uint8ToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _Uint8ToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _Uint8ToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _Uint8ToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _Uint8ToInterface) CallSync(ctx context.Context, value uint8, push func(ctx context.Context, work *WorkOfUint8ToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _Uint8ToInterface) CallAsync(ctx context.Context, work *WorkOfUint8ToInterface, h func(ctx context.Context, arg uint8) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToBool interface {
	Push(ctx context.Context, work *WorkOfUintptrToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfUintptrToBool struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfUintptrToBoolWithContext struct {
	Context context.Context
	WorkOfUintptrToBool
}

var (
	zero_of_WorkOfUintptrToBool       WorkOfUintptrToBool
	zero_of_WorkOfUintptrToBool_Value uintptr
	pool_of_WorkOfUintptrToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToBool{}
		},
	}
)

func getWorkOfUintptrToBool() *WorkOfUintptrToBool {
	return pool_of_WorkOfUintptrToBool.Get().(*WorkOfUintptrToBool)
}
func putWorkOfUintptrToBool(d *WorkOfUintptrToBool) {
	d.Value = zero_of_WorkOfUintptrToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToBool.Put(d)
}

type _UintptrToBool struct{}

func (_ _UintptrToBool) GetWork() *WorkOfUintptrToBool {
	return getWorkOfUintptrToBool()
}
func (__ _UintptrToBool) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfBool) *WorkOfUintptrToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToBool) PutWork(d *WorkOfUintptrToBool) {
	putWorkOfUintptrToBool(d)
}

func (_ _UintptrToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _UintptrToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _UintptrToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _UintptrToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _UintptrToBool) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToBool) CallAsync(ctx context.Context, work *WorkOfUintptrToBool, h func(ctx context.Context, arg uintptr) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToByte interface {
	Push(ctx context.Context, work *WorkOfUintptrToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfUintptrToByte struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfUintptrToByteWithContext struct {
	Context context.Context
	WorkOfUintptrToByte
}

var (
	zero_of_WorkOfUintptrToByte       WorkOfUintptrToByte
	zero_of_WorkOfUintptrToByte_Value uintptr
	pool_of_WorkOfUintptrToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToByte{}
		},
	}
)

func getWorkOfUintptrToByte() *WorkOfUintptrToByte {
	return pool_of_WorkOfUintptrToByte.Get().(*WorkOfUintptrToByte)
}
func putWorkOfUintptrToByte(d *WorkOfUintptrToByte) {
	d.Value = zero_of_WorkOfUintptrToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToByte.Put(d)
}

type _UintptrToByte struct{}

func (_ _UintptrToByte) GetWork() *WorkOfUintptrToByte {
	return getWorkOfUintptrToByte()
}
func (__ _UintptrToByte) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfByte) *WorkOfUintptrToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToByte) PutWork(d *WorkOfUintptrToByte) {
	putWorkOfUintptrToByte(d)
}

func (_ _UintptrToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _UintptrToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _UintptrToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _UintptrToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _UintptrToByte) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToByte) CallAsync(ctx context.Context, work *WorkOfUintptrToByte, h func(ctx context.Context, arg uintptr) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToComplex128 interface {
	Push(ctx context.Context, work *WorkOfUintptrToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfUintptrToComplex128 struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfUintptrToComplex128WithContext struct {
	Context context.Context
	WorkOfUintptrToComplex128
}

var (
	zero_of_WorkOfUintptrToComplex128       WorkOfUintptrToComplex128
	zero_of_WorkOfUintptrToComplex128_Value uintptr
	pool_of_WorkOfUintptrToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToComplex128{}
		},
	}
)

func getWorkOfUintptrToComplex128() *WorkOfUintptrToComplex128 {
	return pool_of_WorkOfUintptrToComplex128.Get().(*WorkOfUintptrToComplex128)
}
func putWorkOfUintptrToComplex128(d *WorkOfUintptrToComplex128) {
	d.Value = zero_of_WorkOfUintptrToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToComplex128.Put(d)
}

type _UintptrToComplex128 struct{}

func (_ _UintptrToComplex128) GetWork() *WorkOfUintptrToComplex128 {
	return getWorkOfUintptrToComplex128()
}
func (__ _UintptrToComplex128) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfComplex128) *WorkOfUintptrToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToComplex128) PutWork(d *WorkOfUintptrToComplex128) {
	putWorkOfUintptrToComplex128(d)
}

func (_ _UintptrToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _UintptrToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _UintptrToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _UintptrToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _UintptrToComplex128) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToComplex128) CallAsync(ctx context.Context, work *WorkOfUintptrToComplex128, h func(ctx context.Context, arg uintptr) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToComplex64 interface {
	Push(ctx context.Context, work *WorkOfUintptrToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfUintptrToComplex64 struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfUintptrToComplex64WithContext struct {
	Context context.Context
	WorkOfUintptrToComplex64
}

var (
	zero_of_WorkOfUintptrToComplex64       WorkOfUintptrToComplex64
	zero_of_WorkOfUintptrToComplex64_Value uintptr
	pool_of_WorkOfUintptrToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToComplex64{}
		},
	}
)

func getWorkOfUintptrToComplex64() *WorkOfUintptrToComplex64 {
	return pool_of_WorkOfUintptrToComplex64.Get().(*WorkOfUintptrToComplex64)
}
func putWorkOfUintptrToComplex64(d *WorkOfUintptrToComplex64) {
	d.Value = zero_of_WorkOfUintptrToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToComplex64.Put(d)
}

type _UintptrToComplex64 struct{}

func (_ _UintptrToComplex64) GetWork() *WorkOfUintptrToComplex64 {
	return getWorkOfUintptrToComplex64()
}
func (__ _UintptrToComplex64) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfComplex64) *WorkOfUintptrToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToComplex64) PutWork(d *WorkOfUintptrToComplex64) {
	putWorkOfUintptrToComplex64(d)
}

func (_ _UintptrToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _UintptrToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _UintptrToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _UintptrToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _UintptrToComplex64) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToComplex64) CallAsync(ctx context.Context, work *WorkOfUintptrToComplex64, h func(ctx context.Context, arg uintptr) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToError interface {
	Push(ctx context.Context, work *WorkOfUintptrToError, returnCh chan<- *ReturnOfError)
}

type WorkOfUintptrToError struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfError
}

type WorkOfUintptrToErrorWithContext struct {
	Context context.Context
	WorkOfUintptrToError
}

var (
	zero_of_WorkOfUintptrToError       WorkOfUintptrToError
	zero_of_WorkOfUintptrToError_Value uintptr
	pool_of_WorkOfUintptrToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToError{}
		},
	}
)

func getWorkOfUintptrToError() *WorkOfUintptrToError {
	return pool_of_WorkOfUintptrToError.Get().(*WorkOfUintptrToError)
}
func putWorkOfUintptrToError(d *WorkOfUintptrToError) {
	d.Value = zero_of_WorkOfUintptrToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToError.Put(d)
}

type _UintptrToError struct{}

func (_ _UintptrToError) GetWork() *WorkOfUintptrToError {
	return getWorkOfUintptrToError()
}
func (__ _UintptrToError) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfError) *WorkOfUintptrToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToError) PutWork(d *WorkOfUintptrToError) {
	putWorkOfUintptrToError(d)
}

func (_ _UintptrToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _UintptrToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _UintptrToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _UintptrToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _UintptrToError) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToError) CallAsync(ctx context.Context, work *WorkOfUintptrToError, h func(ctx context.Context, arg uintptr) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToFloat32 interface {
	Push(ctx context.Context, work *WorkOfUintptrToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfUintptrToFloat32 struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfUintptrToFloat32WithContext struct {
	Context context.Context
	WorkOfUintptrToFloat32
}

var (
	zero_of_WorkOfUintptrToFloat32       WorkOfUintptrToFloat32
	zero_of_WorkOfUintptrToFloat32_Value uintptr
	pool_of_WorkOfUintptrToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToFloat32{}
		},
	}
)

func getWorkOfUintptrToFloat32() *WorkOfUintptrToFloat32 {
	return pool_of_WorkOfUintptrToFloat32.Get().(*WorkOfUintptrToFloat32)
}
func putWorkOfUintptrToFloat32(d *WorkOfUintptrToFloat32) {
	d.Value = zero_of_WorkOfUintptrToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToFloat32.Put(d)
}

type _UintptrToFloat32 struct{}

func (_ _UintptrToFloat32) GetWork() *WorkOfUintptrToFloat32 {
	return getWorkOfUintptrToFloat32()
}
func (__ _UintptrToFloat32) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfFloat32) *WorkOfUintptrToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToFloat32) PutWork(d *WorkOfUintptrToFloat32) {
	putWorkOfUintptrToFloat32(d)
}

func (_ _UintptrToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _UintptrToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _UintptrToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _UintptrToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _UintptrToFloat32) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToFloat32) CallAsync(ctx context.Context, work *WorkOfUintptrToFloat32, h func(ctx context.Context, arg uintptr) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToFloat64 interface {
	Push(ctx context.Context, work *WorkOfUintptrToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfUintptrToFloat64 struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfUintptrToFloat64WithContext struct {
	Context context.Context
	WorkOfUintptrToFloat64
}

var (
	zero_of_WorkOfUintptrToFloat64       WorkOfUintptrToFloat64
	zero_of_WorkOfUintptrToFloat64_Value uintptr
	pool_of_WorkOfUintptrToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToFloat64{}
		},
	}
)

func getWorkOfUintptrToFloat64() *WorkOfUintptrToFloat64 {
	return pool_of_WorkOfUintptrToFloat64.Get().(*WorkOfUintptrToFloat64)
}
func putWorkOfUintptrToFloat64(d *WorkOfUintptrToFloat64) {
	d.Value = zero_of_WorkOfUintptrToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToFloat64.Put(d)
}

type _UintptrToFloat64 struct{}

func (_ _UintptrToFloat64) GetWork() *WorkOfUintptrToFloat64 {
	return getWorkOfUintptrToFloat64()
}
func (__ _UintptrToFloat64) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfFloat64) *WorkOfUintptrToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToFloat64) PutWork(d *WorkOfUintptrToFloat64) {
	putWorkOfUintptrToFloat64(d)
}

func (_ _UintptrToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _UintptrToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _UintptrToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _UintptrToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _UintptrToFloat64) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToFloat64) CallAsync(ctx context.Context, work *WorkOfUintptrToFloat64, h func(ctx context.Context, arg uintptr) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToInt interface {
	Push(ctx context.Context, work *WorkOfUintptrToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfUintptrToInt struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfUintptrToIntWithContext struct {
	Context context.Context
	WorkOfUintptrToInt
}

var (
	zero_of_WorkOfUintptrToInt       WorkOfUintptrToInt
	zero_of_WorkOfUintptrToInt_Value uintptr
	pool_of_WorkOfUintptrToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToInt{}
		},
	}
)

func getWorkOfUintptrToInt() *WorkOfUintptrToInt {
	return pool_of_WorkOfUintptrToInt.Get().(*WorkOfUintptrToInt)
}
func putWorkOfUintptrToInt(d *WorkOfUintptrToInt) {
	d.Value = zero_of_WorkOfUintptrToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToInt.Put(d)
}

type _UintptrToInt struct{}

func (_ _UintptrToInt) GetWork() *WorkOfUintptrToInt {
	return getWorkOfUintptrToInt()
}
func (__ _UintptrToInt) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfInt) *WorkOfUintptrToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToInt) PutWork(d *WorkOfUintptrToInt) {
	putWorkOfUintptrToInt(d)
}

func (_ _UintptrToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _UintptrToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _UintptrToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _UintptrToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _UintptrToInt) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToInt) CallAsync(ctx context.Context, work *WorkOfUintptrToInt, h func(ctx context.Context, arg uintptr) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToInt16 interface {
	Push(ctx context.Context, work *WorkOfUintptrToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfUintptrToInt16 struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfUintptrToInt16WithContext struct {
	Context context.Context
	WorkOfUintptrToInt16
}

var (
	zero_of_WorkOfUintptrToInt16       WorkOfUintptrToInt16
	zero_of_WorkOfUintptrToInt16_Value uintptr
	pool_of_WorkOfUintptrToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToInt16{}
		},
	}
)

func getWorkOfUintptrToInt16() *WorkOfUintptrToInt16 {
	return pool_of_WorkOfUintptrToInt16.Get().(*WorkOfUintptrToInt16)
}
func putWorkOfUintptrToInt16(d *WorkOfUintptrToInt16) {
	d.Value = zero_of_WorkOfUintptrToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToInt16.Put(d)
}

type _UintptrToInt16 struct{}

func (_ _UintptrToInt16) GetWork() *WorkOfUintptrToInt16 {
	return getWorkOfUintptrToInt16()
}
func (__ _UintptrToInt16) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfInt16) *WorkOfUintptrToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToInt16) PutWork(d *WorkOfUintptrToInt16) {
	putWorkOfUintptrToInt16(d)
}

func (_ _UintptrToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _UintptrToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _UintptrToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _UintptrToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _UintptrToInt16) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToInt16) CallAsync(ctx context.Context, work *WorkOfUintptrToInt16, h func(ctx context.Context, arg uintptr) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToInt32 interface {
	Push(ctx context.Context, work *WorkOfUintptrToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfUintptrToInt32 struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfUintptrToInt32WithContext struct {
	Context context.Context
	WorkOfUintptrToInt32
}

var (
	zero_of_WorkOfUintptrToInt32       WorkOfUintptrToInt32
	zero_of_WorkOfUintptrToInt32_Value uintptr
	pool_of_WorkOfUintptrToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToInt32{}
		},
	}
)

func getWorkOfUintptrToInt32() *WorkOfUintptrToInt32 {
	return pool_of_WorkOfUintptrToInt32.Get().(*WorkOfUintptrToInt32)
}
func putWorkOfUintptrToInt32(d *WorkOfUintptrToInt32) {
	d.Value = zero_of_WorkOfUintptrToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToInt32.Put(d)
}

type _UintptrToInt32 struct{}

func (_ _UintptrToInt32) GetWork() *WorkOfUintptrToInt32 {
	return getWorkOfUintptrToInt32()
}
func (__ _UintptrToInt32) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfInt32) *WorkOfUintptrToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToInt32) PutWork(d *WorkOfUintptrToInt32) {
	putWorkOfUintptrToInt32(d)
}

func (_ _UintptrToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _UintptrToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _UintptrToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _UintptrToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _UintptrToInt32) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToInt32) CallAsync(ctx context.Context, work *WorkOfUintptrToInt32, h func(ctx context.Context, arg uintptr) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToInt64 interface {
	Push(ctx context.Context, work *WorkOfUintptrToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfUintptrToInt64 struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfUintptrToInt64WithContext struct {
	Context context.Context
	WorkOfUintptrToInt64
}

var (
	zero_of_WorkOfUintptrToInt64       WorkOfUintptrToInt64
	zero_of_WorkOfUintptrToInt64_Value uintptr
	pool_of_WorkOfUintptrToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToInt64{}
		},
	}
)

func getWorkOfUintptrToInt64() *WorkOfUintptrToInt64 {
	return pool_of_WorkOfUintptrToInt64.Get().(*WorkOfUintptrToInt64)
}
func putWorkOfUintptrToInt64(d *WorkOfUintptrToInt64) {
	d.Value = zero_of_WorkOfUintptrToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToInt64.Put(d)
}

type _UintptrToInt64 struct{}

func (_ _UintptrToInt64) GetWork() *WorkOfUintptrToInt64 {
	return getWorkOfUintptrToInt64()
}
func (__ _UintptrToInt64) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfInt64) *WorkOfUintptrToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToInt64) PutWork(d *WorkOfUintptrToInt64) {
	putWorkOfUintptrToInt64(d)
}

func (_ _UintptrToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _UintptrToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _UintptrToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _UintptrToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _UintptrToInt64) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToInt64) CallAsync(ctx context.Context, work *WorkOfUintptrToInt64, h func(ctx context.Context, arg uintptr) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToInt8 interface {
	Push(ctx context.Context, work *WorkOfUintptrToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfUintptrToInt8 struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfUintptrToInt8WithContext struct {
	Context context.Context
	WorkOfUintptrToInt8
}

var (
	zero_of_WorkOfUintptrToInt8       WorkOfUintptrToInt8
	zero_of_WorkOfUintptrToInt8_Value uintptr
	pool_of_WorkOfUintptrToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToInt8{}
		},
	}
)

func getWorkOfUintptrToInt8() *WorkOfUintptrToInt8 {
	return pool_of_WorkOfUintptrToInt8.Get().(*WorkOfUintptrToInt8)
}
func putWorkOfUintptrToInt8(d *WorkOfUintptrToInt8) {
	d.Value = zero_of_WorkOfUintptrToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToInt8.Put(d)
}

type _UintptrToInt8 struct{}

func (_ _UintptrToInt8) GetWork() *WorkOfUintptrToInt8 {
	return getWorkOfUintptrToInt8()
}
func (__ _UintptrToInt8) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfInt8) *WorkOfUintptrToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToInt8) PutWork(d *WorkOfUintptrToInt8) {
	putWorkOfUintptrToInt8(d)
}

func (_ _UintptrToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _UintptrToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _UintptrToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _UintptrToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _UintptrToInt8) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToInt8) CallAsync(ctx context.Context, work *WorkOfUintptrToInt8, h func(ctx context.Context, arg uintptr) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToRune interface {
	Push(ctx context.Context, work *WorkOfUintptrToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfUintptrToRune struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfUintptrToRuneWithContext struct {
	Context context.Context
	WorkOfUintptrToRune
}

var (
	zero_of_WorkOfUintptrToRune       WorkOfUintptrToRune
	zero_of_WorkOfUintptrToRune_Value uintptr
	pool_of_WorkOfUintptrToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToRune{}
		},
	}
)

func getWorkOfUintptrToRune() *WorkOfUintptrToRune {
	return pool_of_WorkOfUintptrToRune.Get().(*WorkOfUintptrToRune)
}
func putWorkOfUintptrToRune(d *WorkOfUintptrToRune) {
	d.Value = zero_of_WorkOfUintptrToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToRune.Put(d)
}

type _UintptrToRune struct{}

func (_ _UintptrToRune) GetWork() *WorkOfUintptrToRune {
	return getWorkOfUintptrToRune()
}
func (__ _UintptrToRune) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfRune) *WorkOfUintptrToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToRune) PutWork(d *WorkOfUintptrToRune) {
	putWorkOfUintptrToRune(d)
}

func (_ _UintptrToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _UintptrToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _UintptrToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _UintptrToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _UintptrToRune) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToRune) CallAsync(ctx context.Context, work *WorkOfUintptrToRune, h func(ctx context.Context, arg uintptr) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToString interface {
	Push(ctx context.Context, work *WorkOfUintptrToString, returnCh chan<- *ReturnOfString)
}

type WorkOfUintptrToString struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfString
}

type WorkOfUintptrToStringWithContext struct {
	Context context.Context
	WorkOfUintptrToString
}

var (
	zero_of_WorkOfUintptrToString       WorkOfUintptrToString
	zero_of_WorkOfUintptrToString_Value uintptr
	pool_of_WorkOfUintptrToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToString{}
		},
	}
)

func getWorkOfUintptrToString() *WorkOfUintptrToString {
	return pool_of_WorkOfUintptrToString.Get().(*WorkOfUintptrToString)
}
func putWorkOfUintptrToString(d *WorkOfUintptrToString) {
	d.Value = zero_of_WorkOfUintptrToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToString.Put(d)
}

type _UintptrToString struct{}

func (_ _UintptrToString) GetWork() *WorkOfUintptrToString {
	return getWorkOfUintptrToString()
}
func (__ _UintptrToString) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfString) *WorkOfUintptrToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToString) PutWork(d *WorkOfUintptrToString) {
	putWorkOfUintptrToString(d)
}

func (_ _UintptrToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _UintptrToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _UintptrToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _UintptrToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _UintptrToString) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToString) CallAsync(ctx context.Context, work *WorkOfUintptrToString, h func(ctx context.Context, arg uintptr) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToUint interface {
	Push(ctx context.Context, work *WorkOfUintptrToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfUintptrToUint struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfUintptrToUintWithContext struct {
	Context context.Context
	WorkOfUintptrToUint
}

var (
	zero_of_WorkOfUintptrToUint       WorkOfUintptrToUint
	zero_of_WorkOfUintptrToUint_Value uintptr
	pool_of_WorkOfUintptrToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToUint{}
		},
	}
)

func getWorkOfUintptrToUint() *WorkOfUintptrToUint {
	return pool_of_WorkOfUintptrToUint.Get().(*WorkOfUintptrToUint)
}
func putWorkOfUintptrToUint(d *WorkOfUintptrToUint) {
	d.Value = zero_of_WorkOfUintptrToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToUint.Put(d)
}

type _UintptrToUint struct{}

func (_ _UintptrToUint) GetWork() *WorkOfUintptrToUint {
	return getWorkOfUintptrToUint()
}
func (__ _UintptrToUint) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfUint) *WorkOfUintptrToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToUint) PutWork(d *WorkOfUintptrToUint) {
	putWorkOfUintptrToUint(d)
}

func (_ _UintptrToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _UintptrToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _UintptrToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _UintptrToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _UintptrToUint) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToUint) CallAsync(ctx context.Context, work *WorkOfUintptrToUint, h func(ctx context.Context, arg uintptr) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToUint16 interface {
	Push(ctx context.Context, work *WorkOfUintptrToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfUintptrToUint16 struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfUintptrToUint16WithContext struct {
	Context context.Context
	WorkOfUintptrToUint16
}

var (
	zero_of_WorkOfUintptrToUint16       WorkOfUintptrToUint16
	zero_of_WorkOfUintptrToUint16_Value uintptr
	pool_of_WorkOfUintptrToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToUint16{}
		},
	}
)

func getWorkOfUintptrToUint16() *WorkOfUintptrToUint16 {
	return pool_of_WorkOfUintptrToUint16.Get().(*WorkOfUintptrToUint16)
}
func putWorkOfUintptrToUint16(d *WorkOfUintptrToUint16) {
	d.Value = zero_of_WorkOfUintptrToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToUint16.Put(d)
}

type _UintptrToUint16 struct{}

func (_ _UintptrToUint16) GetWork() *WorkOfUintptrToUint16 {
	return getWorkOfUintptrToUint16()
}
func (__ _UintptrToUint16) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfUint16) *WorkOfUintptrToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToUint16) PutWork(d *WorkOfUintptrToUint16) {
	putWorkOfUintptrToUint16(d)
}

func (_ _UintptrToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _UintptrToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _UintptrToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _UintptrToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _UintptrToUint16) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToUint16) CallAsync(ctx context.Context, work *WorkOfUintptrToUint16, h func(ctx context.Context, arg uintptr) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToUint32 interface {
	Push(ctx context.Context, work *WorkOfUintptrToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfUintptrToUint32 struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfUintptrToUint32WithContext struct {
	Context context.Context
	WorkOfUintptrToUint32
}

var (
	zero_of_WorkOfUintptrToUint32       WorkOfUintptrToUint32
	zero_of_WorkOfUintptrToUint32_Value uintptr
	pool_of_WorkOfUintptrToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToUint32{}
		},
	}
)

func getWorkOfUintptrToUint32() *WorkOfUintptrToUint32 {
	return pool_of_WorkOfUintptrToUint32.Get().(*WorkOfUintptrToUint32)
}
func putWorkOfUintptrToUint32(d *WorkOfUintptrToUint32) {
	d.Value = zero_of_WorkOfUintptrToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToUint32.Put(d)
}

type _UintptrToUint32 struct{}

func (_ _UintptrToUint32) GetWork() *WorkOfUintptrToUint32 {
	return getWorkOfUintptrToUint32()
}
func (__ _UintptrToUint32) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfUint32) *WorkOfUintptrToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToUint32) PutWork(d *WorkOfUintptrToUint32) {
	putWorkOfUintptrToUint32(d)
}

func (_ _UintptrToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _UintptrToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _UintptrToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _UintptrToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _UintptrToUint32) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToUint32) CallAsync(ctx context.Context, work *WorkOfUintptrToUint32, h func(ctx context.Context, arg uintptr) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToUint64 interface {
	Push(ctx context.Context, work *WorkOfUintptrToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfUintptrToUint64 struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfUintptrToUint64WithContext struct {
	Context context.Context
	WorkOfUintptrToUint64
}

var (
	zero_of_WorkOfUintptrToUint64       WorkOfUintptrToUint64
	zero_of_WorkOfUintptrToUint64_Value uintptr
	pool_of_WorkOfUintptrToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToUint64{}
		},
	}
)

func getWorkOfUintptrToUint64() *WorkOfUintptrToUint64 {
	return pool_of_WorkOfUintptrToUint64.Get().(*WorkOfUintptrToUint64)
}
func putWorkOfUintptrToUint64(d *WorkOfUintptrToUint64) {
	d.Value = zero_of_WorkOfUintptrToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToUint64.Put(d)
}

type _UintptrToUint64 struct{}

func (_ _UintptrToUint64) GetWork() *WorkOfUintptrToUint64 {
	return getWorkOfUintptrToUint64()
}
func (__ _UintptrToUint64) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfUint64) *WorkOfUintptrToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToUint64) PutWork(d *WorkOfUintptrToUint64) {
	putWorkOfUintptrToUint64(d)
}

func (_ _UintptrToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _UintptrToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _UintptrToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _UintptrToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _UintptrToUint64) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToUint64) CallAsync(ctx context.Context, work *WorkOfUintptrToUint64, h func(ctx context.Context, arg uintptr) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToUint8 interface {
	Push(ctx context.Context, work *WorkOfUintptrToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfUintptrToUint8 struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfUintptrToUint8WithContext struct {
	Context context.Context
	WorkOfUintptrToUint8
}

var (
	zero_of_WorkOfUintptrToUint8       WorkOfUintptrToUint8
	zero_of_WorkOfUintptrToUint8_Value uintptr
	pool_of_WorkOfUintptrToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToUint8{}
		},
	}
)

func getWorkOfUintptrToUint8() *WorkOfUintptrToUint8 {
	return pool_of_WorkOfUintptrToUint8.Get().(*WorkOfUintptrToUint8)
}
func putWorkOfUintptrToUint8(d *WorkOfUintptrToUint8) {
	d.Value = zero_of_WorkOfUintptrToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToUint8.Put(d)
}

type _UintptrToUint8 struct{}

func (_ _UintptrToUint8) GetWork() *WorkOfUintptrToUint8 {
	return getWorkOfUintptrToUint8()
}
func (__ _UintptrToUint8) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfUint8) *WorkOfUintptrToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToUint8) PutWork(d *WorkOfUintptrToUint8) {
	putWorkOfUintptrToUint8(d)
}

func (_ _UintptrToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _UintptrToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _UintptrToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _UintptrToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _UintptrToUint8) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToUint8) CallAsync(ctx context.Context, work *WorkOfUintptrToUint8, h func(ctx context.Context, arg uintptr) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToUintptr interface {
	Push(ctx context.Context, work *WorkOfUintptrToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfUintptrToUintptr struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfUintptrToUintptrWithContext struct {
	Context context.Context
	WorkOfUintptrToUintptr
}

var (
	zero_of_WorkOfUintptrToUintptr       WorkOfUintptrToUintptr
	zero_of_WorkOfUintptrToUintptr_Value uintptr
	pool_of_WorkOfUintptrToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToUintptr{}
		},
	}
)

func getWorkOfUintptrToUintptr() *WorkOfUintptrToUintptr {
	return pool_of_WorkOfUintptrToUintptr.Get().(*WorkOfUintptrToUintptr)
}
func putWorkOfUintptrToUintptr(d *WorkOfUintptrToUintptr) {
	d.Value = zero_of_WorkOfUintptrToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToUintptr.Put(d)
}

type _UintptrToUintptr struct{}

func (_ _UintptrToUintptr) GetWork() *WorkOfUintptrToUintptr {
	return getWorkOfUintptrToUintptr()
}
func (__ _UintptrToUintptr) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfUintptr) *WorkOfUintptrToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToUintptr) PutWork(d *WorkOfUintptrToUintptr) {
	putWorkOfUintptrToUintptr(d)
}

func (_ _UintptrToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _UintptrToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _UintptrToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _UintptrToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _UintptrToUintptr) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToUintptr) CallAsync(ctx context.Context, work *WorkOfUintptrToUintptr, h func(ctx context.Context, arg uintptr) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToBytes interface {
	Push(ctx context.Context, work *WorkOfUintptrToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfUintptrToBytes struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfUintptrToBytesWithContext struct {
	Context context.Context
	WorkOfUintptrToBytes
}

var (
	zero_of_WorkOfUintptrToBytes       WorkOfUintptrToBytes
	zero_of_WorkOfUintptrToBytes_Value uintptr
	pool_of_WorkOfUintptrToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToBytes{}
		},
	}
)

func getWorkOfUintptrToBytes() *WorkOfUintptrToBytes {
	return pool_of_WorkOfUintptrToBytes.Get().(*WorkOfUintptrToBytes)
}
func putWorkOfUintptrToBytes(d *WorkOfUintptrToBytes) {
	d.Value = zero_of_WorkOfUintptrToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToBytes.Put(d)
}

type _UintptrToBytes struct{}

func (_ _UintptrToBytes) GetWork() *WorkOfUintptrToBytes {
	return getWorkOfUintptrToBytes()
}
func (__ _UintptrToBytes) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfBytes) *WorkOfUintptrToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToBytes) PutWork(d *WorkOfUintptrToBytes) {
	putWorkOfUintptrToBytes(d)
}

func (_ _UintptrToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _UintptrToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _UintptrToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _UintptrToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _UintptrToBytes) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToBytes) CallAsync(ctx context.Context, work *WorkOfUintptrToBytes, h func(ctx context.Context, arg uintptr) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfUintptrToInterface interface {
	Push(ctx context.Context, work *WorkOfUintptrToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfUintptrToInterface struct {
	Value    uintptr
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfUintptrToInterfaceWithContext struct {
	Context context.Context
	WorkOfUintptrToInterface
}

var (
	zero_of_WorkOfUintptrToInterface       WorkOfUintptrToInterface
	zero_of_WorkOfUintptrToInterface_Value uintptr
	pool_of_WorkOfUintptrToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfUintptrToInterface{}
		},
	}
)

func getWorkOfUintptrToInterface() *WorkOfUintptrToInterface {
	return pool_of_WorkOfUintptrToInterface.Get().(*WorkOfUintptrToInterface)
}
func putWorkOfUintptrToInterface(d *WorkOfUintptrToInterface) {
	d.Value = zero_of_WorkOfUintptrToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfUintptrToInterface.Put(d)
}

type _UintptrToInterface struct{}

func (_ _UintptrToInterface) GetWork() *WorkOfUintptrToInterface {
	return getWorkOfUintptrToInterface()
}
func (__ _UintptrToInterface) GetWorkWith(value uintptr, returnCh chan<- *ReturnOfInterface) *WorkOfUintptrToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _UintptrToInterface) PutWork(d *WorkOfUintptrToInterface) {
	putWorkOfUintptrToInterface(d)
}

func (_ _UintptrToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _UintptrToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _UintptrToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _UintptrToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _UintptrToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _UintptrToInterface) CallSync(ctx context.Context, value uintptr, push func(ctx context.Context, work *WorkOfUintptrToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _UintptrToInterface) CallAsync(ctx context.Context, work *WorkOfUintptrToInterface, h func(ctx context.Context, arg uintptr) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToBool interface {
	Push(ctx context.Context, work *WorkOfBytesToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfBytesToBool struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfBytesToBoolWithContext struct {
	Context context.Context
	WorkOfBytesToBool
}

var (
	zero_of_WorkOfBytesToBool       WorkOfBytesToBool
	zero_of_WorkOfBytesToBool_Value Bytes
	pool_of_WorkOfBytesToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToBool{}
		},
	}
)

func getWorkOfBytesToBool() *WorkOfBytesToBool {
	return pool_of_WorkOfBytesToBool.Get().(*WorkOfBytesToBool)
}
func putWorkOfBytesToBool(d *WorkOfBytesToBool) {
	d.Value = zero_of_WorkOfBytesToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToBool.Put(d)
}

type _BytesToBool struct{}

func (_ _BytesToBool) GetWork() *WorkOfBytesToBool {
	return getWorkOfBytesToBool()
}
func (__ _BytesToBool) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfBool) *WorkOfBytesToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToBool) PutWork(d *WorkOfBytesToBool) {
	putWorkOfBytesToBool(d)
}

func (_ _BytesToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _BytesToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _BytesToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _BytesToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _BytesToBool) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToBool) CallAsync(ctx context.Context, work *WorkOfBytesToBool, h func(ctx context.Context, arg Bytes) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToByte interface {
	Push(ctx context.Context, work *WorkOfBytesToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfBytesToByte struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfBytesToByteWithContext struct {
	Context context.Context
	WorkOfBytesToByte
}

var (
	zero_of_WorkOfBytesToByte       WorkOfBytesToByte
	zero_of_WorkOfBytesToByte_Value Bytes
	pool_of_WorkOfBytesToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToByte{}
		},
	}
)

func getWorkOfBytesToByte() *WorkOfBytesToByte {
	return pool_of_WorkOfBytesToByte.Get().(*WorkOfBytesToByte)
}
func putWorkOfBytesToByte(d *WorkOfBytesToByte) {
	d.Value = zero_of_WorkOfBytesToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToByte.Put(d)
}

type _BytesToByte struct{}

func (_ _BytesToByte) GetWork() *WorkOfBytesToByte {
	return getWorkOfBytesToByte()
}
func (__ _BytesToByte) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfByte) *WorkOfBytesToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToByte) PutWork(d *WorkOfBytesToByte) {
	putWorkOfBytesToByte(d)
}

func (_ _BytesToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _BytesToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _BytesToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _BytesToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _BytesToByte) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToByte) CallAsync(ctx context.Context, work *WorkOfBytesToByte, h func(ctx context.Context, arg Bytes) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToComplex128 interface {
	Push(ctx context.Context, work *WorkOfBytesToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfBytesToComplex128 struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfBytesToComplex128WithContext struct {
	Context context.Context
	WorkOfBytesToComplex128
}

var (
	zero_of_WorkOfBytesToComplex128       WorkOfBytesToComplex128
	zero_of_WorkOfBytesToComplex128_Value Bytes
	pool_of_WorkOfBytesToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToComplex128{}
		},
	}
)

func getWorkOfBytesToComplex128() *WorkOfBytesToComplex128 {
	return pool_of_WorkOfBytesToComplex128.Get().(*WorkOfBytesToComplex128)
}
func putWorkOfBytesToComplex128(d *WorkOfBytesToComplex128) {
	d.Value = zero_of_WorkOfBytesToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToComplex128.Put(d)
}

type _BytesToComplex128 struct{}

func (_ _BytesToComplex128) GetWork() *WorkOfBytesToComplex128 {
	return getWorkOfBytesToComplex128()
}
func (__ _BytesToComplex128) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfComplex128) *WorkOfBytesToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToComplex128) PutWork(d *WorkOfBytesToComplex128) {
	putWorkOfBytesToComplex128(d)
}

func (_ _BytesToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _BytesToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _BytesToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _BytesToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _BytesToComplex128) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToComplex128) CallAsync(ctx context.Context, work *WorkOfBytesToComplex128, h func(ctx context.Context, arg Bytes) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToComplex64 interface {
	Push(ctx context.Context, work *WorkOfBytesToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfBytesToComplex64 struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfBytesToComplex64WithContext struct {
	Context context.Context
	WorkOfBytesToComplex64
}

var (
	zero_of_WorkOfBytesToComplex64       WorkOfBytesToComplex64
	zero_of_WorkOfBytesToComplex64_Value Bytes
	pool_of_WorkOfBytesToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToComplex64{}
		},
	}
)

func getWorkOfBytesToComplex64() *WorkOfBytesToComplex64 {
	return pool_of_WorkOfBytesToComplex64.Get().(*WorkOfBytesToComplex64)
}
func putWorkOfBytesToComplex64(d *WorkOfBytesToComplex64) {
	d.Value = zero_of_WorkOfBytesToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToComplex64.Put(d)
}

type _BytesToComplex64 struct{}

func (_ _BytesToComplex64) GetWork() *WorkOfBytesToComplex64 {
	return getWorkOfBytesToComplex64()
}
func (__ _BytesToComplex64) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfComplex64) *WorkOfBytesToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToComplex64) PutWork(d *WorkOfBytesToComplex64) {
	putWorkOfBytesToComplex64(d)
}

func (_ _BytesToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _BytesToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _BytesToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _BytesToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _BytesToComplex64) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToComplex64) CallAsync(ctx context.Context, work *WorkOfBytesToComplex64, h func(ctx context.Context, arg Bytes) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToError interface {
	Push(ctx context.Context, work *WorkOfBytesToError, returnCh chan<- *ReturnOfError)
}

type WorkOfBytesToError struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfError
}

type WorkOfBytesToErrorWithContext struct {
	Context context.Context
	WorkOfBytesToError
}

var (
	zero_of_WorkOfBytesToError       WorkOfBytesToError
	zero_of_WorkOfBytesToError_Value Bytes
	pool_of_WorkOfBytesToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToError{}
		},
	}
)

func getWorkOfBytesToError() *WorkOfBytesToError {
	return pool_of_WorkOfBytesToError.Get().(*WorkOfBytesToError)
}
func putWorkOfBytesToError(d *WorkOfBytesToError) {
	d.Value = zero_of_WorkOfBytesToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToError.Put(d)
}

type _BytesToError struct{}

func (_ _BytesToError) GetWork() *WorkOfBytesToError {
	return getWorkOfBytesToError()
}
func (__ _BytesToError) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfError) *WorkOfBytesToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToError) PutWork(d *WorkOfBytesToError) {
	putWorkOfBytesToError(d)
}

func (_ _BytesToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _BytesToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _BytesToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _BytesToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _BytesToError) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToError) CallAsync(ctx context.Context, work *WorkOfBytesToError, h func(ctx context.Context, arg Bytes) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToFloat32 interface {
	Push(ctx context.Context, work *WorkOfBytesToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfBytesToFloat32 struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfBytesToFloat32WithContext struct {
	Context context.Context
	WorkOfBytesToFloat32
}

var (
	zero_of_WorkOfBytesToFloat32       WorkOfBytesToFloat32
	zero_of_WorkOfBytesToFloat32_Value Bytes
	pool_of_WorkOfBytesToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToFloat32{}
		},
	}
)

func getWorkOfBytesToFloat32() *WorkOfBytesToFloat32 {
	return pool_of_WorkOfBytesToFloat32.Get().(*WorkOfBytesToFloat32)
}
func putWorkOfBytesToFloat32(d *WorkOfBytesToFloat32) {
	d.Value = zero_of_WorkOfBytesToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToFloat32.Put(d)
}

type _BytesToFloat32 struct{}

func (_ _BytesToFloat32) GetWork() *WorkOfBytesToFloat32 {
	return getWorkOfBytesToFloat32()
}
func (__ _BytesToFloat32) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfFloat32) *WorkOfBytesToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToFloat32) PutWork(d *WorkOfBytesToFloat32) {
	putWorkOfBytesToFloat32(d)
}

func (_ _BytesToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _BytesToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _BytesToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _BytesToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _BytesToFloat32) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToFloat32) CallAsync(ctx context.Context, work *WorkOfBytesToFloat32, h func(ctx context.Context, arg Bytes) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToFloat64 interface {
	Push(ctx context.Context, work *WorkOfBytesToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfBytesToFloat64 struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfBytesToFloat64WithContext struct {
	Context context.Context
	WorkOfBytesToFloat64
}

var (
	zero_of_WorkOfBytesToFloat64       WorkOfBytesToFloat64
	zero_of_WorkOfBytesToFloat64_Value Bytes
	pool_of_WorkOfBytesToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToFloat64{}
		},
	}
)

func getWorkOfBytesToFloat64() *WorkOfBytesToFloat64 {
	return pool_of_WorkOfBytesToFloat64.Get().(*WorkOfBytesToFloat64)
}
func putWorkOfBytesToFloat64(d *WorkOfBytesToFloat64) {
	d.Value = zero_of_WorkOfBytesToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToFloat64.Put(d)
}

type _BytesToFloat64 struct{}

func (_ _BytesToFloat64) GetWork() *WorkOfBytesToFloat64 {
	return getWorkOfBytesToFloat64()
}
func (__ _BytesToFloat64) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfFloat64) *WorkOfBytesToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToFloat64) PutWork(d *WorkOfBytesToFloat64) {
	putWorkOfBytesToFloat64(d)
}

func (_ _BytesToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _BytesToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _BytesToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _BytesToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _BytesToFloat64) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToFloat64) CallAsync(ctx context.Context, work *WorkOfBytesToFloat64, h func(ctx context.Context, arg Bytes) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToInt interface {
	Push(ctx context.Context, work *WorkOfBytesToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfBytesToInt struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfBytesToIntWithContext struct {
	Context context.Context
	WorkOfBytesToInt
}

var (
	zero_of_WorkOfBytesToInt       WorkOfBytesToInt
	zero_of_WorkOfBytesToInt_Value Bytes
	pool_of_WorkOfBytesToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToInt{}
		},
	}
)

func getWorkOfBytesToInt() *WorkOfBytesToInt {
	return pool_of_WorkOfBytesToInt.Get().(*WorkOfBytesToInt)
}
func putWorkOfBytesToInt(d *WorkOfBytesToInt) {
	d.Value = zero_of_WorkOfBytesToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToInt.Put(d)
}

type _BytesToInt struct{}

func (_ _BytesToInt) GetWork() *WorkOfBytesToInt {
	return getWorkOfBytesToInt()
}
func (__ _BytesToInt) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfInt) *WorkOfBytesToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToInt) PutWork(d *WorkOfBytesToInt) {
	putWorkOfBytesToInt(d)
}

func (_ _BytesToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _BytesToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _BytesToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _BytesToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _BytesToInt) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToInt) CallAsync(ctx context.Context, work *WorkOfBytesToInt, h func(ctx context.Context, arg Bytes) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToInt16 interface {
	Push(ctx context.Context, work *WorkOfBytesToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfBytesToInt16 struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfBytesToInt16WithContext struct {
	Context context.Context
	WorkOfBytesToInt16
}

var (
	zero_of_WorkOfBytesToInt16       WorkOfBytesToInt16
	zero_of_WorkOfBytesToInt16_Value Bytes
	pool_of_WorkOfBytesToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToInt16{}
		},
	}
)

func getWorkOfBytesToInt16() *WorkOfBytesToInt16 {
	return pool_of_WorkOfBytesToInt16.Get().(*WorkOfBytesToInt16)
}
func putWorkOfBytesToInt16(d *WorkOfBytesToInt16) {
	d.Value = zero_of_WorkOfBytesToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToInt16.Put(d)
}

type _BytesToInt16 struct{}

func (_ _BytesToInt16) GetWork() *WorkOfBytesToInt16 {
	return getWorkOfBytesToInt16()
}
func (__ _BytesToInt16) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfInt16) *WorkOfBytesToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToInt16) PutWork(d *WorkOfBytesToInt16) {
	putWorkOfBytesToInt16(d)
}

func (_ _BytesToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _BytesToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _BytesToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _BytesToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _BytesToInt16) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToInt16) CallAsync(ctx context.Context, work *WorkOfBytesToInt16, h func(ctx context.Context, arg Bytes) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToInt32 interface {
	Push(ctx context.Context, work *WorkOfBytesToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfBytesToInt32 struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfBytesToInt32WithContext struct {
	Context context.Context
	WorkOfBytesToInt32
}

var (
	zero_of_WorkOfBytesToInt32       WorkOfBytesToInt32
	zero_of_WorkOfBytesToInt32_Value Bytes
	pool_of_WorkOfBytesToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToInt32{}
		},
	}
)

func getWorkOfBytesToInt32() *WorkOfBytesToInt32 {
	return pool_of_WorkOfBytesToInt32.Get().(*WorkOfBytesToInt32)
}
func putWorkOfBytesToInt32(d *WorkOfBytesToInt32) {
	d.Value = zero_of_WorkOfBytesToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToInt32.Put(d)
}

type _BytesToInt32 struct{}

func (_ _BytesToInt32) GetWork() *WorkOfBytesToInt32 {
	return getWorkOfBytesToInt32()
}
func (__ _BytesToInt32) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfInt32) *WorkOfBytesToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToInt32) PutWork(d *WorkOfBytesToInt32) {
	putWorkOfBytesToInt32(d)
}

func (_ _BytesToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _BytesToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _BytesToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _BytesToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _BytesToInt32) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToInt32) CallAsync(ctx context.Context, work *WorkOfBytesToInt32, h func(ctx context.Context, arg Bytes) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToInt64 interface {
	Push(ctx context.Context, work *WorkOfBytesToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfBytesToInt64 struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfBytesToInt64WithContext struct {
	Context context.Context
	WorkOfBytesToInt64
}

var (
	zero_of_WorkOfBytesToInt64       WorkOfBytesToInt64
	zero_of_WorkOfBytesToInt64_Value Bytes
	pool_of_WorkOfBytesToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToInt64{}
		},
	}
)

func getWorkOfBytesToInt64() *WorkOfBytesToInt64 {
	return pool_of_WorkOfBytesToInt64.Get().(*WorkOfBytesToInt64)
}
func putWorkOfBytesToInt64(d *WorkOfBytesToInt64) {
	d.Value = zero_of_WorkOfBytesToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToInt64.Put(d)
}

type _BytesToInt64 struct{}

func (_ _BytesToInt64) GetWork() *WorkOfBytesToInt64 {
	return getWorkOfBytesToInt64()
}
func (__ _BytesToInt64) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfInt64) *WorkOfBytesToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToInt64) PutWork(d *WorkOfBytesToInt64) {
	putWorkOfBytesToInt64(d)
}

func (_ _BytesToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _BytesToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _BytesToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _BytesToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _BytesToInt64) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToInt64) CallAsync(ctx context.Context, work *WorkOfBytesToInt64, h func(ctx context.Context, arg Bytes) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToInt8 interface {
	Push(ctx context.Context, work *WorkOfBytesToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfBytesToInt8 struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfBytesToInt8WithContext struct {
	Context context.Context
	WorkOfBytesToInt8
}

var (
	zero_of_WorkOfBytesToInt8       WorkOfBytesToInt8
	zero_of_WorkOfBytesToInt8_Value Bytes
	pool_of_WorkOfBytesToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToInt8{}
		},
	}
)

func getWorkOfBytesToInt8() *WorkOfBytesToInt8 {
	return pool_of_WorkOfBytesToInt8.Get().(*WorkOfBytesToInt8)
}
func putWorkOfBytesToInt8(d *WorkOfBytesToInt8) {
	d.Value = zero_of_WorkOfBytesToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToInt8.Put(d)
}

type _BytesToInt8 struct{}

func (_ _BytesToInt8) GetWork() *WorkOfBytesToInt8 {
	return getWorkOfBytesToInt8()
}
func (__ _BytesToInt8) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfInt8) *WorkOfBytesToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToInt8) PutWork(d *WorkOfBytesToInt8) {
	putWorkOfBytesToInt8(d)
}

func (_ _BytesToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _BytesToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _BytesToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _BytesToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _BytesToInt8) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToInt8) CallAsync(ctx context.Context, work *WorkOfBytesToInt8, h func(ctx context.Context, arg Bytes) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToRune interface {
	Push(ctx context.Context, work *WorkOfBytesToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfBytesToRune struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfBytesToRuneWithContext struct {
	Context context.Context
	WorkOfBytesToRune
}

var (
	zero_of_WorkOfBytesToRune       WorkOfBytesToRune
	zero_of_WorkOfBytesToRune_Value Bytes
	pool_of_WorkOfBytesToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToRune{}
		},
	}
)

func getWorkOfBytesToRune() *WorkOfBytesToRune {
	return pool_of_WorkOfBytesToRune.Get().(*WorkOfBytesToRune)
}
func putWorkOfBytesToRune(d *WorkOfBytesToRune) {
	d.Value = zero_of_WorkOfBytesToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToRune.Put(d)
}

type _BytesToRune struct{}

func (_ _BytesToRune) GetWork() *WorkOfBytesToRune {
	return getWorkOfBytesToRune()
}
func (__ _BytesToRune) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfRune) *WorkOfBytesToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToRune) PutWork(d *WorkOfBytesToRune) {
	putWorkOfBytesToRune(d)
}

func (_ _BytesToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _BytesToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _BytesToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _BytesToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _BytesToRune) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToRune) CallAsync(ctx context.Context, work *WorkOfBytesToRune, h func(ctx context.Context, arg Bytes) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToString interface {
	Push(ctx context.Context, work *WorkOfBytesToString, returnCh chan<- *ReturnOfString)
}

type WorkOfBytesToString struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfString
}

type WorkOfBytesToStringWithContext struct {
	Context context.Context
	WorkOfBytesToString
}

var (
	zero_of_WorkOfBytesToString       WorkOfBytesToString
	zero_of_WorkOfBytesToString_Value Bytes
	pool_of_WorkOfBytesToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToString{}
		},
	}
)

func getWorkOfBytesToString() *WorkOfBytesToString {
	return pool_of_WorkOfBytesToString.Get().(*WorkOfBytesToString)
}
func putWorkOfBytesToString(d *WorkOfBytesToString) {
	d.Value = zero_of_WorkOfBytesToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToString.Put(d)
}

type _BytesToString struct{}

func (_ _BytesToString) GetWork() *WorkOfBytesToString {
	return getWorkOfBytesToString()
}
func (__ _BytesToString) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfString) *WorkOfBytesToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToString) PutWork(d *WorkOfBytesToString) {
	putWorkOfBytesToString(d)
}

func (_ _BytesToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _BytesToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _BytesToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _BytesToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _BytesToString) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToString) CallAsync(ctx context.Context, work *WorkOfBytesToString, h func(ctx context.Context, arg Bytes) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToUint interface {
	Push(ctx context.Context, work *WorkOfBytesToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfBytesToUint struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfBytesToUintWithContext struct {
	Context context.Context
	WorkOfBytesToUint
}

var (
	zero_of_WorkOfBytesToUint       WorkOfBytesToUint
	zero_of_WorkOfBytesToUint_Value Bytes
	pool_of_WorkOfBytesToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToUint{}
		},
	}
)

func getWorkOfBytesToUint() *WorkOfBytesToUint {
	return pool_of_WorkOfBytesToUint.Get().(*WorkOfBytesToUint)
}
func putWorkOfBytesToUint(d *WorkOfBytesToUint) {
	d.Value = zero_of_WorkOfBytesToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToUint.Put(d)
}

type _BytesToUint struct{}

func (_ _BytesToUint) GetWork() *WorkOfBytesToUint {
	return getWorkOfBytesToUint()
}
func (__ _BytesToUint) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfUint) *WorkOfBytesToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToUint) PutWork(d *WorkOfBytesToUint) {
	putWorkOfBytesToUint(d)
}

func (_ _BytesToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _BytesToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _BytesToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _BytesToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _BytesToUint) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToUint) CallAsync(ctx context.Context, work *WorkOfBytesToUint, h func(ctx context.Context, arg Bytes) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToUint16 interface {
	Push(ctx context.Context, work *WorkOfBytesToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfBytesToUint16 struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfBytesToUint16WithContext struct {
	Context context.Context
	WorkOfBytesToUint16
}

var (
	zero_of_WorkOfBytesToUint16       WorkOfBytesToUint16
	zero_of_WorkOfBytesToUint16_Value Bytes
	pool_of_WorkOfBytesToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToUint16{}
		},
	}
)

func getWorkOfBytesToUint16() *WorkOfBytesToUint16 {
	return pool_of_WorkOfBytesToUint16.Get().(*WorkOfBytesToUint16)
}
func putWorkOfBytesToUint16(d *WorkOfBytesToUint16) {
	d.Value = zero_of_WorkOfBytesToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToUint16.Put(d)
}

type _BytesToUint16 struct{}

func (_ _BytesToUint16) GetWork() *WorkOfBytesToUint16 {
	return getWorkOfBytesToUint16()
}
func (__ _BytesToUint16) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfUint16) *WorkOfBytesToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToUint16) PutWork(d *WorkOfBytesToUint16) {
	putWorkOfBytesToUint16(d)
}

func (_ _BytesToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _BytesToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _BytesToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _BytesToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _BytesToUint16) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToUint16) CallAsync(ctx context.Context, work *WorkOfBytesToUint16, h func(ctx context.Context, arg Bytes) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToUint32 interface {
	Push(ctx context.Context, work *WorkOfBytesToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfBytesToUint32 struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfBytesToUint32WithContext struct {
	Context context.Context
	WorkOfBytesToUint32
}

var (
	zero_of_WorkOfBytesToUint32       WorkOfBytesToUint32
	zero_of_WorkOfBytesToUint32_Value Bytes
	pool_of_WorkOfBytesToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToUint32{}
		},
	}
)

func getWorkOfBytesToUint32() *WorkOfBytesToUint32 {
	return pool_of_WorkOfBytesToUint32.Get().(*WorkOfBytesToUint32)
}
func putWorkOfBytesToUint32(d *WorkOfBytesToUint32) {
	d.Value = zero_of_WorkOfBytesToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToUint32.Put(d)
}

type _BytesToUint32 struct{}

func (_ _BytesToUint32) GetWork() *WorkOfBytesToUint32 {
	return getWorkOfBytesToUint32()
}
func (__ _BytesToUint32) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfUint32) *WorkOfBytesToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToUint32) PutWork(d *WorkOfBytesToUint32) {
	putWorkOfBytesToUint32(d)
}

func (_ _BytesToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _BytesToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _BytesToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _BytesToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _BytesToUint32) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToUint32) CallAsync(ctx context.Context, work *WorkOfBytesToUint32, h func(ctx context.Context, arg Bytes) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToUint64 interface {
	Push(ctx context.Context, work *WorkOfBytesToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfBytesToUint64 struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfBytesToUint64WithContext struct {
	Context context.Context
	WorkOfBytesToUint64
}

var (
	zero_of_WorkOfBytesToUint64       WorkOfBytesToUint64
	zero_of_WorkOfBytesToUint64_Value Bytes
	pool_of_WorkOfBytesToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToUint64{}
		},
	}
)

func getWorkOfBytesToUint64() *WorkOfBytesToUint64 {
	return pool_of_WorkOfBytesToUint64.Get().(*WorkOfBytesToUint64)
}
func putWorkOfBytesToUint64(d *WorkOfBytesToUint64) {
	d.Value = zero_of_WorkOfBytesToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToUint64.Put(d)
}

type _BytesToUint64 struct{}

func (_ _BytesToUint64) GetWork() *WorkOfBytesToUint64 {
	return getWorkOfBytesToUint64()
}
func (__ _BytesToUint64) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfUint64) *WorkOfBytesToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToUint64) PutWork(d *WorkOfBytesToUint64) {
	putWorkOfBytesToUint64(d)
}

func (_ _BytesToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _BytesToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _BytesToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _BytesToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _BytesToUint64) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToUint64) CallAsync(ctx context.Context, work *WorkOfBytesToUint64, h func(ctx context.Context, arg Bytes) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToUint8 interface {
	Push(ctx context.Context, work *WorkOfBytesToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfBytesToUint8 struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfBytesToUint8WithContext struct {
	Context context.Context
	WorkOfBytesToUint8
}

var (
	zero_of_WorkOfBytesToUint8       WorkOfBytesToUint8
	zero_of_WorkOfBytesToUint8_Value Bytes
	pool_of_WorkOfBytesToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToUint8{}
		},
	}
)

func getWorkOfBytesToUint8() *WorkOfBytesToUint8 {
	return pool_of_WorkOfBytesToUint8.Get().(*WorkOfBytesToUint8)
}
func putWorkOfBytesToUint8(d *WorkOfBytesToUint8) {
	d.Value = zero_of_WorkOfBytesToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToUint8.Put(d)
}

type _BytesToUint8 struct{}

func (_ _BytesToUint8) GetWork() *WorkOfBytesToUint8 {
	return getWorkOfBytesToUint8()
}
func (__ _BytesToUint8) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfUint8) *WorkOfBytesToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToUint8) PutWork(d *WorkOfBytesToUint8) {
	putWorkOfBytesToUint8(d)
}

func (_ _BytesToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _BytesToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _BytesToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _BytesToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _BytesToUint8) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToUint8) CallAsync(ctx context.Context, work *WorkOfBytesToUint8, h func(ctx context.Context, arg Bytes) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToUintptr interface {
	Push(ctx context.Context, work *WorkOfBytesToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfBytesToUintptr struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfBytesToUintptrWithContext struct {
	Context context.Context
	WorkOfBytesToUintptr
}

var (
	zero_of_WorkOfBytesToUintptr       WorkOfBytesToUintptr
	zero_of_WorkOfBytesToUintptr_Value Bytes
	pool_of_WorkOfBytesToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToUintptr{}
		},
	}
)

func getWorkOfBytesToUintptr() *WorkOfBytesToUintptr {
	return pool_of_WorkOfBytesToUintptr.Get().(*WorkOfBytesToUintptr)
}
func putWorkOfBytesToUintptr(d *WorkOfBytesToUintptr) {
	d.Value = zero_of_WorkOfBytesToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToUintptr.Put(d)
}

type _BytesToUintptr struct{}

func (_ _BytesToUintptr) GetWork() *WorkOfBytesToUintptr {
	return getWorkOfBytesToUintptr()
}
func (__ _BytesToUintptr) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfUintptr) *WorkOfBytesToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToUintptr) PutWork(d *WorkOfBytesToUintptr) {
	putWorkOfBytesToUintptr(d)
}

func (_ _BytesToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _BytesToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _BytesToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _BytesToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _BytesToUintptr) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToUintptr) CallAsync(ctx context.Context, work *WorkOfBytesToUintptr, h func(ctx context.Context, arg Bytes) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToBytes interface {
	Push(ctx context.Context, work *WorkOfBytesToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfBytesToBytes struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfBytesToBytesWithContext struct {
	Context context.Context
	WorkOfBytesToBytes
}

var (
	zero_of_WorkOfBytesToBytes       WorkOfBytesToBytes
	zero_of_WorkOfBytesToBytes_Value Bytes
	pool_of_WorkOfBytesToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToBytes{}
		},
	}
)

func getWorkOfBytesToBytes() *WorkOfBytesToBytes {
	return pool_of_WorkOfBytesToBytes.Get().(*WorkOfBytesToBytes)
}
func putWorkOfBytesToBytes(d *WorkOfBytesToBytes) {
	d.Value = zero_of_WorkOfBytesToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToBytes.Put(d)
}

type _BytesToBytes struct{}

func (_ _BytesToBytes) GetWork() *WorkOfBytesToBytes {
	return getWorkOfBytesToBytes()
}
func (__ _BytesToBytes) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfBytes) *WorkOfBytesToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToBytes) PutWork(d *WorkOfBytesToBytes) {
	putWorkOfBytesToBytes(d)
}

func (_ _BytesToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _BytesToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _BytesToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _BytesToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _BytesToBytes) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToBytes) CallAsync(ctx context.Context, work *WorkOfBytesToBytes, h func(ctx context.Context, arg Bytes) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfBytesToInterface interface {
	Push(ctx context.Context, work *WorkOfBytesToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfBytesToInterface struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfBytesToInterfaceWithContext struct {
	Context context.Context
	WorkOfBytesToInterface
}

var (
	zero_of_WorkOfBytesToInterface       WorkOfBytesToInterface
	zero_of_WorkOfBytesToInterface_Value Bytes
	pool_of_WorkOfBytesToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToInterface{}
		},
	}
)

func getWorkOfBytesToInterface() *WorkOfBytesToInterface {
	return pool_of_WorkOfBytesToInterface.Get().(*WorkOfBytesToInterface)
}
func putWorkOfBytesToInterface(d *WorkOfBytesToInterface) {
	d.Value = zero_of_WorkOfBytesToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToInterface.Put(d)
}

type _BytesToInterface struct{}

func (_ _BytesToInterface) GetWork() *WorkOfBytesToInterface {
	return getWorkOfBytesToInterface()
}
func (__ _BytesToInterface) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfInterface) *WorkOfBytesToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToInterface) PutWork(d *WorkOfBytesToInterface) {
	putWorkOfBytesToInterface(d)
}

func (_ _BytesToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _BytesToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _BytesToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _BytesToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _BytesToInterface) CallSync(ctx context.Context, value Bytes, push func(ctx context.Context, work *WorkOfBytesToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToInterface) CallAsync(ctx context.Context, work *WorkOfBytesToInterface, h func(ctx context.Context, arg Bytes) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToBool interface {
	Push(ctx context.Context, work *WorkOfInterfaceToBool, returnCh chan<- *ReturnOfBool)
}

type WorkOfInterfaceToBool struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfBool
}

type WorkOfInterfaceToBoolWithContext struct {
	Context context.Context
	WorkOfInterfaceToBool
}

var (
	zero_of_WorkOfInterfaceToBool       WorkOfInterfaceToBool
	zero_of_WorkOfInterfaceToBool_Value interface{}
	pool_of_WorkOfInterfaceToBool       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToBool{}
		},
	}
)

func getWorkOfInterfaceToBool() *WorkOfInterfaceToBool {
	return pool_of_WorkOfInterfaceToBool.Get().(*WorkOfInterfaceToBool)
}
func putWorkOfInterfaceToBool(d *WorkOfInterfaceToBool) {
	d.Value = zero_of_WorkOfInterfaceToBool_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToBool.Put(d)
}

type _InterfaceToBool struct{}

func (_ _InterfaceToBool) GetWork() *WorkOfInterfaceToBool {
	return getWorkOfInterfaceToBool()
}
func (__ _InterfaceToBool) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfBool) *WorkOfInterfaceToBool {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToBool) PutWork(d *WorkOfInterfaceToBool) {
	putWorkOfInterfaceToBool(d)
}

func (_ _InterfaceToBool) GetReturn() *ReturnOfBool {
	return getReturnOfBool()
}

func (__ _InterfaceToBool) GetReturnWith(ctx context.Context, value bool, err error) *ReturnOfBool {
	rtn := getReturnOfBool()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToBool) PutReturn(d *ReturnOfBool) {
	putReturnOfBool(d)
}

func (_ _InterfaceToBool) GetReturnCh() chan *ReturnOfBool {
	return getReturnChOfBool()
}

func (_ _InterfaceToBool) PutReturnCh(d chan *ReturnOfBool) {
	putReturnChOfBool(d)
}

func (__ _InterfaceToBool) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToBool, returnCh chan<- *ReturnOfBool)) (context.Context, bool, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToBool) CallAsync(ctx context.Context, work *WorkOfInterfaceToBool, h func(ctx context.Context, arg interface{}) (bool, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToByte interface {
	Push(ctx context.Context, work *WorkOfInterfaceToByte, returnCh chan<- *ReturnOfByte)
}

type WorkOfInterfaceToByte struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfByte
}

type WorkOfInterfaceToByteWithContext struct {
	Context context.Context
	WorkOfInterfaceToByte
}

var (
	zero_of_WorkOfInterfaceToByte       WorkOfInterfaceToByte
	zero_of_WorkOfInterfaceToByte_Value interface{}
	pool_of_WorkOfInterfaceToByte       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToByte{}
		},
	}
)

func getWorkOfInterfaceToByte() *WorkOfInterfaceToByte {
	return pool_of_WorkOfInterfaceToByte.Get().(*WorkOfInterfaceToByte)
}
func putWorkOfInterfaceToByte(d *WorkOfInterfaceToByte) {
	d.Value = zero_of_WorkOfInterfaceToByte_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToByte.Put(d)
}

type _InterfaceToByte struct{}

func (_ _InterfaceToByte) GetWork() *WorkOfInterfaceToByte {
	return getWorkOfInterfaceToByte()
}
func (__ _InterfaceToByte) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfByte) *WorkOfInterfaceToByte {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToByte) PutWork(d *WorkOfInterfaceToByte) {
	putWorkOfInterfaceToByte(d)
}

func (_ _InterfaceToByte) GetReturn() *ReturnOfByte {
	return getReturnOfByte()
}

func (__ _InterfaceToByte) GetReturnWith(ctx context.Context, value byte, err error) *ReturnOfByte {
	rtn := getReturnOfByte()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToByte) PutReturn(d *ReturnOfByte) {
	putReturnOfByte(d)
}

func (_ _InterfaceToByte) GetReturnCh() chan *ReturnOfByte {
	return getReturnChOfByte()
}

func (_ _InterfaceToByte) PutReturnCh(d chan *ReturnOfByte) {
	putReturnChOfByte(d)
}

func (__ _InterfaceToByte) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToByte, returnCh chan<- *ReturnOfByte)) (context.Context, byte, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToByte) CallAsync(ctx context.Context, work *WorkOfInterfaceToByte, h func(ctx context.Context, arg interface{}) (byte, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToComplex128 interface {
	Push(ctx context.Context, work *WorkOfInterfaceToComplex128, returnCh chan<- *ReturnOfComplex128)
}

type WorkOfInterfaceToComplex128 struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfComplex128
}

type WorkOfInterfaceToComplex128WithContext struct {
	Context context.Context
	WorkOfInterfaceToComplex128
}

var (
	zero_of_WorkOfInterfaceToComplex128       WorkOfInterfaceToComplex128
	zero_of_WorkOfInterfaceToComplex128_Value interface{}
	pool_of_WorkOfInterfaceToComplex128       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToComplex128{}
		},
	}
)

func getWorkOfInterfaceToComplex128() *WorkOfInterfaceToComplex128 {
	return pool_of_WorkOfInterfaceToComplex128.Get().(*WorkOfInterfaceToComplex128)
}
func putWorkOfInterfaceToComplex128(d *WorkOfInterfaceToComplex128) {
	d.Value = zero_of_WorkOfInterfaceToComplex128_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToComplex128.Put(d)
}

type _InterfaceToComplex128 struct{}

func (_ _InterfaceToComplex128) GetWork() *WorkOfInterfaceToComplex128 {
	return getWorkOfInterfaceToComplex128()
}
func (__ _InterfaceToComplex128) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfComplex128) *WorkOfInterfaceToComplex128 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToComplex128) PutWork(d *WorkOfInterfaceToComplex128) {
	putWorkOfInterfaceToComplex128(d)
}

func (_ _InterfaceToComplex128) GetReturn() *ReturnOfComplex128 {
	return getReturnOfComplex128()
}

func (__ _InterfaceToComplex128) GetReturnWith(ctx context.Context, value complex128, err error) *ReturnOfComplex128 {
	rtn := getReturnOfComplex128()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToComplex128) PutReturn(d *ReturnOfComplex128) {
	putReturnOfComplex128(d)
}

func (_ _InterfaceToComplex128) GetReturnCh() chan *ReturnOfComplex128 {
	return getReturnChOfComplex128()
}

func (_ _InterfaceToComplex128) PutReturnCh(d chan *ReturnOfComplex128) {
	putReturnChOfComplex128(d)
}

func (__ _InterfaceToComplex128) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToComplex128, returnCh chan<- *ReturnOfComplex128)) (context.Context, complex128, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToComplex128) CallAsync(ctx context.Context, work *WorkOfInterfaceToComplex128, h func(ctx context.Context, arg interface{}) (complex128, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToComplex64 interface {
	Push(ctx context.Context, work *WorkOfInterfaceToComplex64, returnCh chan<- *ReturnOfComplex64)
}

type WorkOfInterfaceToComplex64 struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfComplex64
}

type WorkOfInterfaceToComplex64WithContext struct {
	Context context.Context
	WorkOfInterfaceToComplex64
}

var (
	zero_of_WorkOfInterfaceToComplex64       WorkOfInterfaceToComplex64
	zero_of_WorkOfInterfaceToComplex64_Value interface{}
	pool_of_WorkOfInterfaceToComplex64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToComplex64{}
		},
	}
)

func getWorkOfInterfaceToComplex64() *WorkOfInterfaceToComplex64 {
	return pool_of_WorkOfInterfaceToComplex64.Get().(*WorkOfInterfaceToComplex64)
}
func putWorkOfInterfaceToComplex64(d *WorkOfInterfaceToComplex64) {
	d.Value = zero_of_WorkOfInterfaceToComplex64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToComplex64.Put(d)
}

type _InterfaceToComplex64 struct{}

func (_ _InterfaceToComplex64) GetWork() *WorkOfInterfaceToComplex64 {
	return getWorkOfInterfaceToComplex64()
}
func (__ _InterfaceToComplex64) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfComplex64) *WorkOfInterfaceToComplex64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToComplex64) PutWork(d *WorkOfInterfaceToComplex64) {
	putWorkOfInterfaceToComplex64(d)
}

func (_ _InterfaceToComplex64) GetReturn() *ReturnOfComplex64 {
	return getReturnOfComplex64()
}

func (__ _InterfaceToComplex64) GetReturnWith(ctx context.Context, value complex64, err error) *ReturnOfComplex64 {
	rtn := getReturnOfComplex64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToComplex64) PutReturn(d *ReturnOfComplex64) {
	putReturnOfComplex64(d)
}

func (_ _InterfaceToComplex64) GetReturnCh() chan *ReturnOfComplex64 {
	return getReturnChOfComplex64()
}

func (_ _InterfaceToComplex64) PutReturnCh(d chan *ReturnOfComplex64) {
	putReturnChOfComplex64(d)
}

func (__ _InterfaceToComplex64) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToComplex64, returnCh chan<- *ReturnOfComplex64)) (context.Context, complex64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToComplex64) CallAsync(ctx context.Context, work *WorkOfInterfaceToComplex64, h func(ctx context.Context, arg interface{}) (complex64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToError interface {
	Push(ctx context.Context, work *WorkOfInterfaceToError, returnCh chan<- *ReturnOfError)
}

type WorkOfInterfaceToError struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfError
}

type WorkOfInterfaceToErrorWithContext struct {
	Context context.Context
	WorkOfInterfaceToError
}

var (
	zero_of_WorkOfInterfaceToError       WorkOfInterfaceToError
	zero_of_WorkOfInterfaceToError_Value interface{}
	pool_of_WorkOfInterfaceToError       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToError{}
		},
	}
)

func getWorkOfInterfaceToError() *WorkOfInterfaceToError {
	return pool_of_WorkOfInterfaceToError.Get().(*WorkOfInterfaceToError)
}
func putWorkOfInterfaceToError(d *WorkOfInterfaceToError) {
	d.Value = zero_of_WorkOfInterfaceToError_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToError.Put(d)
}

type _InterfaceToError struct{}

func (_ _InterfaceToError) GetWork() *WorkOfInterfaceToError {
	return getWorkOfInterfaceToError()
}
func (__ _InterfaceToError) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfError) *WorkOfInterfaceToError {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToError) PutWork(d *WorkOfInterfaceToError) {
	putWorkOfInterfaceToError(d)
}

func (_ _InterfaceToError) GetReturn() *ReturnOfError {
	return getReturnOfError()
}

func (__ _InterfaceToError) GetReturnWith(ctx context.Context, value error, err error) *ReturnOfError {
	rtn := getReturnOfError()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToError) PutReturn(d *ReturnOfError) {
	putReturnOfError(d)
}

func (_ _InterfaceToError) GetReturnCh() chan *ReturnOfError {
	return getReturnChOfError()
}

func (_ _InterfaceToError) PutReturnCh(d chan *ReturnOfError) {
	putReturnChOfError(d)
}

func (__ _InterfaceToError) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToError, returnCh chan<- *ReturnOfError)) (context.Context, error, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToError) CallAsync(ctx context.Context, work *WorkOfInterfaceToError, h func(ctx context.Context, arg interface{}) (error, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToFloat32 interface {
	Push(ctx context.Context, work *WorkOfInterfaceToFloat32, returnCh chan<- *ReturnOfFloat32)
}

type WorkOfInterfaceToFloat32 struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfFloat32
}

type WorkOfInterfaceToFloat32WithContext struct {
	Context context.Context
	WorkOfInterfaceToFloat32
}

var (
	zero_of_WorkOfInterfaceToFloat32       WorkOfInterfaceToFloat32
	zero_of_WorkOfInterfaceToFloat32_Value interface{}
	pool_of_WorkOfInterfaceToFloat32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToFloat32{}
		},
	}
)

func getWorkOfInterfaceToFloat32() *WorkOfInterfaceToFloat32 {
	return pool_of_WorkOfInterfaceToFloat32.Get().(*WorkOfInterfaceToFloat32)
}
func putWorkOfInterfaceToFloat32(d *WorkOfInterfaceToFloat32) {
	d.Value = zero_of_WorkOfInterfaceToFloat32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToFloat32.Put(d)
}

type _InterfaceToFloat32 struct{}

func (_ _InterfaceToFloat32) GetWork() *WorkOfInterfaceToFloat32 {
	return getWorkOfInterfaceToFloat32()
}
func (__ _InterfaceToFloat32) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfFloat32) *WorkOfInterfaceToFloat32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToFloat32) PutWork(d *WorkOfInterfaceToFloat32) {
	putWorkOfInterfaceToFloat32(d)
}

func (_ _InterfaceToFloat32) GetReturn() *ReturnOfFloat32 {
	return getReturnOfFloat32()
}

func (__ _InterfaceToFloat32) GetReturnWith(ctx context.Context, value float32, err error) *ReturnOfFloat32 {
	rtn := getReturnOfFloat32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToFloat32) PutReturn(d *ReturnOfFloat32) {
	putReturnOfFloat32(d)
}

func (_ _InterfaceToFloat32) GetReturnCh() chan *ReturnOfFloat32 {
	return getReturnChOfFloat32()
}

func (_ _InterfaceToFloat32) PutReturnCh(d chan *ReturnOfFloat32) {
	putReturnChOfFloat32(d)
}

func (__ _InterfaceToFloat32) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToFloat32, returnCh chan<- *ReturnOfFloat32)) (context.Context, float32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToFloat32) CallAsync(ctx context.Context, work *WorkOfInterfaceToFloat32, h func(ctx context.Context, arg interface{}) (float32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToFloat64 interface {
	Push(ctx context.Context, work *WorkOfInterfaceToFloat64, returnCh chan<- *ReturnOfFloat64)
}

type WorkOfInterfaceToFloat64 struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfFloat64
}

type WorkOfInterfaceToFloat64WithContext struct {
	Context context.Context
	WorkOfInterfaceToFloat64
}

var (
	zero_of_WorkOfInterfaceToFloat64       WorkOfInterfaceToFloat64
	zero_of_WorkOfInterfaceToFloat64_Value interface{}
	pool_of_WorkOfInterfaceToFloat64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToFloat64{}
		},
	}
)

func getWorkOfInterfaceToFloat64() *WorkOfInterfaceToFloat64 {
	return pool_of_WorkOfInterfaceToFloat64.Get().(*WorkOfInterfaceToFloat64)
}
func putWorkOfInterfaceToFloat64(d *WorkOfInterfaceToFloat64) {
	d.Value = zero_of_WorkOfInterfaceToFloat64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToFloat64.Put(d)
}

type _InterfaceToFloat64 struct{}

func (_ _InterfaceToFloat64) GetWork() *WorkOfInterfaceToFloat64 {
	return getWorkOfInterfaceToFloat64()
}
func (__ _InterfaceToFloat64) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfFloat64) *WorkOfInterfaceToFloat64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToFloat64) PutWork(d *WorkOfInterfaceToFloat64) {
	putWorkOfInterfaceToFloat64(d)
}

func (_ _InterfaceToFloat64) GetReturn() *ReturnOfFloat64 {
	return getReturnOfFloat64()
}

func (__ _InterfaceToFloat64) GetReturnWith(ctx context.Context, value float64, err error) *ReturnOfFloat64 {
	rtn := getReturnOfFloat64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToFloat64) PutReturn(d *ReturnOfFloat64) {
	putReturnOfFloat64(d)
}

func (_ _InterfaceToFloat64) GetReturnCh() chan *ReturnOfFloat64 {
	return getReturnChOfFloat64()
}

func (_ _InterfaceToFloat64) PutReturnCh(d chan *ReturnOfFloat64) {
	putReturnChOfFloat64(d)
}

func (__ _InterfaceToFloat64) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToFloat64, returnCh chan<- *ReturnOfFloat64)) (context.Context, float64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToFloat64) CallAsync(ctx context.Context, work *WorkOfInterfaceToFloat64, h func(ctx context.Context, arg interface{}) (float64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToInt interface {
	Push(ctx context.Context, work *WorkOfInterfaceToInt, returnCh chan<- *ReturnOfInt)
}

type WorkOfInterfaceToInt struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfInt
}

type WorkOfInterfaceToIntWithContext struct {
	Context context.Context
	WorkOfInterfaceToInt
}

var (
	zero_of_WorkOfInterfaceToInt       WorkOfInterfaceToInt
	zero_of_WorkOfInterfaceToInt_Value interface{}
	pool_of_WorkOfInterfaceToInt       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToInt{}
		},
	}
)

func getWorkOfInterfaceToInt() *WorkOfInterfaceToInt {
	return pool_of_WorkOfInterfaceToInt.Get().(*WorkOfInterfaceToInt)
}
func putWorkOfInterfaceToInt(d *WorkOfInterfaceToInt) {
	d.Value = zero_of_WorkOfInterfaceToInt_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToInt.Put(d)
}

type _InterfaceToInt struct{}

func (_ _InterfaceToInt) GetWork() *WorkOfInterfaceToInt {
	return getWorkOfInterfaceToInt()
}
func (__ _InterfaceToInt) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfInt) *WorkOfInterfaceToInt {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToInt) PutWork(d *WorkOfInterfaceToInt) {
	putWorkOfInterfaceToInt(d)
}

func (_ _InterfaceToInt) GetReturn() *ReturnOfInt {
	return getReturnOfInt()
}

func (__ _InterfaceToInt) GetReturnWith(ctx context.Context, value int, err error) *ReturnOfInt {
	rtn := getReturnOfInt()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToInt) PutReturn(d *ReturnOfInt) {
	putReturnOfInt(d)
}

func (_ _InterfaceToInt) GetReturnCh() chan *ReturnOfInt {
	return getReturnChOfInt()
}

func (_ _InterfaceToInt) PutReturnCh(d chan *ReturnOfInt) {
	putReturnChOfInt(d)
}

func (__ _InterfaceToInt) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToInt, returnCh chan<- *ReturnOfInt)) (context.Context, int, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToInt) CallAsync(ctx context.Context, work *WorkOfInterfaceToInt, h func(ctx context.Context, arg interface{}) (int, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToInt16 interface {
	Push(ctx context.Context, work *WorkOfInterfaceToInt16, returnCh chan<- *ReturnOfInt16)
}

type WorkOfInterfaceToInt16 struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfInt16
}

type WorkOfInterfaceToInt16WithContext struct {
	Context context.Context
	WorkOfInterfaceToInt16
}

var (
	zero_of_WorkOfInterfaceToInt16       WorkOfInterfaceToInt16
	zero_of_WorkOfInterfaceToInt16_Value interface{}
	pool_of_WorkOfInterfaceToInt16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToInt16{}
		},
	}
)

func getWorkOfInterfaceToInt16() *WorkOfInterfaceToInt16 {
	return pool_of_WorkOfInterfaceToInt16.Get().(*WorkOfInterfaceToInt16)
}
func putWorkOfInterfaceToInt16(d *WorkOfInterfaceToInt16) {
	d.Value = zero_of_WorkOfInterfaceToInt16_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToInt16.Put(d)
}

type _InterfaceToInt16 struct{}

func (_ _InterfaceToInt16) GetWork() *WorkOfInterfaceToInt16 {
	return getWorkOfInterfaceToInt16()
}
func (__ _InterfaceToInt16) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfInt16) *WorkOfInterfaceToInt16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToInt16) PutWork(d *WorkOfInterfaceToInt16) {
	putWorkOfInterfaceToInt16(d)
}

func (_ _InterfaceToInt16) GetReturn() *ReturnOfInt16 {
	return getReturnOfInt16()
}

func (__ _InterfaceToInt16) GetReturnWith(ctx context.Context, value int16, err error) *ReturnOfInt16 {
	rtn := getReturnOfInt16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToInt16) PutReturn(d *ReturnOfInt16) {
	putReturnOfInt16(d)
}

func (_ _InterfaceToInt16) GetReturnCh() chan *ReturnOfInt16 {
	return getReturnChOfInt16()
}

func (_ _InterfaceToInt16) PutReturnCh(d chan *ReturnOfInt16) {
	putReturnChOfInt16(d)
}

func (__ _InterfaceToInt16) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToInt16, returnCh chan<- *ReturnOfInt16)) (context.Context, int16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToInt16) CallAsync(ctx context.Context, work *WorkOfInterfaceToInt16, h func(ctx context.Context, arg interface{}) (int16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToInt32 interface {
	Push(ctx context.Context, work *WorkOfInterfaceToInt32, returnCh chan<- *ReturnOfInt32)
}

type WorkOfInterfaceToInt32 struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfInt32
}

type WorkOfInterfaceToInt32WithContext struct {
	Context context.Context
	WorkOfInterfaceToInt32
}

var (
	zero_of_WorkOfInterfaceToInt32       WorkOfInterfaceToInt32
	zero_of_WorkOfInterfaceToInt32_Value interface{}
	pool_of_WorkOfInterfaceToInt32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToInt32{}
		},
	}
)

func getWorkOfInterfaceToInt32() *WorkOfInterfaceToInt32 {
	return pool_of_WorkOfInterfaceToInt32.Get().(*WorkOfInterfaceToInt32)
}
func putWorkOfInterfaceToInt32(d *WorkOfInterfaceToInt32) {
	d.Value = zero_of_WorkOfInterfaceToInt32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToInt32.Put(d)
}

type _InterfaceToInt32 struct{}

func (_ _InterfaceToInt32) GetWork() *WorkOfInterfaceToInt32 {
	return getWorkOfInterfaceToInt32()
}
func (__ _InterfaceToInt32) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfInt32) *WorkOfInterfaceToInt32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToInt32) PutWork(d *WorkOfInterfaceToInt32) {
	putWorkOfInterfaceToInt32(d)
}

func (_ _InterfaceToInt32) GetReturn() *ReturnOfInt32 {
	return getReturnOfInt32()
}

func (__ _InterfaceToInt32) GetReturnWith(ctx context.Context, value int32, err error) *ReturnOfInt32 {
	rtn := getReturnOfInt32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToInt32) PutReturn(d *ReturnOfInt32) {
	putReturnOfInt32(d)
}

func (_ _InterfaceToInt32) GetReturnCh() chan *ReturnOfInt32 {
	return getReturnChOfInt32()
}

func (_ _InterfaceToInt32) PutReturnCh(d chan *ReturnOfInt32) {
	putReturnChOfInt32(d)
}

func (__ _InterfaceToInt32) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToInt32, returnCh chan<- *ReturnOfInt32)) (context.Context, int32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToInt32) CallAsync(ctx context.Context, work *WorkOfInterfaceToInt32, h func(ctx context.Context, arg interface{}) (int32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToInt64 interface {
	Push(ctx context.Context, work *WorkOfInterfaceToInt64, returnCh chan<- *ReturnOfInt64)
}

type WorkOfInterfaceToInt64 struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfInt64
}

type WorkOfInterfaceToInt64WithContext struct {
	Context context.Context
	WorkOfInterfaceToInt64
}

var (
	zero_of_WorkOfInterfaceToInt64       WorkOfInterfaceToInt64
	zero_of_WorkOfInterfaceToInt64_Value interface{}
	pool_of_WorkOfInterfaceToInt64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToInt64{}
		},
	}
)

func getWorkOfInterfaceToInt64() *WorkOfInterfaceToInt64 {
	return pool_of_WorkOfInterfaceToInt64.Get().(*WorkOfInterfaceToInt64)
}
func putWorkOfInterfaceToInt64(d *WorkOfInterfaceToInt64) {
	d.Value = zero_of_WorkOfInterfaceToInt64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToInt64.Put(d)
}

type _InterfaceToInt64 struct{}

func (_ _InterfaceToInt64) GetWork() *WorkOfInterfaceToInt64 {
	return getWorkOfInterfaceToInt64()
}
func (__ _InterfaceToInt64) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfInt64) *WorkOfInterfaceToInt64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToInt64) PutWork(d *WorkOfInterfaceToInt64) {
	putWorkOfInterfaceToInt64(d)
}

func (_ _InterfaceToInt64) GetReturn() *ReturnOfInt64 {
	return getReturnOfInt64()
}

func (__ _InterfaceToInt64) GetReturnWith(ctx context.Context, value int64, err error) *ReturnOfInt64 {
	rtn := getReturnOfInt64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToInt64) PutReturn(d *ReturnOfInt64) {
	putReturnOfInt64(d)
}

func (_ _InterfaceToInt64) GetReturnCh() chan *ReturnOfInt64 {
	return getReturnChOfInt64()
}

func (_ _InterfaceToInt64) PutReturnCh(d chan *ReturnOfInt64) {
	putReturnChOfInt64(d)
}

func (__ _InterfaceToInt64) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToInt64, returnCh chan<- *ReturnOfInt64)) (context.Context, int64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToInt64) CallAsync(ctx context.Context, work *WorkOfInterfaceToInt64, h func(ctx context.Context, arg interface{}) (int64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToInt8 interface {
	Push(ctx context.Context, work *WorkOfInterfaceToInt8, returnCh chan<- *ReturnOfInt8)
}

type WorkOfInterfaceToInt8 struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfInt8
}

type WorkOfInterfaceToInt8WithContext struct {
	Context context.Context
	WorkOfInterfaceToInt8
}

var (
	zero_of_WorkOfInterfaceToInt8       WorkOfInterfaceToInt8
	zero_of_WorkOfInterfaceToInt8_Value interface{}
	pool_of_WorkOfInterfaceToInt8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToInt8{}
		},
	}
)

func getWorkOfInterfaceToInt8() *WorkOfInterfaceToInt8 {
	return pool_of_WorkOfInterfaceToInt8.Get().(*WorkOfInterfaceToInt8)
}
func putWorkOfInterfaceToInt8(d *WorkOfInterfaceToInt8) {
	d.Value = zero_of_WorkOfInterfaceToInt8_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToInt8.Put(d)
}

type _InterfaceToInt8 struct{}

func (_ _InterfaceToInt8) GetWork() *WorkOfInterfaceToInt8 {
	return getWorkOfInterfaceToInt8()
}
func (__ _InterfaceToInt8) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfInt8) *WorkOfInterfaceToInt8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToInt8) PutWork(d *WorkOfInterfaceToInt8) {
	putWorkOfInterfaceToInt8(d)
}

func (_ _InterfaceToInt8) GetReturn() *ReturnOfInt8 {
	return getReturnOfInt8()
}

func (__ _InterfaceToInt8) GetReturnWith(ctx context.Context, value int8, err error) *ReturnOfInt8 {
	rtn := getReturnOfInt8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToInt8) PutReturn(d *ReturnOfInt8) {
	putReturnOfInt8(d)
}

func (_ _InterfaceToInt8) GetReturnCh() chan *ReturnOfInt8 {
	return getReturnChOfInt8()
}

func (_ _InterfaceToInt8) PutReturnCh(d chan *ReturnOfInt8) {
	putReturnChOfInt8(d)
}

func (__ _InterfaceToInt8) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToInt8, returnCh chan<- *ReturnOfInt8)) (context.Context, int8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToInt8) CallAsync(ctx context.Context, work *WorkOfInterfaceToInt8, h func(ctx context.Context, arg interface{}) (int8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToRune interface {
	Push(ctx context.Context, work *WorkOfInterfaceToRune, returnCh chan<- *ReturnOfRune)
}

type WorkOfInterfaceToRune struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfRune
}

type WorkOfInterfaceToRuneWithContext struct {
	Context context.Context
	WorkOfInterfaceToRune
}

var (
	zero_of_WorkOfInterfaceToRune       WorkOfInterfaceToRune
	zero_of_WorkOfInterfaceToRune_Value interface{}
	pool_of_WorkOfInterfaceToRune       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToRune{}
		},
	}
)

func getWorkOfInterfaceToRune() *WorkOfInterfaceToRune {
	return pool_of_WorkOfInterfaceToRune.Get().(*WorkOfInterfaceToRune)
}
func putWorkOfInterfaceToRune(d *WorkOfInterfaceToRune) {
	d.Value = zero_of_WorkOfInterfaceToRune_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToRune.Put(d)
}

type _InterfaceToRune struct{}

func (_ _InterfaceToRune) GetWork() *WorkOfInterfaceToRune {
	return getWorkOfInterfaceToRune()
}
func (__ _InterfaceToRune) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfRune) *WorkOfInterfaceToRune {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToRune) PutWork(d *WorkOfInterfaceToRune) {
	putWorkOfInterfaceToRune(d)
}

func (_ _InterfaceToRune) GetReturn() *ReturnOfRune {
	return getReturnOfRune()
}

func (__ _InterfaceToRune) GetReturnWith(ctx context.Context, value rune, err error) *ReturnOfRune {
	rtn := getReturnOfRune()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToRune) PutReturn(d *ReturnOfRune) {
	putReturnOfRune(d)
}

func (_ _InterfaceToRune) GetReturnCh() chan *ReturnOfRune {
	return getReturnChOfRune()
}

func (_ _InterfaceToRune) PutReturnCh(d chan *ReturnOfRune) {
	putReturnChOfRune(d)
}

func (__ _InterfaceToRune) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToRune, returnCh chan<- *ReturnOfRune)) (context.Context, rune, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToRune) CallAsync(ctx context.Context, work *WorkOfInterfaceToRune, h func(ctx context.Context, arg interface{}) (rune, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToString interface {
	Push(ctx context.Context, work *WorkOfInterfaceToString, returnCh chan<- *ReturnOfString)
}

type WorkOfInterfaceToString struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfString
}

type WorkOfInterfaceToStringWithContext struct {
	Context context.Context
	WorkOfInterfaceToString
}

var (
	zero_of_WorkOfInterfaceToString       WorkOfInterfaceToString
	zero_of_WorkOfInterfaceToString_Value interface{}
	pool_of_WorkOfInterfaceToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToString{}
		},
	}
)

func getWorkOfInterfaceToString() *WorkOfInterfaceToString {
	return pool_of_WorkOfInterfaceToString.Get().(*WorkOfInterfaceToString)
}
func putWorkOfInterfaceToString(d *WorkOfInterfaceToString) {
	d.Value = zero_of_WorkOfInterfaceToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToString.Put(d)
}

type _InterfaceToString struct{}

func (_ _InterfaceToString) GetWork() *WorkOfInterfaceToString {
	return getWorkOfInterfaceToString()
}
func (__ _InterfaceToString) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfString) *WorkOfInterfaceToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToString) PutWork(d *WorkOfInterfaceToString) {
	putWorkOfInterfaceToString(d)
}

func (_ _InterfaceToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _InterfaceToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _InterfaceToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _InterfaceToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (__ _InterfaceToString) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToString, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToString) CallAsync(ctx context.Context, work *WorkOfInterfaceToString, h func(ctx context.Context, arg interface{}) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToUint interface {
	Push(ctx context.Context, work *WorkOfInterfaceToUint, returnCh chan<- *ReturnOfUint)
}

type WorkOfInterfaceToUint struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfUint
}

type WorkOfInterfaceToUintWithContext struct {
	Context context.Context
	WorkOfInterfaceToUint
}

var (
	zero_of_WorkOfInterfaceToUint       WorkOfInterfaceToUint
	zero_of_WorkOfInterfaceToUint_Value interface{}
	pool_of_WorkOfInterfaceToUint       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToUint{}
		},
	}
)

func getWorkOfInterfaceToUint() *WorkOfInterfaceToUint {
	return pool_of_WorkOfInterfaceToUint.Get().(*WorkOfInterfaceToUint)
}
func putWorkOfInterfaceToUint(d *WorkOfInterfaceToUint) {
	d.Value = zero_of_WorkOfInterfaceToUint_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToUint.Put(d)
}

type _InterfaceToUint struct{}

func (_ _InterfaceToUint) GetWork() *WorkOfInterfaceToUint {
	return getWorkOfInterfaceToUint()
}
func (__ _InterfaceToUint) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfUint) *WorkOfInterfaceToUint {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToUint) PutWork(d *WorkOfInterfaceToUint) {
	putWorkOfInterfaceToUint(d)
}

func (_ _InterfaceToUint) GetReturn() *ReturnOfUint {
	return getReturnOfUint()
}

func (__ _InterfaceToUint) GetReturnWith(ctx context.Context, value uint, err error) *ReturnOfUint {
	rtn := getReturnOfUint()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToUint) PutReturn(d *ReturnOfUint) {
	putReturnOfUint(d)
}

func (_ _InterfaceToUint) GetReturnCh() chan *ReturnOfUint {
	return getReturnChOfUint()
}

func (_ _InterfaceToUint) PutReturnCh(d chan *ReturnOfUint) {
	putReturnChOfUint(d)
}

func (__ _InterfaceToUint) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToUint, returnCh chan<- *ReturnOfUint)) (context.Context, uint, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToUint) CallAsync(ctx context.Context, work *WorkOfInterfaceToUint, h func(ctx context.Context, arg interface{}) (uint, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToUint16 interface {
	Push(ctx context.Context, work *WorkOfInterfaceToUint16, returnCh chan<- *ReturnOfUint16)
}

type WorkOfInterfaceToUint16 struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfUint16
}

type WorkOfInterfaceToUint16WithContext struct {
	Context context.Context
	WorkOfInterfaceToUint16
}

var (
	zero_of_WorkOfInterfaceToUint16       WorkOfInterfaceToUint16
	zero_of_WorkOfInterfaceToUint16_Value interface{}
	pool_of_WorkOfInterfaceToUint16       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToUint16{}
		},
	}
)

func getWorkOfInterfaceToUint16() *WorkOfInterfaceToUint16 {
	return pool_of_WorkOfInterfaceToUint16.Get().(*WorkOfInterfaceToUint16)
}
func putWorkOfInterfaceToUint16(d *WorkOfInterfaceToUint16) {
	d.Value = zero_of_WorkOfInterfaceToUint16_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToUint16.Put(d)
}

type _InterfaceToUint16 struct{}

func (_ _InterfaceToUint16) GetWork() *WorkOfInterfaceToUint16 {
	return getWorkOfInterfaceToUint16()
}
func (__ _InterfaceToUint16) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfUint16) *WorkOfInterfaceToUint16 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToUint16) PutWork(d *WorkOfInterfaceToUint16) {
	putWorkOfInterfaceToUint16(d)
}

func (_ _InterfaceToUint16) GetReturn() *ReturnOfUint16 {
	return getReturnOfUint16()
}

func (__ _InterfaceToUint16) GetReturnWith(ctx context.Context, value uint16, err error) *ReturnOfUint16 {
	rtn := getReturnOfUint16()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToUint16) PutReturn(d *ReturnOfUint16) {
	putReturnOfUint16(d)
}

func (_ _InterfaceToUint16) GetReturnCh() chan *ReturnOfUint16 {
	return getReturnChOfUint16()
}

func (_ _InterfaceToUint16) PutReturnCh(d chan *ReturnOfUint16) {
	putReturnChOfUint16(d)
}

func (__ _InterfaceToUint16) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToUint16, returnCh chan<- *ReturnOfUint16)) (context.Context, uint16, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToUint16) CallAsync(ctx context.Context, work *WorkOfInterfaceToUint16, h func(ctx context.Context, arg interface{}) (uint16, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToUint32 interface {
	Push(ctx context.Context, work *WorkOfInterfaceToUint32, returnCh chan<- *ReturnOfUint32)
}

type WorkOfInterfaceToUint32 struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfUint32
}

type WorkOfInterfaceToUint32WithContext struct {
	Context context.Context
	WorkOfInterfaceToUint32
}

var (
	zero_of_WorkOfInterfaceToUint32       WorkOfInterfaceToUint32
	zero_of_WorkOfInterfaceToUint32_Value interface{}
	pool_of_WorkOfInterfaceToUint32       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToUint32{}
		},
	}
)

func getWorkOfInterfaceToUint32() *WorkOfInterfaceToUint32 {
	return pool_of_WorkOfInterfaceToUint32.Get().(*WorkOfInterfaceToUint32)
}
func putWorkOfInterfaceToUint32(d *WorkOfInterfaceToUint32) {
	d.Value = zero_of_WorkOfInterfaceToUint32_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToUint32.Put(d)
}

type _InterfaceToUint32 struct{}

func (_ _InterfaceToUint32) GetWork() *WorkOfInterfaceToUint32 {
	return getWorkOfInterfaceToUint32()
}
func (__ _InterfaceToUint32) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfUint32) *WorkOfInterfaceToUint32 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToUint32) PutWork(d *WorkOfInterfaceToUint32) {
	putWorkOfInterfaceToUint32(d)
}

func (_ _InterfaceToUint32) GetReturn() *ReturnOfUint32 {
	return getReturnOfUint32()
}

func (__ _InterfaceToUint32) GetReturnWith(ctx context.Context, value uint32, err error) *ReturnOfUint32 {
	rtn := getReturnOfUint32()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToUint32) PutReturn(d *ReturnOfUint32) {
	putReturnOfUint32(d)
}

func (_ _InterfaceToUint32) GetReturnCh() chan *ReturnOfUint32 {
	return getReturnChOfUint32()
}

func (_ _InterfaceToUint32) PutReturnCh(d chan *ReturnOfUint32) {
	putReturnChOfUint32(d)
}

func (__ _InterfaceToUint32) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToUint32, returnCh chan<- *ReturnOfUint32)) (context.Context, uint32, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToUint32) CallAsync(ctx context.Context, work *WorkOfInterfaceToUint32, h func(ctx context.Context, arg interface{}) (uint32, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToUint64 interface {
	Push(ctx context.Context, work *WorkOfInterfaceToUint64, returnCh chan<- *ReturnOfUint64)
}

type WorkOfInterfaceToUint64 struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfUint64
}

type WorkOfInterfaceToUint64WithContext struct {
	Context context.Context
	WorkOfInterfaceToUint64
}

var (
	zero_of_WorkOfInterfaceToUint64       WorkOfInterfaceToUint64
	zero_of_WorkOfInterfaceToUint64_Value interface{}
	pool_of_WorkOfInterfaceToUint64       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToUint64{}
		},
	}
)

func getWorkOfInterfaceToUint64() *WorkOfInterfaceToUint64 {
	return pool_of_WorkOfInterfaceToUint64.Get().(*WorkOfInterfaceToUint64)
}
func putWorkOfInterfaceToUint64(d *WorkOfInterfaceToUint64) {
	d.Value = zero_of_WorkOfInterfaceToUint64_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToUint64.Put(d)
}

type _InterfaceToUint64 struct{}

func (_ _InterfaceToUint64) GetWork() *WorkOfInterfaceToUint64 {
	return getWorkOfInterfaceToUint64()
}
func (__ _InterfaceToUint64) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfUint64) *WorkOfInterfaceToUint64 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToUint64) PutWork(d *WorkOfInterfaceToUint64) {
	putWorkOfInterfaceToUint64(d)
}

func (_ _InterfaceToUint64) GetReturn() *ReturnOfUint64 {
	return getReturnOfUint64()
}

func (__ _InterfaceToUint64) GetReturnWith(ctx context.Context, value uint64, err error) *ReturnOfUint64 {
	rtn := getReturnOfUint64()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToUint64) PutReturn(d *ReturnOfUint64) {
	putReturnOfUint64(d)
}

func (_ _InterfaceToUint64) GetReturnCh() chan *ReturnOfUint64 {
	return getReturnChOfUint64()
}

func (_ _InterfaceToUint64) PutReturnCh(d chan *ReturnOfUint64) {
	putReturnChOfUint64(d)
}

func (__ _InterfaceToUint64) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToUint64, returnCh chan<- *ReturnOfUint64)) (context.Context, uint64, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToUint64) CallAsync(ctx context.Context, work *WorkOfInterfaceToUint64, h func(ctx context.Context, arg interface{}) (uint64, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToUint8 interface {
	Push(ctx context.Context, work *WorkOfInterfaceToUint8, returnCh chan<- *ReturnOfUint8)
}

type WorkOfInterfaceToUint8 struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfUint8
}

type WorkOfInterfaceToUint8WithContext struct {
	Context context.Context
	WorkOfInterfaceToUint8
}

var (
	zero_of_WorkOfInterfaceToUint8       WorkOfInterfaceToUint8
	zero_of_WorkOfInterfaceToUint8_Value interface{}
	pool_of_WorkOfInterfaceToUint8       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToUint8{}
		},
	}
)

func getWorkOfInterfaceToUint8() *WorkOfInterfaceToUint8 {
	return pool_of_WorkOfInterfaceToUint8.Get().(*WorkOfInterfaceToUint8)
}
func putWorkOfInterfaceToUint8(d *WorkOfInterfaceToUint8) {
	d.Value = zero_of_WorkOfInterfaceToUint8_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToUint8.Put(d)
}

type _InterfaceToUint8 struct{}

func (_ _InterfaceToUint8) GetWork() *WorkOfInterfaceToUint8 {
	return getWorkOfInterfaceToUint8()
}
func (__ _InterfaceToUint8) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfUint8) *WorkOfInterfaceToUint8 {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToUint8) PutWork(d *WorkOfInterfaceToUint8) {
	putWorkOfInterfaceToUint8(d)
}

func (_ _InterfaceToUint8) GetReturn() *ReturnOfUint8 {
	return getReturnOfUint8()
}

func (__ _InterfaceToUint8) GetReturnWith(ctx context.Context, value uint8, err error) *ReturnOfUint8 {
	rtn := getReturnOfUint8()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToUint8) PutReturn(d *ReturnOfUint8) {
	putReturnOfUint8(d)
}

func (_ _InterfaceToUint8) GetReturnCh() chan *ReturnOfUint8 {
	return getReturnChOfUint8()
}

func (_ _InterfaceToUint8) PutReturnCh(d chan *ReturnOfUint8) {
	putReturnChOfUint8(d)
}

func (__ _InterfaceToUint8) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToUint8, returnCh chan<- *ReturnOfUint8)) (context.Context, uint8, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToUint8) CallAsync(ctx context.Context, work *WorkOfInterfaceToUint8, h func(ctx context.Context, arg interface{}) (uint8, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToUintptr interface {
	Push(ctx context.Context, work *WorkOfInterfaceToUintptr, returnCh chan<- *ReturnOfUintptr)
}

type WorkOfInterfaceToUintptr struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfUintptr
}

type WorkOfInterfaceToUintptrWithContext struct {
	Context context.Context
	WorkOfInterfaceToUintptr
}

var (
	zero_of_WorkOfInterfaceToUintptr       WorkOfInterfaceToUintptr
	zero_of_WorkOfInterfaceToUintptr_Value interface{}
	pool_of_WorkOfInterfaceToUintptr       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToUintptr{}
		},
	}
)

func getWorkOfInterfaceToUintptr() *WorkOfInterfaceToUintptr {
	return pool_of_WorkOfInterfaceToUintptr.Get().(*WorkOfInterfaceToUintptr)
}
func putWorkOfInterfaceToUintptr(d *WorkOfInterfaceToUintptr) {
	d.Value = zero_of_WorkOfInterfaceToUintptr_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToUintptr.Put(d)
}

type _InterfaceToUintptr struct{}

func (_ _InterfaceToUintptr) GetWork() *WorkOfInterfaceToUintptr {
	return getWorkOfInterfaceToUintptr()
}
func (__ _InterfaceToUintptr) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfUintptr) *WorkOfInterfaceToUintptr {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToUintptr) PutWork(d *WorkOfInterfaceToUintptr) {
	putWorkOfInterfaceToUintptr(d)
}

func (_ _InterfaceToUintptr) GetReturn() *ReturnOfUintptr {
	return getReturnOfUintptr()
}

func (__ _InterfaceToUintptr) GetReturnWith(ctx context.Context, value uintptr, err error) *ReturnOfUintptr {
	rtn := getReturnOfUintptr()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToUintptr) PutReturn(d *ReturnOfUintptr) {
	putReturnOfUintptr(d)
}

func (_ _InterfaceToUintptr) GetReturnCh() chan *ReturnOfUintptr {
	return getReturnChOfUintptr()
}

func (_ _InterfaceToUintptr) PutReturnCh(d chan *ReturnOfUintptr) {
	putReturnChOfUintptr(d)
}

func (__ _InterfaceToUintptr) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToUintptr, returnCh chan<- *ReturnOfUintptr)) (context.Context, uintptr, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToUintptr) CallAsync(ctx context.Context, work *WorkOfInterfaceToUintptr, h func(ctx context.Context, arg interface{}) (uintptr, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToBytes interface {
	Push(ctx context.Context, work *WorkOfInterfaceToBytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfInterfaceToBytes struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfBytes
}

type WorkOfInterfaceToBytesWithContext struct {
	Context context.Context
	WorkOfInterfaceToBytes
}

var (
	zero_of_WorkOfInterfaceToBytes       WorkOfInterfaceToBytes
	zero_of_WorkOfInterfaceToBytes_Value interface{}
	pool_of_WorkOfInterfaceToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToBytes{}
		},
	}
)

func getWorkOfInterfaceToBytes() *WorkOfInterfaceToBytes {
	return pool_of_WorkOfInterfaceToBytes.Get().(*WorkOfInterfaceToBytes)
}
func putWorkOfInterfaceToBytes(d *WorkOfInterfaceToBytes) {
	d.Value = zero_of_WorkOfInterfaceToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToBytes.Put(d)
}

type _InterfaceToBytes struct{}

func (_ _InterfaceToBytes) GetWork() *WorkOfInterfaceToBytes {
	return getWorkOfInterfaceToBytes()
}
func (__ _InterfaceToBytes) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfBytes) *WorkOfInterfaceToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToBytes) PutWork(d *WorkOfInterfaceToBytes) {
	putWorkOfInterfaceToBytes(d)
}

func (_ _InterfaceToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _InterfaceToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _InterfaceToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _InterfaceToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (__ _InterfaceToBytes) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToBytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToBytes) CallAsync(ctx context.Context, work *WorkOfInterfaceToBytes, h func(ctx context.Context, arg interface{}) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}

type WorkerOfInterfaceToInterface interface {
	Push(ctx context.Context, work *WorkOfInterfaceToInterface, returnCh chan<- *ReturnOfInterface)
}

type WorkOfInterfaceToInterface struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfInterface
}

type WorkOfInterfaceToInterfaceWithContext struct {
	Context context.Context
	WorkOfInterfaceToInterface
}

var (
	zero_of_WorkOfInterfaceToInterface       WorkOfInterfaceToInterface
	zero_of_WorkOfInterfaceToInterface_Value interface{}
	pool_of_WorkOfInterfaceToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToInterface{}
		},
	}
)

func getWorkOfInterfaceToInterface() *WorkOfInterfaceToInterface {
	return pool_of_WorkOfInterfaceToInterface.Get().(*WorkOfInterfaceToInterface)
}
func putWorkOfInterfaceToInterface(d *WorkOfInterfaceToInterface) {
	d.Value = zero_of_WorkOfInterfaceToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToInterface.Put(d)
}

type _InterfaceToInterface struct{}

func (_ _InterfaceToInterface) GetWork() *WorkOfInterfaceToInterface {
	return getWorkOfInterfaceToInterface()
}
func (__ _InterfaceToInterface) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfInterface) *WorkOfInterfaceToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToInterface) PutWork(d *WorkOfInterfaceToInterface) {
	putWorkOfInterfaceToInterface(d)
}

func (_ _InterfaceToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _InterfaceToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _InterfaceToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _InterfaceToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (__ _InterfaceToInterface) CallSync(ctx context.Context, value interface{}, push func(ctx context.Context, work *WorkOfInterfaceToInterface, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	work := __.GetWorkWith(value, ch)
	push(ctx, work, ch)
	rtn := <-ch
	defer __.PutReturn(rtn)
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToInterface) CallAsync(ctx context.Context, work *WorkOfInterfaceToInterface, h func(ctx context.Context, arg interface{}) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, work.Value)
		rtn := __.GetReturnWith(ctx, res, err)
		work.ReturnCh <- rtn
	}()
}
