// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package async

import (
	"context"
	"sync"
)

type WorkerOfBytesToBytes interface {
	Push(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfBytesToBytes struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfBytes
}

type WorkContextOfBytesToBytes struct {
	Context context.Context
	*WorkOfBytesToBytes
}

func (__ *WorkContextOfBytesToBytes) Unpack() (context.Context, Bytes, chan<- *ReturnOfBytes) {
	return __.Context, __.Value, __.ReturnCh
}

var (
	zero_of_WorkOfBytesToBytes       WorkOfBytesToBytes
	zero_of_WorkOfBytesToBytes_Value Bytes
	pool_of_WorkOfBytesToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToBytes{}
		},
	}
	pool_of_WorkOfBytesToBytesContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfBytesToBytes{}
		},
	}
)

type pool_WorkOfBytesToBytes struct{}

func (_ pool_WorkOfBytesToBytes) Get() *WorkOfBytesToBytes {
	return pool_of_WorkOfBytesToBytes.Get().(*WorkOfBytesToBytes)
}
func (_ pool_WorkOfBytesToBytes) Put(d *WorkOfBytesToBytes) {
	d.Value = zero_of_WorkOfBytesToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToBytes.Put(d)
}

func (__ pool_WorkOfBytesToBytes) GetWith(value Bytes, returnCh chan<- *ReturnOfBytes) *WorkOfBytesToBytes {
	work := __.Get()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

type pool_WorkContextOfBytesToBytes struct{}

func (_ pool_WorkContextOfBytesToBytes) Get() *WorkContextOfBytesToBytes {
	return pool_of_WorkOfBytesToBytesContext.Get().(*WorkContextOfBytesToBytes)
}
func (_ pool_WorkContextOfBytesToBytes) Put(d *WorkContextOfBytesToBytes) {
	d.Context = nil
	d.WorkOfBytesToBytes = nil
	pool_of_WorkOfBytesToBytesContext.Put(d)
}

func (__ pool_WorkContextOfBytesToBytes) GetWith(ctx context.Context, work *WorkOfBytesToBytes) *WorkContextOfBytesToBytes {
	work_ctx := __.Get()
	work_ctx.Context = ctx
	work_ctx.WorkOfBytesToBytes = work
	return work_ctx
}

func (__ pool_WorkContextOfBytesToBytes) GetWiths(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfBytes) *WorkContextOfBytesToBytes {
	work := pool_of_WorkOfBytesToBytes.Get().(*WorkOfBytesToBytes)
	work.Value = value
	work.ReturnCh = returnCh
	return __.GetWith(ctx, work)
}

func (__ pool_WorkContextOfBytesToBytes) Collect(d *WorkContextOfBytesToBytes) (context.Context, Bytes, chan<- *ReturnOfBytes) {
	ctx, value, rtn_ch := d.Unpack()
	__.Puts(d)
	return ctx, value, rtn_ch
}

func (__ pool_WorkContextOfBytesToBytes) Puts(d *WorkContextOfBytesToBytes) {
	work := d.WorkOfBytesToBytes
	work.Value = zero_of_WorkOfBytesToBytes_Value
	work.ReturnCh = nil
	pool_of_WorkOfBytesToBytes.Put(work)

	__.Put(d)
}

type func_worker_BytesToBytes struct{}

func (_ func_worker_BytesToBytes) New(ctx context.Context, h func(context.Context, Bytes) (context.Context, Bytes, error), n int) *FuncWorkerOfBytesToBytes {
	return newFuncWorkerOfBytesToBytes(ctx, h, n)
}

type _BytesToBytes struct {
	Work struct {
		Pool pool_WorkOfBytesToBytes
	}
	WorkContext struct {
		Pool pool_WorkContextOfBytesToBytes
	}
	FuncWorker func_worker_BytesToBytes
	// Pool struct {
	// Work pool_WorkOfBytesToBytes
	// WorkContext pool_WorkContextOfBytesToBytes
	// }
}

func (__ _BytesToBytes) CallAsSync(ctx context.Context, value Bytes, push func(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := Bytess.ChanReturn.Pool.Get()
	defer Bytess.ChanReturn.Pool.Put(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToBytes) CallAsAsync(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfBytes, h func(ctx context.Context, arg Bytes) (context.Context, Bytes, error), defered func()) {
	go func() {
		defer defered()

		ctx, res, err := h(ctx, value)
		rtn := Bytess.Return.Pool.GetWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var BytesToBytes = _BytesToBytes{}

type WorkerOfBytesToString interface {
	Push(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfString)
}

type WorkOfBytesToString struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfString
}

type WorkContextOfBytesToString struct {
	Context context.Context
	*WorkOfBytesToString
}

func (__ *WorkContextOfBytesToString) Unpack() (context.Context, Bytes, chan<- *ReturnOfString) {
	return __.Context, __.Value, __.ReturnCh
}

var (
	zero_of_WorkOfBytesToString       WorkOfBytesToString
	zero_of_WorkOfBytesToString_Value Bytes
	pool_of_WorkOfBytesToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToString{}
		},
	}
	pool_of_WorkOfBytesToStringContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfBytesToString{}
		},
	}
)

type pool_WorkOfBytesToString struct{}

func (_ pool_WorkOfBytesToString) Get() *WorkOfBytesToString {
	return pool_of_WorkOfBytesToString.Get().(*WorkOfBytesToString)
}
func (_ pool_WorkOfBytesToString) Put(d *WorkOfBytesToString) {
	d.Value = zero_of_WorkOfBytesToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToString.Put(d)
}

func (__ pool_WorkOfBytesToString) GetWith(value Bytes, returnCh chan<- *ReturnOfString) *WorkOfBytesToString {
	work := __.Get()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

type pool_WorkContextOfBytesToString struct{}

func (_ pool_WorkContextOfBytesToString) Get() *WorkContextOfBytesToString {
	return pool_of_WorkOfBytesToStringContext.Get().(*WorkContextOfBytesToString)
}
func (_ pool_WorkContextOfBytesToString) Put(d *WorkContextOfBytesToString) {
	d.Context = nil
	d.WorkOfBytesToString = nil
	pool_of_WorkOfBytesToStringContext.Put(d)
}

func (__ pool_WorkContextOfBytesToString) GetWith(ctx context.Context, work *WorkOfBytesToString) *WorkContextOfBytesToString {
	work_ctx := __.Get()
	work_ctx.Context = ctx
	work_ctx.WorkOfBytesToString = work
	return work_ctx
}

func (__ pool_WorkContextOfBytesToString) GetWiths(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfString) *WorkContextOfBytesToString {
	work := pool_of_WorkOfBytesToString.Get().(*WorkOfBytesToString)
	work.Value = value
	work.ReturnCh = returnCh
	return __.GetWith(ctx, work)
}

func (__ pool_WorkContextOfBytesToString) Collect(d *WorkContextOfBytesToString) (context.Context, Bytes, chan<- *ReturnOfString) {
	ctx, value, rtn_ch := d.Unpack()
	__.Puts(d)
	return ctx, value, rtn_ch
}

func (__ pool_WorkContextOfBytesToString) Puts(d *WorkContextOfBytesToString) {
	work := d.WorkOfBytesToString
	work.Value = zero_of_WorkOfBytesToString_Value
	work.ReturnCh = nil
	pool_of_WorkOfBytesToString.Put(work)

	__.Put(d)
}

type func_worker_BytesToString struct{}

func (_ func_worker_BytesToString) New(ctx context.Context, h func(context.Context, Bytes) (context.Context, string, error), n int) *FuncWorkerOfBytesToString {
	return newFuncWorkerOfBytesToString(ctx, h, n)
}

type _BytesToString struct {
	Work struct {
		Pool pool_WorkOfBytesToString
	}
	WorkContext struct {
		Pool pool_WorkContextOfBytesToString
	}
	FuncWorker func_worker_BytesToString
	// Pool struct {
	// Work pool_WorkOfBytesToString
	// WorkContext pool_WorkContextOfBytesToString
	// }
}

func (__ _BytesToString) CallAsSync(ctx context.Context, value Bytes, push func(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := Strings.ChanReturn.Pool.Get()
	defer Strings.ChanReturn.Pool.Put(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToString) CallAsAsync(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfString, h func(ctx context.Context, arg Bytes) (context.Context, string, error), defered func()) {
	go func() {
		defer defered()

		ctx, res, err := h(ctx, value)
		rtn := Strings.Return.Pool.GetWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var BytesToString = _BytesToString{}

type WorkerOfBytesToInterface interface {
	Push(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfInterface)
}

type WorkOfBytesToInterface struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfInterface
}

type WorkContextOfBytesToInterface struct {
	Context context.Context
	*WorkOfBytesToInterface
}

func (__ *WorkContextOfBytesToInterface) Unpack() (context.Context, Bytes, chan<- *ReturnOfInterface) {
	return __.Context, __.Value, __.ReturnCh
}

var (
	zero_of_WorkOfBytesToInterface       WorkOfBytesToInterface
	zero_of_WorkOfBytesToInterface_Value Bytes
	pool_of_WorkOfBytesToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToInterface{}
		},
	}
	pool_of_WorkOfBytesToInterfaceContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfBytesToInterface{}
		},
	}
)

type pool_WorkOfBytesToInterface struct{}

func (_ pool_WorkOfBytesToInterface) Get() *WorkOfBytesToInterface {
	return pool_of_WorkOfBytesToInterface.Get().(*WorkOfBytesToInterface)
}
func (_ pool_WorkOfBytesToInterface) Put(d *WorkOfBytesToInterface) {
	d.Value = zero_of_WorkOfBytesToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToInterface.Put(d)
}

func (__ pool_WorkOfBytesToInterface) GetWith(value Bytes, returnCh chan<- *ReturnOfInterface) *WorkOfBytesToInterface {
	work := __.Get()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

type pool_WorkContextOfBytesToInterface struct{}

func (_ pool_WorkContextOfBytesToInterface) Get() *WorkContextOfBytesToInterface {
	return pool_of_WorkOfBytesToInterfaceContext.Get().(*WorkContextOfBytesToInterface)
}
func (_ pool_WorkContextOfBytesToInterface) Put(d *WorkContextOfBytesToInterface) {
	d.Context = nil
	d.WorkOfBytesToInterface = nil
	pool_of_WorkOfBytesToInterfaceContext.Put(d)
}

func (__ pool_WorkContextOfBytesToInterface) GetWith(ctx context.Context, work *WorkOfBytesToInterface) *WorkContextOfBytesToInterface {
	work_ctx := __.Get()
	work_ctx.Context = ctx
	work_ctx.WorkOfBytesToInterface = work
	return work_ctx
}

func (__ pool_WorkContextOfBytesToInterface) GetWiths(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfInterface) *WorkContextOfBytesToInterface {
	work := pool_of_WorkOfBytesToInterface.Get().(*WorkOfBytesToInterface)
	work.Value = value
	work.ReturnCh = returnCh
	return __.GetWith(ctx, work)
}

func (__ pool_WorkContextOfBytesToInterface) Collect(d *WorkContextOfBytesToInterface) (context.Context, Bytes, chan<- *ReturnOfInterface) {
	ctx, value, rtn_ch := d.Unpack()
	__.Puts(d)
	return ctx, value, rtn_ch
}

func (__ pool_WorkContextOfBytesToInterface) Puts(d *WorkContextOfBytesToInterface) {
	work := d.WorkOfBytesToInterface
	work.Value = zero_of_WorkOfBytesToInterface_Value
	work.ReturnCh = nil
	pool_of_WorkOfBytesToInterface.Put(work)

	__.Put(d)
}

type func_worker_BytesToInterface struct{}

func (_ func_worker_BytesToInterface) New(ctx context.Context, h func(context.Context, Bytes) (context.Context, interface{}, error), n int) *FuncWorkerOfBytesToInterface {
	return newFuncWorkerOfBytesToInterface(ctx, h, n)
}

type _BytesToInterface struct {
	Work struct {
		Pool pool_WorkOfBytesToInterface
	}
	WorkContext struct {
		Pool pool_WorkContextOfBytesToInterface
	}
	FuncWorker func_worker_BytesToInterface
	// Pool struct {
	// Work pool_WorkOfBytesToInterface
	// WorkContext pool_WorkContextOfBytesToInterface
	// }
}

func (__ _BytesToInterface) CallAsSync(ctx context.Context, value Bytes, push func(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := Interfaces.ChanReturn.Pool.Get()
	defer Interfaces.ChanReturn.Pool.Put(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToInterface) CallAsAsync(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfInterface, h func(ctx context.Context, arg Bytes) (context.Context, interface{}, error), defered func()) {
	go func() {
		defer defered()

		ctx, res, err := h(ctx, value)
		rtn := Interfaces.Return.Pool.GetWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var BytesToInterface = _BytesToInterface{}

type WorkerOfStringToBytes interface {
	Push(ctx context.Context, value string, returnCh chan<- *ReturnOfBytes)
}

type WorkOfStringToBytes struct {
	Value    string
	ReturnCh chan<- *ReturnOfBytes
}

type WorkContextOfStringToBytes struct {
	Context context.Context
	*WorkOfStringToBytes
}

func (__ *WorkContextOfStringToBytes) Unpack() (context.Context, string, chan<- *ReturnOfBytes) {
	return __.Context, __.Value, __.ReturnCh
}

var (
	zero_of_WorkOfStringToBytes       WorkOfStringToBytes
	zero_of_WorkOfStringToBytes_Value string
	pool_of_WorkOfStringToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToBytes{}
		},
	}
	pool_of_WorkOfStringToBytesContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfStringToBytes{}
		},
	}
)

type pool_WorkOfStringToBytes struct{}

func (_ pool_WorkOfStringToBytes) Get() *WorkOfStringToBytes {
	return pool_of_WorkOfStringToBytes.Get().(*WorkOfStringToBytes)
}
func (_ pool_WorkOfStringToBytes) Put(d *WorkOfStringToBytes) {
	d.Value = zero_of_WorkOfStringToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToBytes.Put(d)
}

func (__ pool_WorkOfStringToBytes) GetWith(value string, returnCh chan<- *ReturnOfBytes) *WorkOfStringToBytes {
	work := __.Get()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

type pool_WorkContextOfStringToBytes struct{}

func (_ pool_WorkContextOfStringToBytes) Get() *WorkContextOfStringToBytes {
	return pool_of_WorkOfStringToBytesContext.Get().(*WorkContextOfStringToBytes)
}
func (_ pool_WorkContextOfStringToBytes) Put(d *WorkContextOfStringToBytes) {
	d.Context = nil
	d.WorkOfStringToBytes = nil
	pool_of_WorkOfStringToBytesContext.Put(d)
}

func (__ pool_WorkContextOfStringToBytes) GetWith(ctx context.Context, work *WorkOfStringToBytes) *WorkContextOfStringToBytes {
	work_ctx := __.Get()
	work_ctx.Context = ctx
	work_ctx.WorkOfStringToBytes = work
	return work_ctx
}

func (__ pool_WorkContextOfStringToBytes) GetWiths(ctx context.Context, value string, returnCh chan<- *ReturnOfBytes) *WorkContextOfStringToBytes {
	work := pool_of_WorkOfStringToBytes.Get().(*WorkOfStringToBytes)
	work.Value = value
	work.ReturnCh = returnCh
	return __.GetWith(ctx, work)
}

func (__ pool_WorkContextOfStringToBytes) Collect(d *WorkContextOfStringToBytes) (context.Context, string, chan<- *ReturnOfBytes) {
	ctx, value, rtn_ch := d.Unpack()
	__.Puts(d)
	return ctx, value, rtn_ch
}

func (__ pool_WorkContextOfStringToBytes) Puts(d *WorkContextOfStringToBytes) {
	work := d.WorkOfStringToBytes
	work.Value = zero_of_WorkOfStringToBytes_Value
	work.ReturnCh = nil
	pool_of_WorkOfStringToBytes.Put(work)

	__.Put(d)
}

type func_worker_StringToBytes struct{}

func (_ func_worker_StringToBytes) New(ctx context.Context, h func(context.Context, string) (context.Context, Bytes, error), n int) *FuncWorkerOfStringToBytes {
	return newFuncWorkerOfStringToBytes(ctx, h, n)
}

type _StringToBytes struct {
	Work struct {
		Pool pool_WorkOfStringToBytes
	}
	WorkContext struct {
		Pool pool_WorkContextOfStringToBytes
	}
	FuncWorker func_worker_StringToBytes
	// Pool struct {
	// Work pool_WorkOfStringToBytes
	// WorkContext pool_WorkContextOfStringToBytes
	// }
}

func (__ _StringToBytes) CallAsSync(ctx context.Context, value string, push func(ctx context.Context, value string, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := Bytess.ChanReturn.Pool.Get()
	defer Bytess.ChanReturn.Pool.Put(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToBytes) CallAsAsync(ctx context.Context, value string, returnCh chan<- *ReturnOfBytes, h func(ctx context.Context, arg string) (context.Context, Bytes, error), defered func()) {
	go func() {
		defer defered()

		ctx, res, err := h(ctx, value)
		rtn := Bytess.Return.Pool.GetWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var StringToBytes = _StringToBytes{}

type WorkerOfStringToString interface {
	Push(ctx context.Context, value string, returnCh chan<- *ReturnOfString)
}

type WorkOfStringToString struct {
	Value    string
	ReturnCh chan<- *ReturnOfString
}

type WorkContextOfStringToString struct {
	Context context.Context
	*WorkOfStringToString
}

func (__ *WorkContextOfStringToString) Unpack() (context.Context, string, chan<- *ReturnOfString) {
	return __.Context, __.Value, __.ReturnCh
}

var (
	zero_of_WorkOfStringToString       WorkOfStringToString
	zero_of_WorkOfStringToString_Value string
	pool_of_WorkOfStringToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToString{}
		},
	}
	pool_of_WorkOfStringToStringContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfStringToString{}
		},
	}
)

type pool_WorkOfStringToString struct{}

func (_ pool_WorkOfStringToString) Get() *WorkOfStringToString {
	return pool_of_WorkOfStringToString.Get().(*WorkOfStringToString)
}
func (_ pool_WorkOfStringToString) Put(d *WorkOfStringToString) {
	d.Value = zero_of_WorkOfStringToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToString.Put(d)
}

func (__ pool_WorkOfStringToString) GetWith(value string, returnCh chan<- *ReturnOfString) *WorkOfStringToString {
	work := __.Get()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

type pool_WorkContextOfStringToString struct{}

func (_ pool_WorkContextOfStringToString) Get() *WorkContextOfStringToString {
	return pool_of_WorkOfStringToStringContext.Get().(*WorkContextOfStringToString)
}
func (_ pool_WorkContextOfStringToString) Put(d *WorkContextOfStringToString) {
	d.Context = nil
	d.WorkOfStringToString = nil
	pool_of_WorkOfStringToStringContext.Put(d)
}

func (__ pool_WorkContextOfStringToString) GetWith(ctx context.Context, work *WorkOfStringToString) *WorkContextOfStringToString {
	work_ctx := __.Get()
	work_ctx.Context = ctx
	work_ctx.WorkOfStringToString = work
	return work_ctx
}

func (__ pool_WorkContextOfStringToString) GetWiths(ctx context.Context, value string, returnCh chan<- *ReturnOfString) *WorkContextOfStringToString {
	work := pool_of_WorkOfStringToString.Get().(*WorkOfStringToString)
	work.Value = value
	work.ReturnCh = returnCh
	return __.GetWith(ctx, work)
}

func (__ pool_WorkContextOfStringToString) Collect(d *WorkContextOfStringToString) (context.Context, string, chan<- *ReturnOfString) {
	ctx, value, rtn_ch := d.Unpack()
	__.Puts(d)
	return ctx, value, rtn_ch
}

func (__ pool_WorkContextOfStringToString) Puts(d *WorkContextOfStringToString) {
	work := d.WorkOfStringToString
	work.Value = zero_of_WorkOfStringToString_Value
	work.ReturnCh = nil
	pool_of_WorkOfStringToString.Put(work)

	__.Put(d)
}

type func_worker_StringToString struct{}

func (_ func_worker_StringToString) New(ctx context.Context, h func(context.Context, string) (context.Context, string, error), n int) *FuncWorkerOfStringToString {
	return newFuncWorkerOfStringToString(ctx, h, n)
}

type _StringToString struct {
	Work struct {
		Pool pool_WorkOfStringToString
	}
	WorkContext struct {
		Pool pool_WorkContextOfStringToString
	}
	FuncWorker func_worker_StringToString
	// Pool struct {
	// Work pool_WorkOfStringToString
	// WorkContext pool_WorkContextOfStringToString
	// }
}

func (__ _StringToString) CallAsSync(ctx context.Context, value string, push func(ctx context.Context, value string, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := Strings.ChanReturn.Pool.Get()
	defer Strings.ChanReturn.Pool.Put(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToString) CallAsAsync(ctx context.Context, value string, returnCh chan<- *ReturnOfString, h func(ctx context.Context, arg string) (context.Context, string, error), defered func()) {
	go func() {
		defer defered()

		ctx, res, err := h(ctx, value)
		rtn := Strings.Return.Pool.GetWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var StringToString = _StringToString{}

type WorkerOfStringToInterface interface {
	Push(ctx context.Context, value string, returnCh chan<- *ReturnOfInterface)
}

type WorkOfStringToInterface struct {
	Value    string
	ReturnCh chan<- *ReturnOfInterface
}

type WorkContextOfStringToInterface struct {
	Context context.Context
	*WorkOfStringToInterface
}

func (__ *WorkContextOfStringToInterface) Unpack() (context.Context, string, chan<- *ReturnOfInterface) {
	return __.Context, __.Value, __.ReturnCh
}

var (
	zero_of_WorkOfStringToInterface       WorkOfStringToInterface
	zero_of_WorkOfStringToInterface_Value string
	pool_of_WorkOfStringToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToInterface{}
		},
	}
	pool_of_WorkOfStringToInterfaceContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfStringToInterface{}
		},
	}
)

type pool_WorkOfStringToInterface struct{}

func (_ pool_WorkOfStringToInterface) Get() *WorkOfStringToInterface {
	return pool_of_WorkOfStringToInterface.Get().(*WorkOfStringToInterface)
}
func (_ pool_WorkOfStringToInterface) Put(d *WorkOfStringToInterface) {
	d.Value = zero_of_WorkOfStringToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToInterface.Put(d)
}

func (__ pool_WorkOfStringToInterface) GetWith(value string, returnCh chan<- *ReturnOfInterface) *WorkOfStringToInterface {
	work := __.Get()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

type pool_WorkContextOfStringToInterface struct{}

func (_ pool_WorkContextOfStringToInterface) Get() *WorkContextOfStringToInterface {
	return pool_of_WorkOfStringToInterfaceContext.Get().(*WorkContextOfStringToInterface)
}
func (_ pool_WorkContextOfStringToInterface) Put(d *WorkContextOfStringToInterface) {
	d.Context = nil
	d.WorkOfStringToInterface = nil
	pool_of_WorkOfStringToInterfaceContext.Put(d)
}

func (__ pool_WorkContextOfStringToInterface) GetWith(ctx context.Context, work *WorkOfStringToInterface) *WorkContextOfStringToInterface {
	work_ctx := __.Get()
	work_ctx.Context = ctx
	work_ctx.WorkOfStringToInterface = work
	return work_ctx
}

func (__ pool_WorkContextOfStringToInterface) GetWiths(ctx context.Context, value string, returnCh chan<- *ReturnOfInterface) *WorkContextOfStringToInterface {
	work := pool_of_WorkOfStringToInterface.Get().(*WorkOfStringToInterface)
	work.Value = value
	work.ReturnCh = returnCh
	return __.GetWith(ctx, work)
}

func (__ pool_WorkContextOfStringToInterface) Collect(d *WorkContextOfStringToInterface) (context.Context, string, chan<- *ReturnOfInterface) {
	ctx, value, rtn_ch := d.Unpack()
	__.Puts(d)
	return ctx, value, rtn_ch
}

func (__ pool_WorkContextOfStringToInterface) Puts(d *WorkContextOfStringToInterface) {
	work := d.WorkOfStringToInterface
	work.Value = zero_of_WorkOfStringToInterface_Value
	work.ReturnCh = nil
	pool_of_WorkOfStringToInterface.Put(work)

	__.Put(d)
}

type func_worker_StringToInterface struct{}

func (_ func_worker_StringToInterface) New(ctx context.Context, h func(context.Context, string) (context.Context, interface{}, error), n int) *FuncWorkerOfStringToInterface {
	return newFuncWorkerOfStringToInterface(ctx, h, n)
}

type _StringToInterface struct {
	Work struct {
		Pool pool_WorkOfStringToInterface
	}
	WorkContext struct {
		Pool pool_WorkContextOfStringToInterface
	}
	FuncWorker func_worker_StringToInterface
	// Pool struct {
	// Work pool_WorkOfStringToInterface
	// WorkContext pool_WorkContextOfStringToInterface
	// }
}

func (__ _StringToInterface) CallAsSync(ctx context.Context, value string, push func(ctx context.Context, value string, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := Interfaces.ChanReturn.Pool.Get()
	defer Interfaces.ChanReturn.Pool.Put(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToInterface) CallAsAsync(ctx context.Context, value string, returnCh chan<- *ReturnOfInterface, h func(ctx context.Context, arg string) (context.Context, interface{}, error), defered func()) {
	go func() {
		defer defered()

		ctx, res, err := h(ctx, value)
		rtn := Interfaces.Return.Pool.GetWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var StringToInterface = _StringToInterface{}

type WorkerOfInterfaceToBytes interface {
	Push(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfBytes)
}

type WorkOfInterfaceToBytes struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfBytes
}

type WorkContextOfInterfaceToBytes struct {
	Context context.Context
	*WorkOfInterfaceToBytes
}

func (__ *WorkContextOfInterfaceToBytes) Unpack() (context.Context, interface{}, chan<- *ReturnOfBytes) {
	return __.Context, __.Value, __.ReturnCh
}

var (
	zero_of_WorkOfInterfaceToBytes       WorkOfInterfaceToBytes
	zero_of_WorkOfInterfaceToBytes_Value interface{}
	pool_of_WorkOfInterfaceToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToBytes{}
		},
	}
	pool_of_WorkOfInterfaceToBytesContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfInterfaceToBytes{}
		},
	}
)

type pool_WorkOfInterfaceToBytes struct{}

func (_ pool_WorkOfInterfaceToBytes) Get() *WorkOfInterfaceToBytes {
	return pool_of_WorkOfInterfaceToBytes.Get().(*WorkOfInterfaceToBytes)
}
func (_ pool_WorkOfInterfaceToBytes) Put(d *WorkOfInterfaceToBytes) {
	d.Value = zero_of_WorkOfInterfaceToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToBytes.Put(d)
}

func (__ pool_WorkOfInterfaceToBytes) GetWith(value interface{}, returnCh chan<- *ReturnOfBytes) *WorkOfInterfaceToBytes {
	work := __.Get()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

type pool_WorkContextOfInterfaceToBytes struct{}

func (_ pool_WorkContextOfInterfaceToBytes) Get() *WorkContextOfInterfaceToBytes {
	return pool_of_WorkOfInterfaceToBytesContext.Get().(*WorkContextOfInterfaceToBytes)
}
func (_ pool_WorkContextOfInterfaceToBytes) Put(d *WorkContextOfInterfaceToBytes) {
	d.Context = nil
	d.WorkOfInterfaceToBytes = nil
	pool_of_WorkOfInterfaceToBytesContext.Put(d)
}

func (__ pool_WorkContextOfInterfaceToBytes) GetWith(ctx context.Context, work *WorkOfInterfaceToBytes) *WorkContextOfInterfaceToBytes {
	work_ctx := __.Get()
	work_ctx.Context = ctx
	work_ctx.WorkOfInterfaceToBytes = work
	return work_ctx
}

func (__ pool_WorkContextOfInterfaceToBytes) GetWiths(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfBytes) *WorkContextOfInterfaceToBytes {
	work := pool_of_WorkOfInterfaceToBytes.Get().(*WorkOfInterfaceToBytes)
	work.Value = value
	work.ReturnCh = returnCh
	return __.GetWith(ctx, work)
}

func (__ pool_WorkContextOfInterfaceToBytes) Collect(d *WorkContextOfInterfaceToBytes) (context.Context, interface{}, chan<- *ReturnOfBytes) {
	ctx, value, rtn_ch := d.Unpack()
	__.Puts(d)
	return ctx, value, rtn_ch
}

func (__ pool_WorkContextOfInterfaceToBytes) Puts(d *WorkContextOfInterfaceToBytes) {
	work := d.WorkOfInterfaceToBytes
	work.Value = zero_of_WorkOfInterfaceToBytes_Value
	work.ReturnCh = nil
	pool_of_WorkOfInterfaceToBytes.Put(work)

	__.Put(d)
}

type func_worker_InterfaceToBytes struct{}

func (_ func_worker_InterfaceToBytes) New(ctx context.Context, h func(context.Context, interface{}) (context.Context, Bytes, error), n int) *FuncWorkerOfInterfaceToBytes {
	return newFuncWorkerOfInterfaceToBytes(ctx, h, n)
}

type _InterfaceToBytes struct {
	Work struct {
		Pool pool_WorkOfInterfaceToBytes
	}
	WorkContext struct {
		Pool pool_WorkContextOfInterfaceToBytes
	}
	FuncWorker func_worker_InterfaceToBytes
	// Pool struct {
	// Work pool_WorkOfInterfaceToBytes
	// WorkContext pool_WorkContextOfInterfaceToBytes
	// }
}

func (__ _InterfaceToBytes) CallAsSync(ctx context.Context, value interface{}, push func(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := Bytess.ChanReturn.Pool.Get()
	defer Bytess.ChanReturn.Pool.Put(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToBytes) CallAsAsync(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfBytes, h func(ctx context.Context, arg interface{}) (context.Context, Bytes, error), defered func()) {
	go func() {
		defer defered()

		ctx, res, err := h(ctx, value)
		rtn := Bytess.Return.Pool.GetWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var InterfaceToBytes = _InterfaceToBytes{}

type WorkerOfInterfaceToString interface {
	Push(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfString)
}

type WorkOfInterfaceToString struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfString
}

type WorkContextOfInterfaceToString struct {
	Context context.Context
	*WorkOfInterfaceToString
}

func (__ *WorkContextOfInterfaceToString) Unpack() (context.Context, interface{}, chan<- *ReturnOfString) {
	return __.Context, __.Value, __.ReturnCh
}

var (
	zero_of_WorkOfInterfaceToString       WorkOfInterfaceToString
	zero_of_WorkOfInterfaceToString_Value interface{}
	pool_of_WorkOfInterfaceToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToString{}
		},
	}
	pool_of_WorkOfInterfaceToStringContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfInterfaceToString{}
		},
	}
)

type pool_WorkOfInterfaceToString struct{}

func (_ pool_WorkOfInterfaceToString) Get() *WorkOfInterfaceToString {
	return pool_of_WorkOfInterfaceToString.Get().(*WorkOfInterfaceToString)
}
func (_ pool_WorkOfInterfaceToString) Put(d *WorkOfInterfaceToString) {
	d.Value = zero_of_WorkOfInterfaceToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToString.Put(d)
}

func (__ pool_WorkOfInterfaceToString) GetWith(value interface{}, returnCh chan<- *ReturnOfString) *WorkOfInterfaceToString {
	work := __.Get()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

type pool_WorkContextOfInterfaceToString struct{}

func (_ pool_WorkContextOfInterfaceToString) Get() *WorkContextOfInterfaceToString {
	return pool_of_WorkOfInterfaceToStringContext.Get().(*WorkContextOfInterfaceToString)
}
func (_ pool_WorkContextOfInterfaceToString) Put(d *WorkContextOfInterfaceToString) {
	d.Context = nil
	d.WorkOfInterfaceToString = nil
	pool_of_WorkOfInterfaceToStringContext.Put(d)
}

func (__ pool_WorkContextOfInterfaceToString) GetWith(ctx context.Context, work *WorkOfInterfaceToString) *WorkContextOfInterfaceToString {
	work_ctx := __.Get()
	work_ctx.Context = ctx
	work_ctx.WorkOfInterfaceToString = work
	return work_ctx
}

func (__ pool_WorkContextOfInterfaceToString) GetWiths(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfString) *WorkContextOfInterfaceToString {
	work := pool_of_WorkOfInterfaceToString.Get().(*WorkOfInterfaceToString)
	work.Value = value
	work.ReturnCh = returnCh
	return __.GetWith(ctx, work)
}

func (__ pool_WorkContextOfInterfaceToString) Collect(d *WorkContextOfInterfaceToString) (context.Context, interface{}, chan<- *ReturnOfString) {
	ctx, value, rtn_ch := d.Unpack()
	__.Puts(d)
	return ctx, value, rtn_ch
}

func (__ pool_WorkContextOfInterfaceToString) Puts(d *WorkContextOfInterfaceToString) {
	work := d.WorkOfInterfaceToString
	work.Value = zero_of_WorkOfInterfaceToString_Value
	work.ReturnCh = nil
	pool_of_WorkOfInterfaceToString.Put(work)

	__.Put(d)
}

type func_worker_InterfaceToString struct{}

func (_ func_worker_InterfaceToString) New(ctx context.Context, h func(context.Context, interface{}) (context.Context, string, error), n int) *FuncWorkerOfInterfaceToString {
	return newFuncWorkerOfInterfaceToString(ctx, h, n)
}

type _InterfaceToString struct {
	Work struct {
		Pool pool_WorkOfInterfaceToString
	}
	WorkContext struct {
		Pool pool_WorkContextOfInterfaceToString
	}
	FuncWorker func_worker_InterfaceToString
	// Pool struct {
	// Work pool_WorkOfInterfaceToString
	// WorkContext pool_WorkContextOfInterfaceToString
	// }
}

func (__ _InterfaceToString) CallAsSync(ctx context.Context, value interface{}, push func(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := Strings.ChanReturn.Pool.Get()
	defer Strings.ChanReturn.Pool.Put(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToString) CallAsAsync(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfString, h func(ctx context.Context, arg interface{}) (context.Context, string, error), defered func()) {
	go func() {
		defer defered()

		ctx, res, err := h(ctx, value)
		rtn := Strings.Return.Pool.GetWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var InterfaceToString = _InterfaceToString{}

type WorkerOfInterfaceToInterface interface {
	Push(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfInterface)
}

type WorkOfInterfaceToInterface struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfInterface
}

type WorkContextOfInterfaceToInterface struct {
	Context context.Context
	*WorkOfInterfaceToInterface
}

func (__ *WorkContextOfInterfaceToInterface) Unpack() (context.Context, interface{}, chan<- *ReturnOfInterface) {
	return __.Context, __.Value, __.ReturnCh
}

var (
	zero_of_WorkOfInterfaceToInterface       WorkOfInterfaceToInterface
	zero_of_WorkOfInterfaceToInterface_Value interface{}
	pool_of_WorkOfInterfaceToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToInterface{}
		},
	}
	pool_of_WorkOfInterfaceToInterfaceContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfInterfaceToInterface{}
		},
	}
)

type pool_WorkOfInterfaceToInterface struct{}

func (_ pool_WorkOfInterfaceToInterface) Get() *WorkOfInterfaceToInterface {
	return pool_of_WorkOfInterfaceToInterface.Get().(*WorkOfInterfaceToInterface)
}
func (_ pool_WorkOfInterfaceToInterface) Put(d *WorkOfInterfaceToInterface) {
	d.Value = zero_of_WorkOfInterfaceToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToInterface.Put(d)
}

func (__ pool_WorkOfInterfaceToInterface) GetWith(value interface{}, returnCh chan<- *ReturnOfInterface) *WorkOfInterfaceToInterface {
	work := __.Get()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

type pool_WorkContextOfInterfaceToInterface struct{}

func (_ pool_WorkContextOfInterfaceToInterface) Get() *WorkContextOfInterfaceToInterface {
	return pool_of_WorkOfInterfaceToInterfaceContext.Get().(*WorkContextOfInterfaceToInterface)
}
func (_ pool_WorkContextOfInterfaceToInterface) Put(d *WorkContextOfInterfaceToInterface) {
	d.Context = nil
	d.WorkOfInterfaceToInterface = nil
	pool_of_WorkOfInterfaceToInterfaceContext.Put(d)
}

func (__ pool_WorkContextOfInterfaceToInterface) GetWith(ctx context.Context, work *WorkOfInterfaceToInterface) *WorkContextOfInterfaceToInterface {
	work_ctx := __.Get()
	work_ctx.Context = ctx
	work_ctx.WorkOfInterfaceToInterface = work
	return work_ctx
}

func (__ pool_WorkContextOfInterfaceToInterface) GetWiths(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfInterface) *WorkContextOfInterfaceToInterface {
	work := pool_of_WorkOfInterfaceToInterface.Get().(*WorkOfInterfaceToInterface)
	work.Value = value
	work.ReturnCh = returnCh
	return __.GetWith(ctx, work)
}

func (__ pool_WorkContextOfInterfaceToInterface) Collect(d *WorkContextOfInterfaceToInterface) (context.Context, interface{}, chan<- *ReturnOfInterface) {
	ctx, value, rtn_ch := d.Unpack()
	__.Puts(d)
	return ctx, value, rtn_ch
}

func (__ pool_WorkContextOfInterfaceToInterface) Puts(d *WorkContextOfInterfaceToInterface) {
	work := d.WorkOfInterfaceToInterface
	work.Value = zero_of_WorkOfInterfaceToInterface_Value
	work.ReturnCh = nil
	pool_of_WorkOfInterfaceToInterface.Put(work)

	__.Put(d)
}

type func_worker_InterfaceToInterface struct{}

func (_ func_worker_InterfaceToInterface) New(ctx context.Context, h func(context.Context, interface{}) (context.Context, interface{}, error), n int) *FuncWorkerOfInterfaceToInterface {
	return newFuncWorkerOfInterfaceToInterface(ctx, h, n)
}

type _InterfaceToInterface struct {
	Work struct {
		Pool pool_WorkOfInterfaceToInterface
	}
	WorkContext struct {
		Pool pool_WorkContextOfInterfaceToInterface
	}
	FuncWorker func_worker_InterfaceToInterface
	// Pool struct {
	// Work pool_WorkOfInterfaceToInterface
	// WorkContext pool_WorkContextOfInterfaceToInterface
	// }
}

func (__ _InterfaceToInterface) CallAsSync(ctx context.Context, value interface{}, push func(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := Interfaces.ChanReturn.Pool.Get()
	defer Interfaces.ChanReturn.Pool.Put(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToInterface) CallAsAsync(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfInterface, h func(ctx context.Context, arg interface{}) (context.Context, interface{}, error), defered func()) {
	go func() {
		defer defered()

		ctx, res, err := h(ctx, value)
		rtn := Interfaces.Return.Pool.GetWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var InterfaceToInterface = _InterfaceToInterface{}
