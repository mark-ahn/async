// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package async

import (
	"context"
	"sync"
)

type WorkerOfBytesToBytes interface {
	Push(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfBytes)
}

type WorkOfBytesToBytes struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfBytes
}

type WorkContextOfBytesToBytes struct {
	Context context.Context
	*WorkOfBytesToBytes
}

var (
	zero_of_WorkOfBytesToBytes       WorkOfBytesToBytes
	zero_of_WorkOfBytesToBytes_Value Bytes
	pool_of_WorkOfBytesToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToBytes{}
		},
	}
	pool_of_WorkOfBytesToBytesContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfBytesToBytes{}
		},
	}
)

func getWorkOfBytesToBytes() *WorkOfBytesToBytes {
	return pool_of_WorkOfBytesToBytes.Get().(*WorkOfBytesToBytes)
}
func putWorkOfBytesToBytes(d *WorkOfBytesToBytes) {
	d.Value = zero_of_WorkOfBytesToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToBytes.Put(d)
}

func getWorkContextOfBytesToBytes() *WorkContextOfBytesToBytes {
	return pool_of_WorkOfBytesToBytesContext.Get().(*WorkContextOfBytesToBytes)
}
func putWorkContextOfBytesToBytes(d *WorkContextOfBytesToBytes) {
	d.Context = nil
	d.Value = zero_of_WorkOfBytesToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToBytesContext.Put(d)
}

type _BytesToBytes struct{}

func (_ _BytesToBytes) GetWork() *WorkOfBytesToBytes {
	return getWorkOfBytesToBytes()
}
func (__ _BytesToBytes) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfBytes) *WorkOfBytesToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToBytes) PutWork(d *WorkOfBytesToBytes) {
	putWorkOfBytesToBytes(d)
}

func (_ _BytesToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _BytesToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _BytesToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _BytesToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (_ _BytesToBytes) GetWorkContext() *WorkContextOfBytesToBytes {
	return getWorkContextOfBytesToBytes()
}
func (__ _BytesToBytes) GetWorkContextWith(ctx context.Context, work *WorkOfBytesToBytes) *WorkContextOfBytesToBytes {
	work_ctx := __.GetWorkContext()
	work_ctx.Context = ctx
	work_ctx.WorkOfBytesToBytes = work
	return work_ctx
}

func (_ _BytesToBytes) PutWorkContext(d *WorkContextOfBytesToBytes) {
	putWorkContextOfBytesToBytes(d)
}

func (__ _BytesToBytes) CallAsSync(ctx context.Context, value Bytes, push func(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToBytes) CallAsAsync(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfBytes, h func(ctx context.Context, arg Bytes) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, value)
		rtn := __.GetReturnWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var BytesToBytes = _BytesToBytes{}

type WorkerOfBytesToString interface {
	Push(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfString)
}

type WorkOfBytesToString struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfString
}

type WorkContextOfBytesToString struct {
	Context context.Context
	*WorkOfBytesToString
}

var (
	zero_of_WorkOfBytesToString       WorkOfBytesToString
	zero_of_WorkOfBytesToString_Value Bytes
	pool_of_WorkOfBytesToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToString{}
		},
	}
	pool_of_WorkOfBytesToStringContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfBytesToString{}
		},
	}
)

func getWorkOfBytesToString() *WorkOfBytesToString {
	return pool_of_WorkOfBytesToString.Get().(*WorkOfBytesToString)
}
func putWorkOfBytesToString(d *WorkOfBytesToString) {
	d.Value = zero_of_WorkOfBytesToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToString.Put(d)
}

func getWorkContextOfBytesToString() *WorkContextOfBytesToString {
	return pool_of_WorkOfBytesToStringContext.Get().(*WorkContextOfBytesToString)
}
func putWorkContextOfBytesToString(d *WorkContextOfBytesToString) {
	d.Context = nil
	d.Value = zero_of_WorkOfBytesToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToStringContext.Put(d)
}

type _BytesToString struct{}

func (_ _BytesToString) GetWork() *WorkOfBytesToString {
	return getWorkOfBytesToString()
}
func (__ _BytesToString) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfString) *WorkOfBytesToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToString) PutWork(d *WorkOfBytesToString) {
	putWorkOfBytesToString(d)
}

func (_ _BytesToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _BytesToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _BytesToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _BytesToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (_ _BytesToString) GetWorkContext() *WorkContextOfBytesToString {
	return getWorkContextOfBytesToString()
}
func (__ _BytesToString) GetWorkContextWith(ctx context.Context, work *WorkOfBytesToString) *WorkContextOfBytesToString {
	work_ctx := __.GetWorkContext()
	work_ctx.Context = ctx
	work_ctx.WorkOfBytesToString = work
	return work_ctx
}

func (_ _BytesToString) PutWorkContext(d *WorkContextOfBytesToString) {
	putWorkContextOfBytesToString(d)
}

func (__ _BytesToString) CallAsSync(ctx context.Context, value Bytes, push func(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToString) CallAsAsync(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfString, h func(ctx context.Context, arg Bytes) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, value)
		rtn := __.GetReturnWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var BytesToString = _BytesToString{}

type WorkerOfBytesToInterface interface {
	Push(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfInterface)
}

type WorkOfBytesToInterface struct {
	Value    Bytes
	ReturnCh chan<- *ReturnOfInterface
}

type WorkContextOfBytesToInterface struct {
	Context context.Context
	*WorkOfBytesToInterface
}

var (
	zero_of_WorkOfBytesToInterface       WorkOfBytesToInterface
	zero_of_WorkOfBytesToInterface_Value Bytes
	pool_of_WorkOfBytesToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfBytesToInterface{}
		},
	}
	pool_of_WorkOfBytesToInterfaceContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfBytesToInterface{}
		},
	}
)

func getWorkOfBytesToInterface() *WorkOfBytesToInterface {
	return pool_of_WorkOfBytesToInterface.Get().(*WorkOfBytesToInterface)
}
func putWorkOfBytesToInterface(d *WorkOfBytesToInterface) {
	d.Value = zero_of_WorkOfBytesToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToInterface.Put(d)
}

func getWorkContextOfBytesToInterface() *WorkContextOfBytesToInterface {
	return pool_of_WorkOfBytesToInterfaceContext.Get().(*WorkContextOfBytesToInterface)
}
func putWorkContextOfBytesToInterface(d *WorkContextOfBytesToInterface) {
	d.Context = nil
	d.Value = zero_of_WorkOfBytesToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfBytesToInterfaceContext.Put(d)
}

type _BytesToInterface struct{}

func (_ _BytesToInterface) GetWork() *WorkOfBytesToInterface {
	return getWorkOfBytesToInterface()
}
func (__ _BytesToInterface) GetWorkWith(value Bytes, returnCh chan<- *ReturnOfInterface) *WorkOfBytesToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _BytesToInterface) PutWork(d *WorkOfBytesToInterface) {
	putWorkOfBytesToInterface(d)
}

func (_ _BytesToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _BytesToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _BytesToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _BytesToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _BytesToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (_ _BytesToInterface) GetWorkContext() *WorkContextOfBytesToInterface {
	return getWorkContextOfBytesToInterface()
}
func (__ _BytesToInterface) GetWorkContextWith(ctx context.Context, work *WorkOfBytesToInterface) *WorkContextOfBytesToInterface {
	work_ctx := __.GetWorkContext()
	work_ctx.Context = ctx
	work_ctx.WorkOfBytesToInterface = work
	return work_ctx
}

func (_ _BytesToInterface) PutWorkContext(d *WorkContextOfBytesToInterface) {
	putWorkContextOfBytesToInterface(d)
}

func (__ _BytesToInterface) CallAsSync(ctx context.Context, value Bytes, push func(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _BytesToInterface) CallAsAsync(ctx context.Context, value Bytes, returnCh chan<- *ReturnOfInterface, h func(ctx context.Context, arg Bytes) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, value)
		rtn := __.GetReturnWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var BytesToInterface = _BytesToInterface{}

type WorkerOfStringToBytes interface {
	Push(ctx context.Context, value string, returnCh chan<- *ReturnOfBytes)
}

type WorkOfStringToBytes struct {
	Value    string
	ReturnCh chan<- *ReturnOfBytes
}

type WorkContextOfStringToBytes struct {
	Context context.Context
	*WorkOfStringToBytes
}

var (
	zero_of_WorkOfStringToBytes       WorkOfStringToBytes
	zero_of_WorkOfStringToBytes_Value string
	pool_of_WorkOfStringToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToBytes{}
		},
	}
	pool_of_WorkOfStringToBytesContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfStringToBytes{}
		},
	}
)

func getWorkOfStringToBytes() *WorkOfStringToBytes {
	return pool_of_WorkOfStringToBytes.Get().(*WorkOfStringToBytes)
}
func putWorkOfStringToBytes(d *WorkOfStringToBytes) {
	d.Value = zero_of_WorkOfStringToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToBytes.Put(d)
}

func getWorkContextOfStringToBytes() *WorkContextOfStringToBytes {
	return pool_of_WorkOfStringToBytesContext.Get().(*WorkContextOfStringToBytes)
}
func putWorkContextOfStringToBytes(d *WorkContextOfStringToBytes) {
	d.Context = nil
	d.Value = zero_of_WorkOfStringToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToBytesContext.Put(d)
}

type _StringToBytes struct{}

func (_ _StringToBytes) GetWork() *WorkOfStringToBytes {
	return getWorkOfStringToBytes()
}
func (__ _StringToBytes) GetWorkWith(value string, returnCh chan<- *ReturnOfBytes) *WorkOfStringToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToBytes) PutWork(d *WorkOfStringToBytes) {
	putWorkOfStringToBytes(d)
}

func (_ _StringToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _StringToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _StringToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _StringToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (_ _StringToBytes) GetWorkContext() *WorkContextOfStringToBytes {
	return getWorkContextOfStringToBytes()
}
func (__ _StringToBytes) GetWorkContextWith(ctx context.Context, work *WorkOfStringToBytes) *WorkContextOfStringToBytes {
	work_ctx := __.GetWorkContext()
	work_ctx.Context = ctx
	work_ctx.WorkOfStringToBytes = work
	return work_ctx
}

func (_ _StringToBytes) PutWorkContext(d *WorkContextOfStringToBytes) {
	putWorkContextOfStringToBytes(d)
}

func (__ _StringToBytes) CallAsSync(ctx context.Context, value string, push func(ctx context.Context, value string, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToBytes) CallAsAsync(ctx context.Context, value string, returnCh chan<- *ReturnOfBytes, h func(ctx context.Context, arg string) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, value)
		rtn := __.GetReturnWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var StringToBytes = _StringToBytes{}

type WorkerOfStringToString interface {
	Push(ctx context.Context, value string, returnCh chan<- *ReturnOfString)
}

type WorkOfStringToString struct {
	Value    string
	ReturnCh chan<- *ReturnOfString
}

type WorkContextOfStringToString struct {
	Context context.Context
	*WorkOfStringToString
}

var (
	zero_of_WorkOfStringToString       WorkOfStringToString
	zero_of_WorkOfStringToString_Value string
	pool_of_WorkOfStringToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToString{}
		},
	}
	pool_of_WorkOfStringToStringContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfStringToString{}
		},
	}
)

func getWorkOfStringToString() *WorkOfStringToString {
	return pool_of_WorkOfStringToString.Get().(*WorkOfStringToString)
}
func putWorkOfStringToString(d *WorkOfStringToString) {
	d.Value = zero_of_WorkOfStringToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToString.Put(d)
}

func getWorkContextOfStringToString() *WorkContextOfStringToString {
	return pool_of_WorkOfStringToStringContext.Get().(*WorkContextOfStringToString)
}
func putWorkContextOfStringToString(d *WorkContextOfStringToString) {
	d.Context = nil
	d.Value = zero_of_WorkOfStringToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToStringContext.Put(d)
}

type _StringToString struct{}

func (_ _StringToString) GetWork() *WorkOfStringToString {
	return getWorkOfStringToString()
}
func (__ _StringToString) GetWorkWith(value string, returnCh chan<- *ReturnOfString) *WorkOfStringToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToString) PutWork(d *WorkOfStringToString) {
	putWorkOfStringToString(d)
}

func (_ _StringToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _StringToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _StringToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _StringToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (_ _StringToString) GetWorkContext() *WorkContextOfStringToString {
	return getWorkContextOfStringToString()
}
func (__ _StringToString) GetWorkContextWith(ctx context.Context, work *WorkOfStringToString) *WorkContextOfStringToString {
	work_ctx := __.GetWorkContext()
	work_ctx.Context = ctx
	work_ctx.WorkOfStringToString = work
	return work_ctx
}

func (_ _StringToString) PutWorkContext(d *WorkContextOfStringToString) {
	putWorkContextOfStringToString(d)
}

func (__ _StringToString) CallAsSync(ctx context.Context, value string, push func(ctx context.Context, value string, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToString) CallAsAsync(ctx context.Context, value string, returnCh chan<- *ReturnOfString, h func(ctx context.Context, arg string) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, value)
		rtn := __.GetReturnWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var StringToString = _StringToString{}

type WorkerOfStringToInterface interface {
	Push(ctx context.Context, value string, returnCh chan<- *ReturnOfInterface)
}

type WorkOfStringToInterface struct {
	Value    string
	ReturnCh chan<- *ReturnOfInterface
}

type WorkContextOfStringToInterface struct {
	Context context.Context
	*WorkOfStringToInterface
}

var (
	zero_of_WorkOfStringToInterface       WorkOfStringToInterface
	zero_of_WorkOfStringToInterface_Value string
	pool_of_WorkOfStringToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfStringToInterface{}
		},
	}
	pool_of_WorkOfStringToInterfaceContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfStringToInterface{}
		},
	}
)

func getWorkOfStringToInterface() *WorkOfStringToInterface {
	return pool_of_WorkOfStringToInterface.Get().(*WorkOfStringToInterface)
}
func putWorkOfStringToInterface(d *WorkOfStringToInterface) {
	d.Value = zero_of_WorkOfStringToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToInterface.Put(d)
}

func getWorkContextOfStringToInterface() *WorkContextOfStringToInterface {
	return pool_of_WorkOfStringToInterfaceContext.Get().(*WorkContextOfStringToInterface)
}
func putWorkContextOfStringToInterface(d *WorkContextOfStringToInterface) {
	d.Context = nil
	d.Value = zero_of_WorkOfStringToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfStringToInterfaceContext.Put(d)
}

type _StringToInterface struct{}

func (_ _StringToInterface) GetWork() *WorkOfStringToInterface {
	return getWorkOfStringToInterface()
}
func (__ _StringToInterface) GetWorkWith(value string, returnCh chan<- *ReturnOfInterface) *WorkOfStringToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _StringToInterface) PutWork(d *WorkOfStringToInterface) {
	putWorkOfStringToInterface(d)
}

func (_ _StringToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _StringToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _StringToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _StringToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _StringToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (_ _StringToInterface) GetWorkContext() *WorkContextOfStringToInterface {
	return getWorkContextOfStringToInterface()
}
func (__ _StringToInterface) GetWorkContextWith(ctx context.Context, work *WorkOfStringToInterface) *WorkContextOfStringToInterface {
	work_ctx := __.GetWorkContext()
	work_ctx.Context = ctx
	work_ctx.WorkOfStringToInterface = work
	return work_ctx
}

func (_ _StringToInterface) PutWorkContext(d *WorkContextOfStringToInterface) {
	putWorkContextOfStringToInterface(d)
}

func (__ _StringToInterface) CallAsSync(ctx context.Context, value string, push func(ctx context.Context, value string, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _StringToInterface) CallAsAsync(ctx context.Context, value string, returnCh chan<- *ReturnOfInterface, h func(ctx context.Context, arg string) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, value)
		rtn := __.GetReturnWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var StringToInterface = _StringToInterface{}

type WorkerOfInterfaceToBytes interface {
	Push(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfBytes)
}

type WorkOfInterfaceToBytes struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfBytes
}

type WorkContextOfInterfaceToBytes struct {
	Context context.Context
	*WorkOfInterfaceToBytes
}

var (
	zero_of_WorkOfInterfaceToBytes       WorkOfInterfaceToBytes
	zero_of_WorkOfInterfaceToBytes_Value interface{}
	pool_of_WorkOfInterfaceToBytes       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToBytes{}
		},
	}
	pool_of_WorkOfInterfaceToBytesContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfInterfaceToBytes{}
		},
	}
)

func getWorkOfInterfaceToBytes() *WorkOfInterfaceToBytes {
	return pool_of_WorkOfInterfaceToBytes.Get().(*WorkOfInterfaceToBytes)
}
func putWorkOfInterfaceToBytes(d *WorkOfInterfaceToBytes) {
	d.Value = zero_of_WorkOfInterfaceToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToBytes.Put(d)
}

func getWorkContextOfInterfaceToBytes() *WorkContextOfInterfaceToBytes {
	return pool_of_WorkOfInterfaceToBytesContext.Get().(*WorkContextOfInterfaceToBytes)
}
func putWorkContextOfInterfaceToBytes(d *WorkContextOfInterfaceToBytes) {
	d.Context = nil
	d.Value = zero_of_WorkOfInterfaceToBytes_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToBytesContext.Put(d)
}

type _InterfaceToBytes struct{}

func (_ _InterfaceToBytes) GetWork() *WorkOfInterfaceToBytes {
	return getWorkOfInterfaceToBytes()
}
func (__ _InterfaceToBytes) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfBytes) *WorkOfInterfaceToBytes {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToBytes) PutWork(d *WorkOfInterfaceToBytes) {
	putWorkOfInterfaceToBytes(d)
}

func (_ _InterfaceToBytes) GetReturn() *ReturnOfBytes {
	return getReturnOfBytes()
}

func (__ _InterfaceToBytes) GetReturnWith(ctx context.Context, value Bytes, err error) *ReturnOfBytes {
	rtn := getReturnOfBytes()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToBytes) PutReturn(d *ReturnOfBytes) {
	putReturnOfBytes(d)
}

func (_ _InterfaceToBytes) GetReturnCh() chan *ReturnOfBytes {
	return getReturnChOfBytes()
}

func (_ _InterfaceToBytes) PutReturnCh(d chan *ReturnOfBytes) {
	putReturnChOfBytes(d)
}

func (_ _InterfaceToBytes) GetWorkContext() *WorkContextOfInterfaceToBytes {
	return getWorkContextOfInterfaceToBytes()
}
func (__ _InterfaceToBytes) GetWorkContextWith(ctx context.Context, work *WorkOfInterfaceToBytes) *WorkContextOfInterfaceToBytes {
	work_ctx := __.GetWorkContext()
	work_ctx.Context = ctx
	work_ctx.WorkOfInterfaceToBytes = work
	return work_ctx
}

func (_ _InterfaceToBytes) PutWorkContext(d *WorkContextOfInterfaceToBytes) {
	putWorkContextOfInterfaceToBytes(d)
}

func (__ _InterfaceToBytes) CallAsSync(ctx context.Context, value interface{}, push func(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfBytes)) (context.Context, Bytes, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToBytes) CallAsAsync(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfBytes, h func(ctx context.Context, arg interface{}) (Bytes, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, value)
		rtn := __.GetReturnWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var InterfaceToBytes = _InterfaceToBytes{}

type WorkerOfInterfaceToString interface {
	Push(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfString)
}

type WorkOfInterfaceToString struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfString
}

type WorkContextOfInterfaceToString struct {
	Context context.Context
	*WorkOfInterfaceToString
}

var (
	zero_of_WorkOfInterfaceToString       WorkOfInterfaceToString
	zero_of_WorkOfInterfaceToString_Value interface{}
	pool_of_WorkOfInterfaceToString       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToString{}
		},
	}
	pool_of_WorkOfInterfaceToStringContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfInterfaceToString{}
		},
	}
)

func getWorkOfInterfaceToString() *WorkOfInterfaceToString {
	return pool_of_WorkOfInterfaceToString.Get().(*WorkOfInterfaceToString)
}
func putWorkOfInterfaceToString(d *WorkOfInterfaceToString) {
	d.Value = zero_of_WorkOfInterfaceToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToString.Put(d)
}

func getWorkContextOfInterfaceToString() *WorkContextOfInterfaceToString {
	return pool_of_WorkOfInterfaceToStringContext.Get().(*WorkContextOfInterfaceToString)
}
func putWorkContextOfInterfaceToString(d *WorkContextOfInterfaceToString) {
	d.Context = nil
	d.Value = zero_of_WorkOfInterfaceToString_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToStringContext.Put(d)
}

type _InterfaceToString struct{}

func (_ _InterfaceToString) GetWork() *WorkOfInterfaceToString {
	return getWorkOfInterfaceToString()
}
func (__ _InterfaceToString) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfString) *WorkOfInterfaceToString {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToString) PutWork(d *WorkOfInterfaceToString) {
	putWorkOfInterfaceToString(d)
}

func (_ _InterfaceToString) GetReturn() *ReturnOfString {
	return getReturnOfString()
}

func (__ _InterfaceToString) GetReturnWith(ctx context.Context, value string, err error) *ReturnOfString {
	rtn := getReturnOfString()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToString) PutReturn(d *ReturnOfString) {
	putReturnOfString(d)
}

func (_ _InterfaceToString) GetReturnCh() chan *ReturnOfString {
	return getReturnChOfString()
}

func (_ _InterfaceToString) PutReturnCh(d chan *ReturnOfString) {
	putReturnChOfString(d)
}

func (_ _InterfaceToString) GetWorkContext() *WorkContextOfInterfaceToString {
	return getWorkContextOfInterfaceToString()
}
func (__ _InterfaceToString) GetWorkContextWith(ctx context.Context, work *WorkOfInterfaceToString) *WorkContextOfInterfaceToString {
	work_ctx := __.GetWorkContext()
	work_ctx.Context = ctx
	work_ctx.WorkOfInterfaceToString = work
	return work_ctx
}

func (_ _InterfaceToString) PutWorkContext(d *WorkContextOfInterfaceToString) {
	putWorkContextOfInterfaceToString(d)
}

func (__ _InterfaceToString) CallAsSync(ctx context.Context, value interface{}, push func(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfString)) (context.Context, string, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToString) CallAsAsync(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfString, h func(ctx context.Context, arg interface{}) (string, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, value)
		rtn := __.GetReturnWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var InterfaceToString = _InterfaceToString{}

type WorkerOfInterfaceToInterface interface {
	Push(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfInterface)
}

type WorkOfInterfaceToInterface struct {
	Value    interface{}
	ReturnCh chan<- *ReturnOfInterface
}

type WorkContextOfInterfaceToInterface struct {
	Context context.Context
	*WorkOfInterfaceToInterface
}

var (
	zero_of_WorkOfInterfaceToInterface       WorkOfInterfaceToInterface
	zero_of_WorkOfInterfaceToInterface_Value interface{}
	pool_of_WorkOfInterfaceToInterface       = sync.Pool{
		New: func() interface{} {
			return &WorkOfInterfaceToInterface{}
		},
	}
	pool_of_WorkOfInterfaceToInterfaceContext = sync.Pool{
		New: func() interface{} {
			return &WorkContextOfInterfaceToInterface{}
		},
	}
)

func getWorkOfInterfaceToInterface() *WorkOfInterfaceToInterface {
	return pool_of_WorkOfInterfaceToInterface.Get().(*WorkOfInterfaceToInterface)
}
func putWorkOfInterfaceToInterface(d *WorkOfInterfaceToInterface) {
	d.Value = zero_of_WorkOfInterfaceToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToInterface.Put(d)
}

func getWorkContextOfInterfaceToInterface() *WorkContextOfInterfaceToInterface {
	return pool_of_WorkOfInterfaceToInterfaceContext.Get().(*WorkContextOfInterfaceToInterface)
}
func putWorkContextOfInterfaceToInterface(d *WorkContextOfInterfaceToInterface) {
	d.Context = nil
	d.Value = zero_of_WorkOfInterfaceToInterface_Value
	d.ReturnCh = nil
	pool_of_WorkOfInterfaceToInterfaceContext.Put(d)
}

type _InterfaceToInterface struct{}

func (_ _InterfaceToInterface) GetWork() *WorkOfInterfaceToInterface {
	return getWorkOfInterfaceToInterface()
}
func (__ _InterfaceToInterface) GetWorkWith(value interface{}, returnCh chan<- *ReturnOfInterface) *WorkOfInterfaceToInterface {
	work := __.GetWork()
	work.Value = value
	work.ReturnCh = returnCh
	return work
}

func (_ _InterfaceToInterface) PutWork(d *WorkOfInterfaceToInterface) {
	putWorkOfInterfaceToInterface(d)
}

func (_ _InterfaceToInterface) GetReturn() *ReturnOfInterface {
	return getReturnOfInterface()
}

func (__ _InterfaceToInterface) GetReturnWith(ctx context.Context, value interface{}, err error) *ReturnOfInterface {
	rtn := getReturnOfInterface()
	rtn.Context = ctx
	rtn.Value = value
	rtn.Error = err
	return rtn
}

func (_ _InterfaceToInterface) PutReturn(d *ReturnOfInterface) {
	putReturnOfInterface(d)
}

func (_ _InterfaceToInterface) GetReturnCh() chan *ReturnOfInterface {
	return getReturnChOfInterface()
}

func (_ _InterfaceToInterface) PutReturnCh(d chan *ReturnOfInterface) {
	putReturnChOfInterface(d)
}

func (_ _InterfaceToInterface) GetWorkContext() *WorkContextOfInterfaceToInterface {
	return getWorkContextOfInterfaceToInterface()
}
func (__ _InterfaceToInterface) GetWorkContextWith(ctx context.Context, work *WorkOfInterfaceToInterface) *WorkContextOfInterfaceToInterface {
	work_ctx := __.GetWorkContext()
	work_ctx.Context = ctx
	work_ctx.WorkOfInterfaceToInterface = work
	return work_ctx
}

func (_ _InterfaceToInterface) PutWorkContext(d *WorkContextOfInterfaceToInterface) {
	putWorkContextOfInterfaceToInterface(d)
}

func (__ _InterfaceToInterface) CallAsSync(ctx context.Context, value interface{}, push func(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfInterface)) (context.Context, interface{}, error) {
	ch := __.GetReturnCh()
	defer __.PutReturnCh(ch)

	push(ctx, value, ch)
	rtn := <-ch
	return rtn.Context, rtn.Value, rtn.Error
}

func (__ _InterfaceToInterface) CallAsAsync(ctx context.Context, value interface{}, returnCh chan<- *ReturnOfInterface, h func(ctx context.Context, arg interface{}) (interface{}, error), defered func()) {
	go func() {
		defer defered()

		res, err := h(ctx, value)
		rtn := __.GetReturnWith(ctx, res, err)
		returnCh <- rtn
	}()
}

var InterfaceToInterface = _InterfaceToInterface{}
